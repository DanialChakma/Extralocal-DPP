# -*- coding: utf-8 -*-
"""
###############################################################################

The module is used for computing the composition of amino acids, dipetide and

3-mers (tri-peptide) for a given protein sequence. You can get 8420 descriptors

for a given protein sequence. You can freely use and distribute it. If you hava

any problem, you could contact with us timely!


Authors: Danial Chakma

Date: 2012.3.27

Email: danial08cse@gmail.com

###############################################################################
"""

import re
import math
import os
import pandas as pd
from propy import QuasiSequenceOrder as qso
import numpy as np
BASE_DIR = os.path.join(os.path.dirname(__file__),'..')
DB_DIR = os.path.join(BASE_DIR,'DB')

#PSFM_NORM_FILE_PATH = os.path.join(DB_DIR,'PSFM_NORM_PDB1075.xlsx')
PSFM_NORM_FILE_PATH = os.path.join(DB_DIR,'PSFM_NORM_RemovedPDB1075.xlsx')
BEST_SPECIFICITY_ONOFF_TRIGRAM = ["CMW","RMW","PCM","WPY","WMK","WWL","CWW","HCW","YCM","IWM","CMA","CWH","CMM","CCM","WPW","MYC","WCI","MWC","MWH","MWW","YCW","KWC","WTC","CFM","CHW","WCR","PWC","CMI","WWM","YHY","HCF","SMW","WCC","HCN","CYY","PMW","YWC","WWE","MWG","WHC","CCW","WMF","WHH","MKW","HEW","CQH","HPW","FWN","WCW","MWT","HFM","CHY","CYC","MWP","CWP","WHN","DMW","IWW","CMG","MCY","WCL","NWW","WNW","NCQ","WMW","WVM","HCC","TWM","QWW","WWH","WCH","CCQ","WHY","WWS","HMW","CYM","CMQ","QHW","TWW","CIM","WGC","TCM","MTC","WHW","WME","CQW","AMW","QCM","CML","HWC","FCW","RCM","CWM","WWW","PCW","MWD","MWM","WMH","TMC","WCM","FMW","NWC","MWY","HCM","WPH","FWC","CAM","CYH","KCH","CMC","KCW","WPC","CWT","NMH","WWC","NCC","HYW","NCH","YMW","WCF","WWF","FMC","CCR","CFY","YWM","CHK","QCN","MWN","WQC","SMC","YFC","YYM","MCV","RMC","CHH","NCN","HMC","PYM","WVY","CWK","CHM","VWC","GMW","CWQ","WQW","FCI","HWW","HDM","CFH","WRM","CMK","CCY","CWI","CRC","HTW","LWW","LWM","CSW","CRW","HYC","WCS","CMH","CNR","WSY","CMN","CKC","YMY","KWW","HWI","WEY","WIC","CET","WVN","KWH","WYI","CDW","MMH","MDW","YWP","MCW","WWI","CDQ","WCY","LWC","FNC","WMQ","PWY","MWF","WFW","MWA","CMS","CNW","WCK","QNW","NWM","CWD","MMW","CNC","CKW","CIH","NMM","MCF","WWQ","PWW","CYW","FWY","MFW","MYH","WCP","CFW","WYM","MFC","NCM","MCM","NHC","WSC","WWY","CWC","VCC","CWY","FCY","CPM","WCE","WKC","MPW","CMY","WWT","CIC","HNW","QWC","YWW","CDM","SCW","ECW","RWH","WNC","TWC","WHM","CWN","WPM","ICM","KWP","RWW","EWW","WMC","MHV","QCW","ICW","WFY","EWC","RWC","CWF","CCH","FWH","CPW","PWM","WWR","WEW","QWM","DCW","HNC","CWR","WMT","CAY","PCQ","WCV","NFC","HQC","WYC","IWY","WMN","MCC","QCC","HWP","WEC","FWW","DCM","CMF","CLH","CHP","YTW"]
BEST_RECALL_ONOFF_TRIGRAM = ["CGD","VCF","TPW","FWD","CIY","FYC","SWQ","EMY","CPY","HDH","LWH","ICV","FIC","CRQ","HVC","NRC","NSC","QGW","FQW","WRW","MYD","YDW","MFP","CYT","MLW","EYY","VHM","AYH","FWA","WFT","WML","DKC","IWL","WFK","DCY","YSC","FAW","CGM","WYE","WFG","HCE","QKC","QHM","HVW","SWP","YMR","MHK","NQM","PCK","LFC","NFW","LCY","YPW","NHN","CHQ","WSR","CVN","MCG","ECP","VFM","MQP","TIW","QTH","HKQ","SFW","FFH","HAW","WQP","TWI","ICP","TMY","RNW","WGQ","YRM","HIQ","QMR","WIR","AYW","EYC","DYW","CFT","WKR","NWQ","NNH","FQH","MRH","FHY","WWP","MHT","TCY","DHD","CYQ","MAC","HGW","QRC","AWY","MDC","NRW","CCV","NKC","WQV","HNN","IWF","HYN","HWD","KWY","IGW","CTI","IMH","IMF","RQW","TDC","MKM","TCH","QWY","HCI","CHS","FMR","CPN","FQM","YWK","TWF","HKR","CFA","HQN","IWV","CVR","DHM","MFY","WTH","CHV","CNS","CRY","WEG","YMA","TWN","EPC","YCS","FWV","QIC","WHA","HYI","MMM","RWS","EWH","YWQ","CPP","WIS","CCT","CFD","WKP","NPC","PYW","MIH","ACF","HRC","HYD","VCN","RCC","HHK","WIL","WLQ","WSF","QCE","HNT","PYH","MNQ","NYW","TCD","QCP","WSN","QMQ","NTW","YFH","INC","HNR","CYG","RFW","KCN","DWY","AYY","IHW","WPI","MMS","FPM","VRC","VMC","HEM","CCS","DCF","FWK","NHQ","CHN","WEH","NWR","IQC","HQQ","VWR","EQC","KWI","CQP","FKW","RQC","YCT","PMQ","NEC","CHR","CKD","PMH","QKW","ICN","PMM","QCS","HTQ","KRC","PHM","YMI","FCP","NHY","PCD","ACQ","FCR","NDH","WHT","HWT","WVH","HRH","MPH","ECD","MRM","HPM","SCN","HTM","CTF","WAY","PCE","NWK","PKW","QCI","PWN","YMD","YQM","YWD","YFM","CIQ","WAW","RFC","IFM","PTM","DNW","YEW","DMC","DWM","CYI","PMR","AHC","WHR","FCN","WAP","CWA","HCA","ICH","WQK","VQW","IVW","YWR","WHE","MEW","CAI","VNW","NNC","WDY","EWP","LCH","YDH","RHW","ICC","YHN","VWK","CGF","RYW","WIY","FHM","MYK","CCD","DFC","YMH","NTC","CYS","CHT","HRQ","MMR","WQI","TMM","FWG","HIM","YRY","WYR","FIW","MVW","MHY","WHD","ACY","TQC","CND","PNC","MCD","FHC","YHD","WSM","HHC","HCD","SWF","YVC","FPC","WNM","DCQ","VYH","PHF","CNT","WFC","MNM","QCQ","YCE","EHW","WQF","MFF","DMQ","QPW","CSH","DQM","HKW","SWH","TMD","PCR","HDQ","AWW","LHM","FCS","FYW","MHD","MMY","CKH","MGW","SCD","LWI","HVN","PWQ","AYM","WPE","HFC","HFH","RMH","WPK","NIC","MCL","CIT","DAC","IMY","CLW","GWC","MRW","PWA","RCT","PCY","PPC","CEH","GCH","NWN","MMQ","CCL","HPC","QNM","DWW","MWK","HCK","VMH","DMH","GHW","YCD","CTN","FGW","FWI","CQK","EMH","PWR","HHY","NMW","PWP","CYF","MHP","FCF","WHV","YYC","KPC","LWP","WMI","MQF","MQV","WMA","NAC","QCF","WYG","NFM","CMD","WKS","NQW","WPT","ECM","CDK","MCE","HCT","WPP","LHW","MQW","WHG","YYH","VKC","MIC","HQT","MQQ","HHP","MQM","MIP","EYW","QWI","NMF","MMC","QWS","CKM","QHY","WGH","CRF","WFN","HKM","MMT","MCP","MCI","WYD","CEQ","NDC","PHC","VWY","CKP","CFI","IWH","AIW","YWE","HDT","WCG","WEQ","VCI","CCN","SHW","TCF","CCK","WCA","CNH","REC","VHC","CHA","RHH","YQH","HWA","DPC","WWD","MSW","IHM","VWH","RCF","YKM","WKM","YCH","EWN","WFF","DWP","WFP","NHM","TFW","MTF","FDW","HVM","CLN","APC","QPC","CNM","DFW","FMH","YHQ","PCF","THM","WPN","CMV","WGR","MYY","CME","VMY","WYT","WFH","CMR","QCG","WHK","FMM","CNP","THN","MCQ","CQG","MCK","CFR","MWI","FHK","ICI","NQH","KQC","CHF","TRW","HMQ","MWQ","RSW","MHG","CVC","MFV","MHR","FRC","RCY","PPW","FWP","PFC","WNQ","WRQ","GCF","HNM","YNC","MYR","IWC","MFH","MIY","WPR","LMW","AYC","NYH","AHW","QYM","CCI","MTM","CNG","MGC","MYM","FMY","HMY","FTW","HCY","SEC","MMP","WWG","CKF","WQL","KWM","CQT","CDY","QMC","QMF","YDC","EHC","VWW","ECE","CEP","ECH","FVW","CNA","PMC","WYP","IYC","NWI","TYM","CAH","NCD","EYH","WLM","FWQ","WYW","NYC","CVW","RTM","FSW","IRW","VCH","FMF","TWP","IQW","CRH","QTW","GWM","NMD","LCW","TCN","WIQ","WYQ","HKH","EWM","FRW","CSM","PWH","MVH","CPH","QHC","WLC","RWY","PFW","ECY","FDC","NCF","WVC","WTM","WGM","FEC","FCH","QWD","HHF","ECQ","DHR","WYV","HMH","QSC","ECN","CDH","SCY","YYW","DQC","WPQ","HDC","AWM","YCF","QQW","MMF","NCW","IWP","WKQ","YAW","WRC","QIW","MWL","CVM","MHI","SWW","CEC","WIF","YCR","MQH","AWC","WKN","IYW","HGC","HRW","WDH","YCP","PCN","YMQ","CIK","YWY","MHQ","YEH","WIH","YWF","WIW","CAW","GWH","NWP","HWM","FWM","CFN","QMW","MHC","QHN","SCC","WMG","RWM","HSC","TPC","YQW","MCN","HWK","SWM","CDT","QWE","HWQ","HGH","MFQ","WQY","TCI","MDM","YHC","YCC","YMC","GMC","YHW","CQC","LCM","MCH","CVY","WNH","MCT","WAM","CCP","HCG","HWV","FMN","WHS","PIW","DYM","YHP","MHS","CNY","CHI","HFW","GCW","WFM","YPM","HWH","HLW","CGW","QCY","WLY","PRM","KFW","PCH","CDC","KMC","FHW","YWS","YLW","QWH","KCQ","CQY","CLM","YCY","WRH","WKY","GCM","DCC","ACM","YNW","EFC","PIC","WWA","TCW","WNF","MLC","VCW","EMW"]
AALetter = ["A", "R", "N", "D", "C", "E", "Q", "G", "H", "I", "L", "K", "M", "F", "P", "S", "T", "W", "Y", "V"]
__AA_LETTERS__ = ["A", "R", "N", "D", "C", "E", "Q", "G", "H", "I", "L", "K", "M", "F", "P", "S", "T", "W", "Y", "V"]
FOUR_GRAM_FEAT = ["HHHH","EHHH","SHHH","HHHS","LEHH","GSHM","HHSS","HSSG","SSGL","SGSS","SSGS","GSSG","GSSH","VPRG","MGSS","SSHH","SGLV","RGSH","LVPR","ENLY","GLVP","SGPS","GPSS","PRGS","NLYF","PSSG","LYFQ","AAAL","AAAA","AALE","AELA","GLTP","LAAL","QVVA","ALET","AALG","AAGV","TTTT","AALA","QALE","LELL","EELK","VAIA","TPEQ","MHHH","GHHH","LTPE","KQAL","LASL","ALGV","LPVL","LEEL","QALL","GGAA","AIAS","LKEL","VVAI","RAAA","ALAE","AKKL","GGGA","LKEK","AAAE","LETV","LLKE","LEAL","ELLK","LKKL","KLAA","AALR","ALAA","GSHH","GKQA","LLLD","EAAK","SNAM","ASGA","ALVA","EELL","ELAK","LEKE","LLPV","ADLL","LVDL","ETVQ","ALEL","EALR","EALA","EILE","HHHM","GGGG","LLEK","LKAL","VEAL","AVLA","LAEL","ALLL","QAHG","LAVL","EQVV","LRRL","AAVA","ELEK","LCQA","LVEA","AVAA","YFQG","AHGL","EALK","VDLT","VLCQ","ALLN","LAGL","LRKL","VAAA","LAEV","GGAG","EEEE","RLAD","REAL","ERLA","TGGA","RLRE","LSLS","AERL","GPGS","GSGS","EAAA","GPLG","HGLT","GGKQ","AEEL","DLLE","AALL","PVLC","KLAE","ALEK","KALA","VEEL","ALAD","LKDL","AVLD","AALD","LEKL","VGGG","EEIA","LAEG","AHHH","LLSS","EELR","EKLE","IGGG","CQAH","ELLR","LAKK","AALV","LATA","LAEE","ALAL","LEQL","KLVD","VLAA","AIAA","IAAL","KLEE","EALG","EKAL","VKAL","LKSG","LLEA","RLAE","ALEE","AAQL","ELGL","GSGG","LTAL","EALV","LELA","DSLL","AATL","KEKL","VAAL","AREL","LAAG","AAEL","LVDE","LRLA","LGAG","LARR","LPSL","EALE","LLDY","GTLE","KALK","ARAA","QRLL","EQLL","AAVV","LLGL","KTLK","LGLG","DTLL","LEDL","QALA","IASN","KKLE","GAAG","EELS","ALRK","VDAL","PEQV","LAAA","DAAA","EDLL","ELLE","ALLA","AAGI","GAAA","LKTL","LALL","ARLA","AADL","SLLS","EELE","TLEA","AEAV","EAAE","GVLT","GAGG","LSLL","IDAT","GSLV","ALRA","LEKA","LRAA","KALE","LPEE","LKNL","LLQE","LALA","ALEA","EEEI","LAIA","AAAS","IEKL","ADLA","LKEE","TLSL","VQRL","EVAK","TPEE","EKLL","LIEK","LTRL","VSSL","IDSL","LDAD","ENGK","LSEI","AGLA","VEQL","DALR","GLAV","KEIL","ARAL","GPGG","AAIL","RALA","GKLA","GLGG","GLEH","GALR","LGGG","LDAA","EAKK","LLNG","SLKK","AVAL","ELAG","LLEL","LDEA","AGAG","LRNL","LARD","LDEL","ELRK","ALSL","MGHH","GTVS","LLRL","VVLS","AEAA","LIAA","EELG","HHHG","TLED","VLKV","VISA","LKKD","VLKE","DNLV","IEEL","VKEL","VLRE","SSGV","LSKL","LLDL","GSSS","VLLV","ALGL","GLLA","ALTA","PLGS","SLAE","AEKA","PEAL","RALG","LLSA","VLDG","TSLS","LVAA","ELIE","LEVL","TLLK","LLEQ","LAPK","ELSK","AGLL","ALSG","KEEL","DLGV","SGSG","LSGG","AAAV","LREL","SSGR","AGAA","AAER","LSAR","ELLQ","NAAA","KEAL","GLSG","LEVV","ELLD","EEIL","KDLG","ALRV","LLAA","AVEL","DDDD","RLLP","AAAQ","LSSL","DPES","SGLT","LDLP","DLLK","EVLK","GKTT","IRKL","ELEA","ASAA","LLTT","LLPS","IGSG","ALKD","LGVP","ALLE","GAGK","LPEA","PGSM","EEEL","VAAG","ALKE","LEAV","ALLR","ALGA","AATG","AARL","LVKE","GGGL","ELED","EDAL","RAAL","SALL","PEEL","AALK","AAKA","LSQL","GAAV","KLKK","GSGA","VDGL","ATGA","GLVT","ATAA","VNGK","EILA","RLLR","AEGV","AAGG","LLSE","LSAL","VELL","VAKK","TTAE","GSLL","AKVE","PLLE","KLLN","EAVL","LRAL","AEAG","TGAT","QLLE","LGLL","AQAL","TALA","EEAR","DGSF","AAGL","AAAG","DGTI","LDTL","TVAA","GALE","LKEI","ADLV","DEVI","LAAR","VSSS","VAAE","QVLK","ALLD","VQAL","SSLK","LSKI","AVEA","SGGG","LPSS","LADL","LAQL","ELLN","VDLG","LEEV","LAEK","ELAL","GGSL","LELE","VELA","LEEG","ATLG","KILS","LLKG","EALL","LLKD","LDAV","IASG","TGEV","GSGT","AYAA","KKSL","GLGA","AGVG","ALES","ELIT","LSEL","DLLA","KAAV","AAEE","LLRA","EVEE","ELTA","KVLS","EELA","DLIE","RELA","TLLI","LSLA","GRIP","LSRL","ELAA","LASE","VVEG","EKLK","DNLL","LDDA","LILA","LLVA","SSGK","LSGS","RLAR","ILKE","LATL","TEAE","ILAL","GLTV","GEVL","TLVD","LSDA","EVVE","LAER","ALLS","VGAL","SGSA","QELE","LEAI","AVTL","ERIG","LEAA","LDRL","KVKN","LLTV","ADKL","VRAL","DALK","SHMA","ALRS","LAKL","SRLA","LDLL","AGEA","ALGG","GDLL","SGRG","VGLG","LLEE","TLEE","LTLS","SLRL","ADLS","RIAE","LGFA","LLRR","GVGG","ALLK","KEAA","SDLL","AGLG","AASA","ILAR","KTLE","FDVD","DAAL","AGLT","VLPG","RLAG","TVQR","LLSG","SGLG","ILDK","KGLV","AKLL","TLLA","RELT","LDSG","GRAL","LLNV","SSST","VLVD","LEGK","AVST","SLLK","PGGA","RAAG","MRGS","TAAL","DLLD","SVAA","IAAA","LLSL","GGKG","ELTL","SLAL","QLLA","VRGA","LLKV","QTAL","SALA","ARRL","AAVG","LATG","AAAK","VLLE","LLET","KLLA","SSGE","TLAE","LSLT","ALAV","GGGS","EVVG","GEVV","EKEE","GELS","PDGS","RSTD","LLAE","KLIE","GAKV","LKEA","LPLL","LVKV","ELIA","VVAA","LLAV","LAVG","LESA","LSAV","SVSS","VVVD","DLIK","DAAE","VAAV","ERLL","SAVA","GGSG","LETL","LSRV","AALP","KSLI","LENL","LLNA","GLEV","KSLE","TLPE","ALRE","LNDL","LNKL","VVVL","SGTV","ALKK","LTLL","GIIA","TALT","EEGE","KELG","LIAD","IARE","LKER","GTAA","LVDS","LVGA","RVLL","IKTL","APVV","LQAL","AAEA","EEVL","AGGA","SLLD","LDLV","KETL","EFLE","LLDE","SAAV","PADL","GTGL","QAEA","ATVA","AKAL","ATGG","GLRA","EVLA","EAEL","APAL","LGLA","LAKE","ELEE","LTGK","QELL","LLSK","RRLQ","VVKL","ALAR","ILSE","EIAR","ALAG","DDLI","GLLP","LPEG","KALD","EEGL","VKEA","VLPF","TLSD","LNLL","ILAE","LSLV","AKKI","SSVK","ELEL","LAGE","IAEA","ELVS","LDAI","LAEN","PAAL","FEEL","ELVA","AAAF","VVAG","ALDD","TASV","VADG","VLDL","LNAL","LEKY","KELE","RRVL","LLGK","ASEA","GTTT","REGL","LGSL","VKAK","AKTL","LHLA","LSNL","LQTL","TGKT","TAEL","VKLA","EQAL","AAGA","LPRL","SLLQ","LLVQ","VTLA","TGSG","EKTI","PLGV","TLLG","ELER","AETL","DDIV","SLLA","LAEA","ELKE","ILED","ASSS","EILK","GALA","LSNA","EDGS","SVLE","LGTE","AEAL","KLKA","KTIS","TAVA","GKLI","AAVR","ESLS","SLEE","EAVS","LEDF","ARVL","GELA","PALA","EKGK","EKLA","DPNS","LLNE","KVEG","TGSL","LLDK","GVPV","AGGS","SLVD","LSGL","KELL","ALER","VRDL","EESL","ILSL","AAQA","LLVR","LAVE","EVAS","RLAK","LANL","IKEL","RLDA","IADG","VLTG","GAGS","AAAT","LLEV","DLLR","LELG","LLND","LQKL","ALKA","ISSL","LKRV","VRAA","DGTV","NSLL","IVAA","LVEL","TGTG","VAKV","SGAG","VLPE","ALVS","AAKL","LAAV","RLLA","ESAA","AEVA","AANA","ELAE","LKAA","AGAV","AEIA","GSLS","IIGG","EAVK","SSSD","DLKN","LRVL","LVSL","LEKG","LRIL","ASAL","IEKA","HMAS","LPEL","LARI","VLSV","PLLL","GALG","SGAA","LAYL","KEEE","ALEH","LPKE","EIRK","RIKE","LADA","KALL","GGRV","EQLK","LEEY","AAIS","ILEE","KLNL","DIVL","LPPG","AVSL","AAIA","KVVL","AASV","ALLP","SAVD","EQLR","KILD","LLAG","VLEA","ETLQ","VVLA","SRAA","EEDE","VGEV","LATI","RALR","GAGA","LLLK","EVDL","EKEV","SVLA","EEVA","DVLL","EVIE","LPVP","GGLL","GGVT","LKIL","ELAR","AASS","LTVS","ELVK","AVAR","ARDL","LLLS","KAEG","ALSA","RGAA","SLSK","SVKK","AVDG","SQEL","ASLP","VVEA","GKIV","LPAL","LLLG","ARRI","KVLE","AGVA","RKIL","VAGA","ALVK","TLSE","LAAQ","REAI","LTDP","LLRK","VDAV","ELRE","AARE","LSAG","EVLL","GTLL","LSDE","KREL","GGAL","AGSG","EKLN","VKAG","DIEV","GLLS","QALR","GVDL","SLST","VTLP","ARSL","LDKL","LALG","IVEK","EKAA","AALT","LLAL","TEEE","VLDA","GATA","KLLE","IAKL","ELQK","KLKE","LVER","KDLA","GGGT","ALKL","GAIV","VLEN","AGIA","SGVD","PALE","DLGT","VASG","TKDG","GRIV","VTVT","TLLE","VEGA","SSAA","VKEV","LPGG","QLKA","RLLE","TGAA","GNIL","VAEK","AFLL","LGLS","PELV","EVLD","AKEL","ADAL","VLDV","GAMG","LIEA","ASNG","AVLE","TLAG","KVAV","SSKL","LTGT","VLKD","AATA","KSGP","LRES","LGPL","NEAL","RLEG","VLAV","LVLK","DTVL","APAA","LKPL","DLLL","LLAR","LAAS","EAEE","VDVL","LQEQ","KKAL","KKLK","ERIR","GSSL","LKSL","LLAQ","LTAI","GFLV","AVAQ","AVLL","VLAS","YGAG","AAAD","SGLN","PLPE","VGKV","LGNI","VLGQ","AVAD","AAGK","KIAK","SRVL","DERL","QAAA","VDSV","RLAV","PSGG","GKGS","LQEI","GERV","ARLR","EELI","RIAA","ALQE","KKII","KAIA","GGGQ","GRLV","ALSS","RQAL","EEDF","LISP","LEEE","LLGG","GVGP","SEEE","RLPE","LRDT","VKKE","VRLA","DVVS","EAVE","KAGS","LTSL","EGRL","VQLL","SVVL","LEQR","AVSS","EKYG","TTAL","ASGL","AVLV","ALRQ","GKTL","IVGG","ELAQ","DALL","DLKK","SIAS","VALG","KTTL","IGDL","DLLN","AELR","EFLK","LNLP","AIVA","ELGV","GLAL","GLLD","STLS","IEEI","TVKA","ELSE","VLKT","DADL","AEEA","DLTG","DVAA","LTTG","DAEA","DLVE","LALD","AVGA","TAAG","LKLL","LGEG","EQLE","KKGV","GSPL","ETGE","LGVD","GAAL","SLPA","LREN","ALAK","AVDL","ILEL","GELR","KRLS","RLKE","GVTV","RLGD","IKAA","DLSQ","GVKV","AAKK","LAVA","AGNA","GAAT","QALV","RPAL","DIAA","LGTL","VVLT","VSSG","EEVE","DVVV","TRLS","KKIF","VEAA","ERRE","KKEK","KPLK","AKDG","DEEL","LVEE","EAAL","GGAS","RVIG","ISGL","LLPL","GKGG","LGGR","FSSL","RILE","ALNG","GSGK","TLQQ","VVTL","KELA","DGVL","VLDI","LQVL","GLSA","GSLE","LGVE","SEAA","LTEL","KLLL","AASL","LVKL","AAEN","SEEL","LDPR","AIER","RDLL","FDLK","AIVG","AAAR","TLGK","YFQS","ASSL","GASG","KELV","AFLA","EAIA","GAGE","TAKE","KDLL","PEGL","GIGV","LERL","FLVK","ALVD","VLTV","SELL","ADEL","GEVI","VSAA","LESG","LKVG","KKLL","DLGL","LAES","GIDP","SEVA","VSSV","ELVD","DKLV","ILAK","RKSG","QDAV","EGKL","TVDD","LEGL","IAER","IAEV","VGVI","VEAF","GEAA","ALKG","IEVL","DLEK","FDLL","LLAK","EARL","DAVA","TAAV","LSKT","ADAE","LAAE","LKDE","LEGE","GLKV","QGLL","LRLK","LGSG","VLEG","IAEL","SGGA","LTVK","ATLD","VDLL","KLLK","RGSG","DLAL","SVKL","GGKV","SLVP","LLNT","GLDV","GLRV","LGRI","AEVI","KKEL","AVKA","ELLS","SLTG","AGGG","LLAS","LTVP","LRER","KRAL","ATAD","VLGG","LTPQ","LSRA","QLLL","RESG","EVLE","QLES","FLAE","LERA","KLEK","ADGS","VDAA","RVLG","GVIV","AKAS","KEKG","ELNN","TPED","IPVI","SIAE","GLLL","ATLK","VPTA","REEL","MAAA","EAVR","LLKA","DGKT","LEEI","LSSR","KVTL","DELI","ELKR","ETLL","RLGS","ISRL","LLLE","ELRR","LAKF","TENL","ISKA","GVDV","LEEK","GLAE","GDVV","LSKQ","ILSN","TLLR","DIVS","EIVR","VDGR","SLIS","RALV","AGKL","GGEI","ELVP","FSAD","SKIL","ALGD","KTLD","ALVL","AQLL","AYLS","ELRD","DLVV","GDVL","LLDS","VTLG","GGLV","VILD","QLAQ","ARAG","KGGK","SEIT","LSEK","LADQ","VEKL","LGAL","LEAG","PQLK","DKLE","SLKL","DAVS","LEAQ","LKRL","GVEA","EAGF","AQAE","ILAT","LGVL","GILD","ALDA","VVVV","IEQL","AIRE","LGLN","QRLA","SKRL","RKAL","LVAG","VLVR","AGLV","ALTG","GTLV","LLLR","LSAS","EKIK","RLLL","SALE","ADEV","IRLS","AEGA","ETIK","FLEN","LQEA","LQKA","VGEL","SGLL","MASM","KLKL","ALKS","TDTL","ELLA","IAAI","ETLT","EAVN","DGVV","VANL","TAKA","DENG","KAAL","KLGA","GLAG","KELK","RKRR","LLVS","AVAS","AEKK","ELKP","DTLV","LGVA","ALPG","GLPV","PEEV","GEKL","SLIE","VSVL","LGKT","LAGR","AKFE","GVAA","DILS","ELSA","IGGL","ADVV","LGAP","LDKI","KLGV","GKPV","GKSV","LLRD","LLEG","GTIV","DLGI","SVIS","IKAI","AIAK","ERAV","RDAL","FTPE","RRLR","AEAR","ALAQ","AGEL","ISSI","LGMD","NLLD","VIAA","DLAK","AVDI","SSLS","GAQG","LSEA","LRLG","VDTA","ENVL","VATA","KKLD","GVLE","EVVR","LTLG","GKAL","ELKN","LEKS","TLDG","LIKE","EEAL","KPLV","AEQL","IMEE","LVTE","ASLI","GIAL","ELLP","RKEL","AEIF","LVDA","LVSR","DEEE","LVRE","LLGS","GPDG","NGVI","LSGR","SLGA","TGGR","AEVV","GSGI","QAAL","DALN","LEKK","SGGK","KYLE","DVLD","NKPG","KIDE","EDFL","ASDG","FSVL","RNLL","TSSS","ATGK","ASGN","NALA","TLKV","LSDL","ERLK","LERV","QLKK","LAPG","LLLN","GLKE","LSAA","GTGN","TLKL","LTVE","IERI","NGQA","QELA","LLLP","AAFL","ESVI","LIKA","EVLS","GERI","ELGA","QLLQ","TLEK","EKLS","VEVN","AAEI","TGAL","GKSF","KAGL","LKAE","EKLT","KLRE","AREA","EEED","VDSI","EILG","LSLK","VVLG","LTAV","LKEG","EKAI","EGEI","RKLL","LQAA","IEAG","EIFK","LLRV","KQLK","KTGK","NALL","KEQL","KILE","GAIL","LDKA","ADQL","GGGF","RIID","EAEV","LPAA","KEKV","GFTG","KRLV","AGAT","AKDL","ITPL","SFEL","LLED","KDGK","PVVV","LAPL","PRRR","ATGT","PTLL","FGLS","ISDL","LGRA","VLNA","FLSE","LNTL","LDVL","VADR","TVST","EAAR","FEDV","SGLS","LKRA","KIEV","VLGA","ITAL","LGIT","AELE","GAGL","RNLA","GSTL","DPSL","VEGV","ERTL","LLAD","SLVL","KAVE","DKIL","REIL","ILSD","ESLL","LDVV","MAHH","DLSE","GDTL","EALQ","QLSL","RVKA","VVGA","AAQG","LSKA","KDLV","ADVD","LIGV","ILQE","ADGT","LVGE","DLLS","TVLL","LLVT","SDGL","KLAN","INKL","AAVE","SPEE","PDSV","DSLI","LLNL","LKTG","SGAL","SGAF","SSSK","VTLL","KLIS","LGNV","MTGG","EAMA","EAVG","LQAG","IVSG","ALRI","AKAG","AEEI","GGAP","LAKR","GRGG","YELE","ADIL","ERLS","DLIQ","SLSL","GGVG","NKVI","LKPE","VLDS","GKVF","TGEL","SNSS","KLVR","SLTS","LLST","EELY","VKKL","LSDS","DAVL","DLRA","RQAA","LQTA","KKIL","LTEA","LRDV","RDAI","RSVK","LADF","ELQL","LLKN","TSSG","RALS","GETV","LADG","LSTL","FITS","EGLD","QKLL","RAVR","ALKN","AGVL","GSMA","GDIV","EVDG","SQLS","ERAL","SLEL","VGLP","DGIL","LGLR","KGSS","EKVR","SKLT","GNYT","EKEL","DDAL","SPAV","DAVV","SSSV","GVRG","KPFV","LTKE","EYLK","IASH","DRLE","LLLL","LNDS","TPLA","DELG","DILT","DPER","VTEA","VAQA","LDDG","LFGT","LLDQ","RAVA","ALQL","GSIT","LKLM","RGGI","MASL","KILQ","SALG","GGQQ","LIVS","VAVV","AVVE","VTRE","EKRI","IASV","DKII","GEEL","GKVK","VKGL","LLQV","GVAG","STFL","DGTE","KIEE","VDDL","VAVS","SLAA","GLAA","VAEL","LSED","EKEI","AKKF","KIIS","RKRL","KLIA","SKIT","LKGI","LSTA","ILAA","GLSL","SDFS","TLVE","QKAL","GLFA","GGKS","IEEK","LRLL","LLPE","LNGE","GAGI","LASA","GADL","YLSS","LGFG","IKDL","LTRE","VLGL","LGEA","VLDK","LSSA","GAVA","RGAI","QAIA","RKLA","ALEN","LGEL","GKRV","LRSA","AAEV","ETLK","PETL","EKAK","IKRS","SVNG","AILE","GVLA","HHGS","VEKV","EFLV","DLDE","KLLQ","DGGL","SKLG","KADL","RTSL","ADAA","EKIL","IGGK","SLFK","ETLE","LREG","RAAQ","DLLV","LREI","IDLS","LSLP","ADTL","RAAD","LLQS","LSLN","CPEC","GITP","VLLD","KKLI","LDPA","GLTA","LRKG","AIDA","ILEA","KKGL","EKKA","KAAD","LLDR","AGDL","IKIE","VSLE","KDLE","IVAQ","EDLK","SREE","EEKE","ELVL","LEEA","SALS","VIDA","LEQK","NLEN","LESV","VKDA","LGLP","SGGE","ASGR","EGLK","KILK","EIVD","LSEV","VKSL","PAAG","ASGG","VDLK","SVED","LTER","KLVE","AVAG","VVSG","TSLL","GGVS","LGLK","ELLV","KALV","GVTR","SGEI","GATG","ELIV","TLAL","IAQA","RENL","VQAA","TAIL","RQQL","LENI","AAVK","EQLA","RKVL","PSLA","DLKE","FALV","DVVR","GGAD","PVIL","ARLL","ALAF","GVIK","EEIK","TGLL","EKVL","TVNG","EEES","LLKL","LDLI","ESGL","GLSD","ELTV","LGVN","LALS","EEEA","GEKI","IVDL","DLGE","YVTE","VVDG","TVGE","KGTV","STLE","AAIR","PVSQ","ELRQ","DLSV","VVIG","DEDD","LGVR","AQGG","EIAA","EEAE","SIEE","VLLL","FAKA","TDGG","LLDI","SLIV","ALLG","IREA","TGNL","SAAL","STGT","VIES","PLEH","VDGK","SATL","EELQ","TPQQ","SLLR","PAAD","LQER","RLSA","GLSR","LVKK","KLEN","ALTD","VLSE","ILTN","QLKG","GLVG","LRDG","SAAS","EDIE","AKAV","ELVE","GTGK","TIVG","VGVL","LVAE","SLGK","SENI","LVDD","DNAL","GGGK","VLKG","LLEI","LKGG","GLAF","VLSK","ERIL","ASVV","TVTV","RLAA","KLSR","LNGG","KEVD","AIAL","TVAQ","ERLQ","LSPL","AKLA","VVKE","RVRA","SASS","KGDI","ASEI","TAVL","VFAE","SLKA","EAQR","LQQL","GLAK","IASS","LSKR","AELL","VVDS","DESL","LALE","ALID","TLIT","SVVK","GDAA","GDVI","SEKL","SGKK","ERVA","TLTI","FSSV","LDEI","KEYL","PEEI","GSAL","KKVK","LNAA","DDER","RRAA","GATV","EEAS","AKDV","LLHS","EKDL","LPQL","LKDI","VGGS","INAA","DGGK","LEIP","QGLA","GKPA","KSTL","DEAI","LGLV","VVVN","EEGK","EAFL","VKLS","KDIK","IATG","KTIK","VSTV","KASG","KFLA","SLAK","KELS","VEEA","ASSA","QAAG","SGLE","IDLL","NELL","GVAS","LEIL","DGNE","IDAA","LLDA","LEDD","VIPD","NQVL","DGSG","GIIL","PDGT","SKLA","SDAA","LDEE","ELIS","LKKE","GGAT","SDSS","GTVN","DRIL","VLLK","SLSD","GVAV","EILS","GSAA","IGAG","LGFL","LTAS","TVQA","KDIL","LLQL","QAAK","LLEN","GTLA","TPTG","VPGV","SGVK","LKKK","SSAL","YLLT","LKLG","LLLA","ALVR","LDYL","ILLL","SSLA","STAA","VDVV","GIKV","QGGG","VASL","NLLG","LKVL","TTGG","PELL","LAGG","GLEE","LVSS","GGLE","AARA","EAIL","GKLL","GRGA","AGKD","ASAS","SLSA","DVVL","VVSL","DAAT","KSVG","DEID","VDSL","GRLT","LTGE","VSAS","AVRL","GKDL","KKGE","AGSE","SEQL","IKGS","NGTV","NQLK","VLNG","GLVD","LLQA","ELGE","VSAL","GLFK","TLLT","LGGT","AGGR","IALE","KATG","LSLF","SRLL","VLSS","AQDA","IDLK","DAEI","RVLR","DGKA","GVIA","GADG","IIAA","EKGG","PPPP","SAAI","VGEK","DGII","ATLI","ADLE","ALNA","VENE","RLVA","EGLE","AQLA","DLPV","KVTE","LVIA","KALY","AQRI","AELS","LDVG","PEVK","GQAL","EPLP","SVGL","VDLV","ALAN","LLDD","GESL","AKVT","IVEA","LDNL","ILNV","ARGR","GVII","AIAG","AENV","GSNV","EEIR","DSDG","GVTS","KSEI","EVEL","AENL","VADE","GEKP","VLMA","KNLK","LASS","SLVN","IASD","DGRG","DEPL","GTID","DVKL","EGLT","ESTL","DRLP","ILVK","IIDA","GIVE","LDPE","LLKP","DIAE","LKGK","QVRA","IVRK","IELA","IKNL","GALI","AGGV","LDVD","LEGR","LAGP","AKLR","ECGK","RNAL","GLRL","VKGI","EGLL","AGAN","DELK","AARD","GITG","RRIL","KTLS","DALG","STLR","TVAE","LAET","ILGL","GVVV","ERRK","KIER","GASL","DALI","KAVD","LAVV","RLPS","DRVL","YLPD","PKTL","KAIL","SEED","VGSL","EADL","EFKE","ILLS","LRVE","SATS","KAAG","EVTE","DLEL","LRIA","KANL","LTVD","KTLL","ADLK","AWLA","ELGF","VRKE","LPDL","LTQL","LRSE","ENLL","EGEV","LIRL","AKNG","VVLP","LQEL","ADLI","LETI","VLGT","GRLA","GKSA","GNVI","KRLR","EQAA","ILDA","DTTA","TLDS","STAD","AGAL","TAAA","VDSS","AKIL","EKEK","DLTE","ESIK","ALEQ","GEAV","LRVV","AKTG","DLKD","KEAV","TARA","ALEV","TVLP","ALRR","GDVA","ALAP","QILS","ELPE","GEDV","KLLI","KQLL","AKRK","LQVV","IDNL","APLL","ALPS","FLLD","LLKK","KRLE","KRVL","EVVV","ARIA","LLIA","GAAS","DLVS","KAGA","KKIV","IIPR","LRYL","IIVA","AEKT","DRIA","CGKS","GETL","ELDR","LRQV","GRAA","FKES","LNVS","GKIE","AKNI","GVSS","DDEL","DGVG","PECG","TFEN","LQDL","GSKL","GSEV","ADVI","AGFT","DEKG","AIKL","SKDP","LENE","VVLE","RNNG","GAVN","NATV","TVSA","AVGG","QAVL","AVIR","KLKS","AKSG","SASA","DGRV","ERLD","VEEV","GSSA","GEEI","LEVI","EVAR","LSLE","ANAG","EDLD","AFLV","EAII","SGVG","VTIL","TGTT","AVGD","SSYS","GTLK","LGAV","GTDI","VALA","IAGV","GVVL","ITGG","VVSK","SAKD","RRLV","VSLV","TGEK","GEAR","LPIL","AVRE","AHEL","LTLR","RGIA","ELAS","VVVA","EKFG","TIKL","RLRL","KLSL","ELLL","DELV","AEAE","LESI","ESLV","FLLE","EGVL","GSLI","LVEK","QAGL","ADSL","RGVE","LLAN","VDRL","LEEN","EVLR","EDVV","IGAL","GKTG","GTEL","AVGV","GVGK","EEAA","SKLN","LSVS","LDLF","LLRQ","IRAA","GAAF","ALAI","SPAP","SVLS","LLNS","AVFL","EVVL","RLEQ","LDAG","GSVL","LSST","LEDV","NLLK","HLAA","VFSL","VGLV","LVRS","VSKG","NGGG","LTFL","FLSK","VKLI","PALK","ADRI","ALVE","SLGN","SGGT","AELH","GILS","GVLF","GFSA","GALL","AEDG","SGSE","DLKS","QALK","EGLG","SEIA","RQLL","YLKK","LRKV","LALT","RRER","EKSL","ASVG","TLLL","TVSS","LKSA","DLLP","LNAT","IESI","GENL","GTTG","ISQL","LVRA","KDAA","VKVA","STAR","GSDK","LTTA","SLKE","NNIR","LNVL","EGLS","PGAA","LAIL","ALDP","HLTD","ATIA","KKGS","VIGD","NLEK","DELT","DTAR","DERI","IVRD","LARA","LKNA","DKAA","DIGS","VDLD","PDAP","AADE","LAEI","QVLV","AFSG","LLRN","EEYI","SLLE","FRLG","GLGI","LVVA","LIIV","VSAV","RLTA","QLEK","GLTR","SGAR","STGF","GKIK","LAGS","KEIE","DQLK","KLRP","EEFG","LPFT","VIER","ESKL","PDLI","PGSS","KDVL","VAGE","GSLK","ARVA","RAVS","EIAK","AAMN","APGG","KAKG","IIGA","SVSD","AGID","ELSL","GERA","DASG","DLKQ","RVEL","LDLG","PERL","NAAL","KKTG","GAPA","AATI","KALS","FRRG","VVVT","VNLE","LLAP","TLGN","KAIV","LTLK","VVDL","QSGS","TDGT","TELE","GGRL","GIEL","ARLS","VSAG","HELL","EGVV","EQEL","EDSG","RLSD","TPEG","TLPQ","GFSV","GSVT","PAVR","GAII","LGGA","VSLL","GGPS","TGSI","AELV","KGKG","VDPN","SVLK","DAAV","EELV","GVLD","GVGL","VFDL","DGSS","AVLG","ISAE","ERLE","LVVV","DFLK","KLIK","GGTG","ATLA","LAED","KSEE","STPT","GGRQ","LVLS","ASLS","AILG","SRDA","FTSA","LPGV","IPED","LLPK","AGVK","LPEV","LTVG","LVLG","DELL","AVAE","DGKP","ALAH","LGSI","EFGG","VISS","QEVL","KSGV","GFGL","GNDG","AVEK","DGES","ARRK","HDGG","SVVA","PLKE","AAYS","ALEG","AFLE","IPQL","VGGR","IADR","ALAT","GELV","LKDF","DPAA","GLYT","GVSE","SAEA","IVAG","QQEL","EVKK","LTSR","QGGD","LGGL","LSTI","AGTG","LEGF","RRGA","EFVR","VLEL","SLSE","ILRY","LVLD","GKVI","RAAM","ILGS","ADGR","PGLS","DFLD","DATA","LVTI","AAKV","GSTS","PGGV","DSAA","GLKR","ISNS","ITGL","LDGL","VGDL","RLNK","LKVA","EAID","LLTD","ASVA","GEAL","EGKI","LSLG","EITE","LVPA","GKVT","LNGK","AVLN","QNIT","LKSS","RVLA","VIKD","ERLR","IEEA","KSKF","ALDL","AVEE","AILK","GFAV","GDAV","KLGL","SPDE","NGKS","GKNL","NNLK","ELLG","KLLG","IGVL","QLLD","SIIV","AAKG","EAAV","SVLD","QELV","GLGS","SKGL","LEAY","LLRS","TKLL","EQLQ","QTVL","VDEI","LKGA","QLKS","SVRA","VSEL","PDKI","NIGG","AADA","ALPK","KPAD","LRGS","FAEE","LLID","LVRQ","LKTS","NGEE","ASNI","AVKR","LARV","ENGQ","LSPV","AKLV","EIVE","LGEE","SLSV","LGKE","LAGK","DGLL","KVAE","IRNL","KVFG","LLDV","KQGV","IVTL","LSPE","RELS","VEAG","LNGL","SKKV","LARE","AQVV","GASV","FREK","ELFT","TADL","KAEF","SASG","EEDI","KKLS","NGKL","NGLV","VSGS","SDLG","PEAA","VVGL","DLPA","TTLA","VVEL","VSGV","TLQA","KDGS","VIGG","QLLT","EIAL","IKEA","RGLA","ADFL","EGDL","DGTL","LENV","LRTL","IDDA","GTLS","RSEL","KELI","EKLR","LLSQ","DLTD","EKAG","TVLE","EQAE","LPPL","DRLR","AVVL","AQKD","SLGL","AKVL","PALR","ALGS","VREA","GSAV","DGRL","QASL","KSIA","STLL","VAAT","AKSL","SIKD","ALHL","EEGV","KEEV","ELSR","LGAS","GQVA","VIGK","DAVR","GKGK","SDKI","GDIG","IKDI","VEAV","SGAE","RVAA","IILS","VAVL","LEKI","LEVA","QLLG","RLGL","LTAD","ALFS","DVDG","HPET","TEEL","GLLN","KLED","AVLP","IVEE","RLLQ","FSPA","HTGE","EDTV","LFSD","LAGA","KKAG","LVEV","MASA","RDLS","REKI","LAAN","NIDD","YENG","GTTA","LRAV","AGFS","AEFL","TLAT","AVGE","SAGL","SLVK","ILPA","VLAN","PVVG","VKVK","RLSR","NSGA","TVRA","EAFA","LLDP","EERL","ASHD","VTLS","KDGR","NKLL","EVLV","DVLS","LVDK","IEDG","SSAQ","STLT","VSSI","VKLG","TEKD","RDEL","PLVL","GSGL","GIRL","LLVD","LLGA","KLLS","DAVI","TGPN","DKPL","SAAK","NLLP","LYDL","TPVK","IPKD","SDDE","KLLD","TISK","KEFL","LLQN","TLVL","ADKA","PLAD","SGEL","AAVD","LDDL","VPVE","EGLV","RQVL","GEPL","KELT","DLLT","LNVD","GTEN","AVSR","VKLL","SAAP","DLPP","DEDL","TALV","EEQE","EASE","GKTP","LARL","AAAI","ILVG","IATI","SHDG","GDEE","LDIA","KLAD","PEER","IRVA","LGVG","IEVK","VLEK","KGIA","AVDD","RAVE","EKLF","KLSD","EATV","QTAS","EKVF","VGFS","KRLL","IVLS","EAGL","VVTI","PLPT","TATT","VPAG","IGVT","GGLA","ELKA","VVKA","ANLG","SRLR","PTAA","EAFK","GESA","TDPE","AASG","ALIE","RVAL","AELT","AEIS","KGET","KEVL","ASTA","LDVI","EAAG","ILDL","AEDL","DILR","SLEH","RSGS","LEPG","AKLI","QLAK","LRKA","IEDL","GDIL","LAQV","LISG","GTGA","VDEA","RFEK","LIIE","LAKI","RLLD","ILDD","LGST","STAE","VQEL","LQRK","ENID","GAEL","LIDA","ELDG","SILL","RSGA","GVNL","KAAI","VAKA","LIEG","TAEN","VLVE","SDGT","EGSL","IAAS","GKKT","GRGS","ALFA","VAPA","AAVI","KPVL","RERL","DEVA","SLKD","KGKT","KVKG","RAQA","SLPP","GRVV","TTAA","GLYK","VLAR","IELE","VEVL","SEAL","PELQ","SGVL","ATDT","VLRG","ITVF","KEIV","KILG","YDLI","STDG","GISD","KKAA","DFLI","GRTL","SLAN","SPSL","LLLQ","TAEE","SAVL","GVSG","LTVA","RVGI","LSKE","ALTL","AILA","SGST","SGRE","GLPI","DKLK","ESAG","EKLV","VLLA","RREL","KLKN","LVAS","SIEG","GEKV","IIVG","VPAL","SGIP","LTDS","DILI","PLPP","SISS","SPDL","EENL","VLVL","LAIV","LITE","RIEE","TLLV","IVLN","KLAK","AKGQ","VAGG","TLKK","KSVL","DGYL","ATPA","TGGE","SAAT","IDPE","DLEE","GSLA","PQLL","EIAE","DYLK","LEDI","LNEI","KATY","GLIL","QLLV","KLAS","VVTR","VLSG","KEED","DATL","LGVK","KVLL","TGLA","RVLD","SIAL","RRIA","PEAV","ELAV","GGTA","ISRI","VDDD","VDGV","DLAS","LNRF","LILT","EEFL","SSGH","LSGE","AGAD","LGPE","AVAF","TVLI","VILG","VLFG","IFLG","RKKS","LRRV","VAFL","DSGS","RQKL","LDGV","VEDS","EALS","TALK","IERR","KVIP","NVTV","RLRV","DSLA","DRFV","RDLG","NLQE","AVEI","LKEV","LVSQ","RALL","LPED","KFEE","ILKK","GKEL","AQAA","TLKD","GAVG","LTGG","ELGN","AGIG","ERVI","SSPN","IGEL","SRII","LVNG","TLPI","EVTL","ALPL","DLTS","TALN","EIAS","VLLG","SSEE","ELAD","INLL","ATSS","SDGS","FEKL","VELD","SVVV","VNDI","IIDL","ITLA","SGRS","GKKS","KGDE","LAYG","TELT","QAAS","VVAT","EGNL","ELPL","GTVA","DEIA","LVLP","ITGV","IILE","GIVK","KLEA","ANIL","TRVE","LSDY","GKLV","EVAE","IALL","DKNI","ELSD","SDVL","LDII","GESV","LVTG","IIAE","TAAD","EARR","SSIA","SKAS","IGIG","HTLT","GAKL","LEQA","EDDG","SITV","ELDE","AGES","TAEA","PDGV","DAFL","GLPP","VPVV","SLDV","RALK","PVID","DTIL","LDGA","LVAV","LSSK","LQTV","PALL","GNSL","LHTL","AIAE","EKLI","LIID","GVKL","EGDE","NVKA","DGDG","NTGL","RKTK","SKIR","SSSY","TISL","LEED","ELGR","AFLK","QFPG","KGLE","KIIE","TLTL","DIVA","DYLR","SVPL","LGAD","DLRK","IPAA","LLAI","DSVL","TPAS","GQQM","AVSG","IGGA","GNAK","QLLS","LATN","LKQL","LIEF","GGTV","ALLQ","LTPI","TSEK","NLSK","TSIK","RKTV","GEPV","KNLE","TSTG","FSGV","AKHA","AVRA","TLLS","ELLT","QTAK","TRVS","RLGI","KRLG","NPGL","IVAL","DKEG","GGAK","NARA","NDIL","LHAL","GLLR","AVTG","AAYE","LDDV","DILV","FREL","NPSL","SFLN","AVPG","DGLI","AVAV","TTSR","LKAR","AVRD","SEGL","LVAK","SLRS","SEII","KDLP","KLVK","KTAF","LSTN","TLEI","LIEL","RAEA","SSTV","GILE","VKTL","DGSV","MKVE","LADP","KRSG","AEEV","ISKE","ERAA","GGPL","AERI","RFLA","LFSV","AEAF","AIQE","EEEV","PGVG","VYDL","SGKR","AADP","VTLK","LVQA","ETFT","RDAG","DLDT","ATAH","VSGL","IAPG","AVVS","IEGL","GEVS","VPII","IKKF","DEYI","RQGK","GVTD","LEKV","SVGG","AKFI","LLDN","LSGK","LGKG","LFDR","LEPT","PKGE","QGPG","ARIL","KISK","FSSG","NGKK","DLRI","ALHI","KSSL","IENN","RYAL","IGVV","EARG","GVRA","LLHP","GESI","VKLN","VGLA","EPPP","DEIV","GEKT","MEKL","VIED","RTLA","ADGL","LKVD","MQAL","KVAD","LGLE","AETV","KKFS","AVDT","ADEK","GKDI","EDGL","RVVV","LIKQ","NADS","TATL","RLLS","ANLP","VVPL","EGAE","SLVS","ISDV","SLLT","GEEY","DGRP","PEGT","EARA","VIEE","TLIV","QQGL","ARGA","LSAT","SRAR","NRLK","KTGA","RGST","YALP","ITFE","RKLF","NPDL","LMEK","AITV","LVAI","SSVP","SMTG","LVNR","NADG","AAIE","IISN","LDKG","DPEE","NLDE","DGQA","EGTR","EDTE","SSSG","GGGR","AKRL","KGLK","SSLI","RDVV","SLEK","GLGE","LGQL","AKVI","QGLS","FLVA","GVIL","GTIS","GEMS","DGVR","LLGV","NVTD","AGGL","ALPR","VLDD","VGGA","IIAD","VRAV","RLSG","INQL","TLSP","RSER","MGRG","VVDD","ADFV","VISG","GLIA","IVDI","ILER","KAVV","VVAL","GNLD","ITEL","RELI","RRKA","IDPQ","AGAI","AGLP","DALE","GLGV","RDGR","IDKL","GYAG","LDIE","KKLV","ADAR","SATP","NVAN","SADL","LFEK","RVEY","EDAE","ILEK","LLAY","AVNV","RGAL","LEEQ","LPLD","FELL","SSGG","KQLG","KELQ","IARR","KLFS","LAGF","SDVV","DFPG","AELK","SLTE","DIKG","SGTL","RLGR","GDII","GADE","QSVL","QSNI","GKEK","TLRL","QLVK","PDLP","GVEI","GENV","AGEI","NLLV","RQGQ","LVAL","VRGD","TTLV","NLLL","GLKL","LALN","ISIS","EKVV","KKIG","VERA","KALR","TVPT","HSQD","LGID","SGLR","IAIA","LDFA","GTDV","GVVF","GLSP","AQKI","RYLS","GVTA","KKEE","KTEE","KEKI","LGVY","VEES","EEQA","DGSL","LQEG","SDYE","EYSL","EVML","GKTF","KVLK","EVAA","DVIV","DPET","INEL","VAAS","EEIG","LKPD","SDIV","LDSL","ERIE","LGKP","LKTM","AETA","IGVE","KITV","ILEG","AAPA","GEIV","PDLV","ADSI","LDED","RLGP","VSLP","ARER","VTTL","ELSS","LLHR","AKTI","EQLG","GGGE","DVLG","ILKA","QLDL","SKNL","EIIG","ALLT","FKEA","LKVI","DGEK","IVTE","KPEE","LVKD","LGKL","SQLD","STSD","KAKT","ALSK","KNII","LPII","AVIN","HHMG","PIEG","AGLQ","LALV","AETF","DAGK","FLVG","LIEE","PDSI","VRAM","ISKI","EATK","RGGV","QAAE","AGVP","ETAE","VLTA","DDIE","GARL","LLNY","GVGN","LNQL","GDLI","LANG","PEGF","SKEA","LGAQ","KVED","FLAD","GLDS","RLTL","TING","YDYL","GASS","EVGF","GTAV","EVSA","LQLL","LRYV","PVPL","SHSG","IVSA","RRKS","FGYD","GSGP","EDLE","EDGR","DAAN","IRGL","TLLN","VTSG","GLET","KVIL","SGKP","GTLR","DNLR","EATG","PLLN","PASR","VDDI","FVAD","YPEL","RKAS","GKKF","NKLK","ILAG","EIGS","LKAS","LHRL","RVEE","GDIT","KEKE","LRTV","AINK","ILKN","TSIA","GSTT","EIAD","VKVL","LKLK","EATR","NKLF","EDVL","EKKL","TGIK","GSVI","LSRE","LERG","SQDP","RDLD","SGKT","IRKR","ALDG","ILRS","REII","RSTL","GKLT","LKDN","ASGS","EIIL","EDDI","LADV","SAFS","ERLG","AKIQ","IAVS","FLES","AVLS","FKAL","LETS","DLPE","AKAR","KGLA","EKLQ","SGAI","GIIT","ERLN","GKGE","NEKG","NIIL","LSEP","DELR","RTVL","LVLL","GLAI","KGRK","LLSI","EKRE","DDDK","GKTA","KEVV","SGGL","AANL","LEDR","KVNL","GVFT","RGRI","AAKQ","ASLA","KQGA","KLLR","AVNG","IVID","SGGS","DLDG","GVVG","KSGR","DYLL","SALV","LAKA","AGAS","KLLP","LESS","KVVK","LLKR","EIDE","LELR","VKKT","GELK","APDG","LKDA","LEER","RLFK","EKVE","PSVV","EYAK","ADLT","ITDE","TIAE","DDDG","AAHA","AEIV","ETPV","LSNE","LIQL","TAQE","VAQG","GFKP","VVRT","LPPE","SGES","GYGA","GKST","KSLG","TLSV","FGGD","DVPG","RAGI","LVAH","SGSL","QVLA","NGDG","KTGD","SDIR","VRGG","LDRV","YILA","EKIR","ARLG","DIAL","AQAV","EEAV","KELD","IVEV","KVVS","LALR","KLEI","ADFS","DIIE","VDIS","IGER","GGKL","GNLV","GFSP","EIPE","KEGK","SHME","GMNL","LSLH","SAVE","ATLL","DVVK","FAGL","QLNE","ERAG","GIDA","GKSS","FLTP","FRDI","ETLS","TEED","DAVT","VYVA","GAVY","LKNG","DPRL","ISKP","LENN","RKAE","KRIL","GIKE","RKII","GVLR","LKNI","LGGE","ARLI","NTSK","RALD","GIEE","ALVF","IAKR","VIAL","GKDG","VREL","NIDL","LPTR","GGSI","LYDG","LDPS","PAGA","TKKD","SAIP","VKLV","EKSQ","PSGE","ILGV","SKVK","SSVT","SSLR","GFSG","RGLD","PSVG","IATA","LAVD","LTPR","RGTG","ENLE","KLFA","DIGV","LAQG","GANG","AAET","LNAD","SFEV","PLAS","DISA","SPNG","KDED","LSDK","TALL","SKLL","AQKA","EAEK","GTAI","QQVV","DAEL","LDKE","GAGV","GLNT","ENEL","SVDV","LIGE","TDPS","ANSL","CGAT","ALGI","GKVA","AKEE","SAKK","KDLK","LAKD","ILGK","RLRD","IGDG","FTGL","VLEE","DYLE","ARLD","DLRT","RLVS","PLVE","PGEL","KGRA","VTDE","DTVK","GDAS","LALQ","ASVL","VIRA","LHSA","EVRA","LGSP","ALRD","IAVL","ARRR","GREI","LLGF","AEVD","LENF","LIGG","DLVT","VTLD","LSQA","KVTV","QRAL","ARKL","KAFL","ASLE","PPVL","TPEA","RLAS","QEAA","GVDP","ARML","TLVS","LSFE","VEEI","KPAS","SDIL","RAGV","SPSP","ARAR","RRRL","KDLI","KTVS","LLAT","QLKE","AAGF","DKAT","NDLI","TLND","KEEI","LTSS","EVLG","TTLL","AAYK","GLAT","LEAD","ALQK","SSIK","NLIL","ELTK","PADI","LSVR","GLVV","IDVT","VPGL","TGTL","RLAI","SSTS","AGEK","KEVT","GADV","GVNV","LQNL","ILTG","EIGG","NEPV","KLFL","GSII","KDLS","TALH","TRSV","EGVA","VLRR","TILK","QPVD","EKII","PVLL","SSGT","GRKT","DLIR","LTED","VTEI","HMGT","GDRL","ILKR","LPAD","TVGS","KVIV","EDED","SDLE","RLNA","NTLV","KNPD","GESF"]
FOUR_GRAM_LFEAT = ["RWGK","TQVM","WKVE","VSKW","GLYW","MRFW","DCSH","WRTV","DRLW","QDDF","VFMK","PMVN","GRCI","MGLD","WRRT","SNRH","CQTK","IQSY","NDCL","IVYK","SKCD","DFGS","CTKA","WNSH","RETA","KYET","GDIF","HFFE","LFPG","CWSD","HLFH","GRQI","KFVI","GEMW","HCIW","NLTF","HESL","QVWF","GIII","DHHV","NTNW","TCAY","MIDI","PVDH","RRYK","KICC","AVML","EYLG","RHAH","PFSI","CIVS","KCQW","RDPP","HASY","GNCT","HSDV","PVTW","ACYQ","QCTL","YHNL","DYFL","ACSV","NNYA","GATH","IACQ","GIHR","ECLA","GYYD","TDWE","GAQY","FTEL","EYKP","MGQF","NSDS","KQKT","CQPP","THFH","HQKE","DQND","HNSE","QRWN","NMKF","EWGH","NHKG","QNYG","FNAG","DLRN","MEQV","LQSK","KHCR","PNIY","KMIF","TLAW","ERPR","EVWS","RRCF","QIRI","PFHL","KMAH","CKGD","AQSV","CFKQ","DFDQ","RYDE","QVQS","WEHE","FDKT","CEYS","WCEA","TYHF","RYSQ","QYDT","EKFN","EAMI","AKWI","YHCP","EPRD","VSWE","VEYT","SWIV","KYMM","QNCG","RYVM","KYWD","WLIV","KRLW","DHLH","VTSC","FGHK","ASFY","NEVM","GWPN","HEHI","RHPH","YATC","HIPC","HDKK","CPYV","GEFD","FFDE","PTFH","FCFP","QLYC","ENED","HFSS","CASI","HQIH","RPYK","DFGR","IPRA","KSDP","QYPI","PLCK","GWRA","RDSW","EANY","IIPQ","RENN","IVQE","HFKS","DQDL","MSTE","KNAT","HTVD","PITI","DMMM","RPFK","MNKH","KWGR","YMPF","YTPT","EHTG","LQMF","GWSE","DGWI","NLLM","KDMM","NQLN","EECG","RRMR","QTHH","PTWL","EPDA","IYDE","HERP","QIKV","HHSI","DQPN","NDTD","KQIY","DRMS","SVFW","PSHI","LAMN","PHEC","PMYV","EHHL","KWYY","QMLL","HHRL","EHQF","SGEC","REHM","SIPW","FEVM","TEMA","TWGG","GIMQ","SFQS","TIET","GHGL","LMHH","PRFM","QYFD","PSYT","IYTV","HINF","EVRM","RFFH","LDHP","SGEH","REYD","CGTY","RWIV","ESQK","KNAF","HCQD","ESQH","KSVH","HVGS","NGWG","NQML","HMET","ADMM","MISK","DWIL","CDNI","CTGK","KHVH","NYDV","YGEY","DNSI","DGAW","QHSL","SSYE","NCVC","WTYY","AWVL","CYLM","CKIT","KIQM","CLQF","PIRI","TSCH","FFGG","CPCL","MSSM","LRKD","RWVW","AEFW","GCDR","FQDR","HAVP","YSLQ","DFHM","CHGS","MAVW","DPTS","NFEQ","WGIQ","FHDV","IGTV","WQKA","NCSA","DPWG","SNPV","CANA","EHPA","PMDV","ARNP","CILV","MAVT","MQGR","DECE","SCRD","NKVR","ATKT","VGDD","SYIA","AEHG","MRLK","MRIG","CMKD","WFSF","GFRM","ADDH","TQVR","LMAT","AHFA","WTGR","FIGL","IDIH","QAWS","GYFE","AHEP","DIPN","ICGF","FRKV","GGHW","MNHY","APME","YCFV","QQTD","KQHN","WGVW","DGQD","VMFP","RMFQ","ESEP","QMNM","REVH","PVCG","RYWN","YQIF","DAEH","PVFI","VDSG","NKHA","SPHH","DHDL","PHNI","DIWR","IYHC","PYIK","LECI","ACFV","RFTQ","KHHQ","WDLT","NQTM","WFFD","CKES","IGPM","TDRY","YWLD","YMAN","ERLM","NRDA","QITC","VMFK","QIGP","SQMP","IIVV","NMWQ","FRHQ","FSGC","EKKR","ESWV","WVYF","ADPH","NPSP","SQHM","CRFR","AFYS","WKIR","QNAV","QWLC","DRQY","FFSY","DNYF","ACHP","SQIC","NTWW","WDCP","GHCC","MRAM","CKEC","RPYD","FSKP","TICS","DHRC","EKCK","LINC","FGYE","CAEY","RWFN","IVKY","DLDR","QTRG","MKKD","FFKK","FDFY","FVIF","PNTG","IFQT","IYCY","QVRW","QIIH","LPHH","YTHF","TAKK","VERP","RMFP","WKIY","EHCP","AWAW","EFKR","HMKV","SVNH","EGHA","CPIV","MQHP","RFRH","RHTR","VTAC","TSNE","GIWI","ISGY","MKSG","GFQW","TQSY","SPDH","EKNK","NSKS","TMIY","SHYE","WSQR","PHNL","IKGQ","VGDR","MSHK","DPRF","IMSN","YCQR","GYYM","QEWI","MNPP","NKKW","FFLR","HSAW","QTEQ","YHQT","KRET","KKYV","CTFT","SINA","LYAE","NAQR","YSFG","QSFE","RWKF","KLHN","IRAI","HNDT","EACW","RRPH","DSWF","ICNG","AHYL","EKKV","FFME","QLFH","EVSF","YNRS","TDPG","TWRQ","GHRN","DIMK","RFFG","QQPP","ATMQ","RHML","DKWY","LQWR","GWLK","VCGN","QFCE","DQSI","LIHN","KGPC","FYLG","VMVY","TAWF","KPYQ","PFNM","AWHI","YNIR","TVHN","RLHH","CVSY","CEKC","ECPV","MKSY","HNVP","EKNW","HFPR","HLYV","CLYD","DYYK","DMNN","KDNF","DKWT","FNQC","CRHC","THTP","PYFF","MIAC","LCIG","EYHG","FEYS","QVTF","DKHR","HKMS","NADN","LQQC","HRNY","PKDM","GAQL","HGWT","KMAW","EFNF","GKKM","NQFF","TTDY","VQKW","YWPL","LTPH","FNTI","HTDF","GPYA","CPIA","DEHQ","LVYI","AHTA","NYRF","GIQK","IRGR","IHAK","SNSF","NIQI","GLRG","NVGE","MTPV","HPHG","PHAK","FAGT","QDLH","FQQK","PCHL","DNPV","PHKF","SNAN","AADT","WENY","FRPR","DHQN","ATQT","MDYE","EYWL","RIRG","HIFP","RWAG","WNFG","IWDF","HHGH","DKWG","QHMY","AECS","TRND","CTRG","GYIF","LQYC","RCPH","FSAC","MALM","PMDE","QTTN","TIKT","VLWE","AGPF","KNSE","QVNA","AQHT","DPFM","DMYN","NYGR","LPMN","NAEA","FNKA","DEDC","HDDK","ECSE","QPPR","GHQL","HKDL","NFTV","QRPQ","NQAF","FYYY","YGWC","MESI","CTLA","MNSN","EIIW","RDPL","TDTF","AYWL","IMGL","SVTF","CHVV","WKND","RGGC","ETSK","STWR","HRDA","RMFV","EHIV","CEFV","RLST","DGCI","NHTA","HAWC","HGVI","DGYI","TAWS","WHET","DHER","QFEW","KHPP","FHLI","GGPM","HAEV","FMLV","KQNN","QIAD","YQDF","QFTF","IRNV","RQDC","VQFA","VLMP","SFNR","SAPR","TRHV","LFPW","EEAP","ADFC","QYLI","AHVR","HWRK","VKII","HECY","KRMM","NFMN","WDIN","STRD","NIKF","TKQH","GIRR","RPGW","AVDF","PDGP","HAEC","NAQV","QDGF","FPSP","PFET","CKLF","SENM","YFVD","KPHS","FTMF","NLHL","EGYH","FSYE","MIVD","WAYG","FTRV","MRAF","IMCK","TGMC","NNDD","WTDL","GTFG","HMLM","CTPY","RKWD","DPGR","QKFI","VNLW","EKHK","CQGK","CARK","ALMV","PEDI","TKHD","GVNW","NINR","NPAG","ENAR","ALYM","ITYG","KALW","GDPW","YSWN","INKW","CEVR","RPAP","RGFI","TDKP","CNDG","DYPR","EMLP","QSWN","NCNV","RTNA","EMRK","NHTY","QFYG","LCLS","CWVK","WNLM","NIGN","FEIL","DVKQ","PFDM","YIPH","DWFH","IHAS","WETS","DYDF","VHPK","FRWA","LMET","NVCL","FGCI","MSIL","DTKP","LQQS","QPRS","FNKT","YHPH","HIVF","HKCN","NEVD","PNIH","YIYI","RSYM","MMMQ","MENE","LQYF","NNRN","GNNN","EMMR","DHYS","QLFQ","RFPA","ISYE","HKKR","HCSE","ETRW","KWAW","IMMM","NIGP","EQSD","MHIG","VQQE","AGWM","DPGG","FSCF","CGYV","LWEV","LFCF","KGTH","NRDH","EYHR","NPRN","QTFD","DTRY","DDAM","QHAW","NHHP","EWED","SLKC","QPGW","NRFP","KKMP","IYIE","LWVY","GGPT","NVIC","MAIK","NKHI","PQSS","RSIK","PINT","IWKK","IEFN","RMNK","SGNC","QSYV","APVF","ICDD","KVRQ","QHGQ","NYAS","HPPA","RFRM","KARL","ENEW","YFGF","CVEF","RTCK","REGS","CKMD","DFIF","HLYK","ECSG","DSPM","PTNS","CVHI","YFNY","RFNT","KHPK","YIAL","RKME","WIVK","GFMP","WTQI","DHNE","QQEI","AFMM","RKGN","WFPN","MGCY","WYRV","MNQF","DNAG","TNIC","DNFA","PRSK","KYVD","GDFK","IHQN","IEAW","HTYL","KQKE","TYSY","VYAG","ANGN","TSCL","FSPY","AQCN","CVVM","LFHC","KFNN","WPKV","NAYM","WPFW","DYHR","VTHQ","HHCQ","FMTQ","RFIF","FQPY","RVTN","LCQF","YDAI","AHHN","TDKY","LCKN","KSDC","TEYQ","DENH","PHNS","GSRF","RRWR","MQKG","VYTC","MYWV","SWEH","YASF","HILG","EAVM","IDFE","RWHC","FHPL","NTCV","QQTP","GHLM","SHTG","VPIY","QCFG","CSRG","HHGG","MVKA","ESVY","PDYT","SFVL","NWFK","YWYN","MEME","NSQE","DWGV","PEYP","KHQI","LPRY","DYVP","KAVC","FTEE","EVFI","DRKR","RNVK","MPRA","FKFV","KMME","WITW","NHDE","WLDK","WCKN","TDIY","GSHA","THET","VETM","SDMD","NWQE","RCSS","RIHH","LAIH","GQMG","APMM","ASHT","TTMY","EREK","IINI","AEPR","KREH","HDST","SWYW","PQFG","NCMK","WDMF","PHEP","VMWT","IRIG","AWAM","FNSH","YHLR","DTFQ","TGPM","KHKV","QISI","NIRH","DPMT","DYIM","KWRG","EGYC","LPEF","ARMI","FAVQ","YCDA","AYMA","ATFS","NALF","PKNR","DFNR","NHDF","RDTC","YGHL","QDDM","KFHD","MDRT","AAHN","GWFT","CIGE","HNMH","FCRN","CTRQ","TFMG","QFAG","KDHA","EDEW","WREH","RQGS","PVPH","RLMR","EWQL","SWFW","RDRV","CCFK","QCAM","KSCS","VNQM","RLHL","GWYD","QRVS","KAWT","YSQQ","QTNQ","EKEP","ESMY","FVSV","WHLH","LFTL","HYIC","SHED","NMNR","CIIC","CGME","CAIC","NQDL","WIVG","EEPT","LQDP","GVQE","TDHD","FYIL","NAHE","RYFM","ESYH","SWNY","KQWE","QISE","VSPN","ENKA","LEVW","SRPR","RDVQ","IIMD","MVGK","GDYS","IIHV","EMSD","HNII","KEAG","KHNK","TVIP","DVEE","LTAC","RVYS","KCEL","DIQV","CAEL","HRDK","NWEC","CKKV","DLPH","PTFL","WAQA","NRAR","KVQV","IACD","AWFL","IHHA","NTAV","ACNV","DQIT","RNTW","NDRI","MAGK","RDLP","GIVY","QKDA","LYAQ","IANT","IQVG","DFGV","AEYT","PFLA","CSKL","HELI","MIRQ","MIRG","LGTS","EDEQ","DPRS","ATTN","IVNM","YPTG","HFRN","ILFD","KSYD","AKVG","PEYR","CAEH","NVNG","HRIG","TNRL","QEMF","NESQ","EIMT","HDVG","EEMD","QRKI","QLLF","CLER","EGYK","EDTI","ASKN","KFPH","DQQP","EFGY","QYLN","GDDE","CVKR","KEYR","KCLG","WPSK","KTSR","YVFV","TSKR","LHRG","DFHY","KPCA","LHIG","VAFD","HRVV","HMFT","RQQQ","INLY","ASTS","ERAN","RANP","ALGW","AQDV","IAIC","TCCE","RCHE","QQMA","DRGT","ENEM","KHPQ","QQQS","PISN","IVCK","DPPH","SNAF","PAHS","DLMN","ESKN","NVNH","AGHE","QSEM","GPSP","ALCE","LEWT","EYFR","EADF","KNFS","LPHS","RNAE","YWLP","GTKE","KAPP","CDVG","CISA","FSHA","KDFG","RTFL","SKKQ","AIYW","ASPV","NMIA","VVPM","LKRD","LNRW","NEYV","DVES","AHDL","QKLF","VYNW","CSFD","ECTS","AIKW","KQGG","IVEQ","RRIC","QYRG","EINN","YNVL","DFIE","MAYN","FQSS","SMSP","SPCV","SLMG","ACRA","DRIQ","EEKG","FGCG","LNRE","ENSF","EASH","PEFP","DTKS","INHG","CKYS","AFVG","KGAN","PIGY","VHKK","KGCV","FITR","LRVH","AVGM","STIG","MSEE","AGEF","RVTK","GENS","EIHP","SIEP","FALY","RQES","DPQK","FETV","ITLV","VPRI","NDFS","RSPS","NKAR","FLQA","DLYR","SEEA","LIII","FHQE","EPTP","AKDE","IIFF","RNAY","DISY","DMIR","IHRF","SWPA","QNVK","PCTP","VSSK","SELF","AYGN","QGEE","KKPG","DTKF","YIQN","CSRP","EVES","QNIE","GDMA","PEFQ","AWAL","WLKQ","CVVR","TTNF","EDAV","DTVW","ITEP","RTSD","FCKS","RGGH","RADV","APRN","KQAW","WQDV","ANPM","GFTR","KERR","CIGQ","VGYY","MKHL","YEEH","PTLF","HTDG","LRFA","CFDN","YDTY","FMGN","YALW","DDNP","NSMR","MKNL","RDER","RTGD","LDMN","MQKH","EYRN","NQIE","LPKM","ETRY","PRNL","HDLG","TIFK","KMTR","NEFE","LFLY","NSGG","KRFS","RIEK","GVAC","HKKL","LRGH","LGMG","DFYT","AMVT","AAEW","ADQQ","MAIS","KESY","QLEV","KEQT","FCKT","SCSR","MVVL","DWDK","IQGY","QFKG","DFQT","IQRE","MRVQ","TKFS","LEQG","MPRL","GKEH","PIYT","GQNF","QVSR","KGPL","RYQQ","FQGA","QKKE","LHEE","ENNW","EPYP","AQTL","DANV","FSDY","KVAF","MPKV","ASFA","AMGR","YRPK","NRFN","RTRL","YWKA","LCQR","TANK","TAVM","VMAL","QPPT","RNPR","GTFP","PGKK","LVMM","HKKK","FLDV","AIEN","YNLF","SWKT","EATE","AMYD","EMTG","LGRV","SKSN","YIGP","HATQ","KRHY","SGTT","DREP","MVKS","IFPA","RLKG","VRHY","TDNK","NQLM","TDYR","PDSA","RDKF","DKMD","LRPD","CGQG","QGKP","QATP","QRPK","HSIS","ENEY","PNKG","YEVQ","MRPG","NSGP","ADIE","FRSQ","MMGL","YLYS","WSAE","ESVG","IPNT","PMLN","RYGV","GMLK","LGRC","RKGY","QHDF","TIGD","YQLG","DVDN","FRWG","RGRW","LQSH","ITET","KIIY","WSLD","RPCF","GADH","VVYF","AANH","NYYP","KLCQ","TVGI","PPAV","KASM","NLFP","SYNV","RKNI","FTLT","WIMH","DGTH","IWIN","KFYS","NYDK","MEDL","GCEY","LKWS","RGIN","EDRY","HLQS","DFNH","MGRR","WDLR","DWQS","NPNW","TANQ","MNIT","AATW","TRSY","IHKE","RDWL","NDMI","KIIN","GGVH","NFKK","NQYG","DPVV","MARR","VHVQ","LAHG","RPKA","YQST","DQAS","MMLG","RRLM","VKWA","AITP","VCAA","RVIF","IAMG","GCDN","EYLH","SRAQ","ATYY","FDTT","GVEM","PFRT","LLEW","LCPK","EPVF","EGAI","WRLS","IRCH","QPTT","SKAH","RATQ","EWIT","LPPQ","HRDM","EFTF","QGKK","SRWG","WVKV","LAPM","PRNR","RVMQ","QCHN","GHDA","MKKN","QVAM","FPKV","LFSN","VHTA","LTAY","SMTV","IGCS","IGIS","SIAY","YTTD","TIVE","QSMG","AMRT","AEKH","PSVT","KFFN","QERY","GVGT","AAPP","HLYT","DHCL","IWNS","CYNC","KFTP","EHAD","GSDH","MLET","FGLE","PYEK","INTH","TFRV","AKYN","ILRK","IPVV","RMLM","RYQP","DAHD","YSTF","GIRS","PYPL","GAHK","SHPE","RTDA","NHAE","NRRS","SSRV","GSAE","FPHN","DHTF","HFVT","RTID","WERY","PDGI","PHLH","DSAY","LNTI","INVG","DKIS","DWNG","EVKP","GFLN","AETS","FKEI","ARKC","QDEE","HLEK","EIEG","KNQA","FVGR","STAW","NPGD","MLVH","RFRP","GGDQ","VHRD","TMVF","TAFA","WKPG","IFDD","TLIR","VMQY","DYSQ","DCEA","RNTT","EIEN","TQSK","AMMA","YAFY","LSPC","TIGY","NMLV","FFSP","VCGI","MAFS","RQAF","LQPP","KRTK","VYIT","HFQG","AIYF","TNFY","REKF","GHIA","VMNR","YGTL","NHRI","ISTT","LHNH","HRSE","VVQS","VGFN","ESIG","TPIY","KRWN","DFPV","FLND","SDQG","LEGH","DCAK","NKVG","NPLE","EKRM","DEYM","DNIY","DWGI","KRYQ","RMVL","AYRH","SFNE","WKKV","AQLV","NINN","MGRH","ENHP","RKFH","HGLA","AMSH","TDPL","MESM","HISE","QQMT","RVQL","ASQY","GWAH","DKKH","DAGH","DVIN","RFTK","SIRT","NKVS","HENF","LQVP","MIKR","DHIV","LPIV","LQKM","AWHP","KGGI","WTIY","MDVA","AQQY","FTED","LHIT","RNVD","HEPF","DMLR","RYFG","QHIV","LHRV","NDLN","LTHM","GPAI","AMAH","PVQA","MPAG","YQIL","YQPG","GCNV","DKDR","TREA","SLFH","NAGH","SAYR","QKYK","SDWR","MILR","IAFF","PFYR","WEDM","NGST","RIPD","NANK","GLVC","AGHT","AMIE","HPHR","TFFC","NGNN","EYAP","GNET","EFAP","EEKN","YGDN","MDPM","IGNC","PKYN","PDYS","MDVD","GYFP","RKYQ","GHIS","NYEG","PPTT","FKWD","HAIL","ITHS","VLKN","DFRQ","FGMN","ERGM","IENL","RFAC","RDTQ","GTML","QERR","EFFH","NPNP","QDCT","YKTG","RDMK","SIER","EYTL","PHGS","LPPY","QTYG","FEKQ","FTRL","FEYA","ANFG","RPFR","KMVE","HTSF","RPRW","TIPS","LDVR","NPCK","PYRQ","ATFY","SYFF","RLPQ","FGIW","HGAR","MLDN","NQGG","PKKR","HALD","MNSA","CIVL","KYDR","EPKG","EEPV","GEAD","EHGQ","NSKK","NYGD","DMEI","PFLF","SAHE","CEDA","LKSF","GQQA","TYIA","SEGR","GHTA","DFGT","FYAS","EYTV","KMEG","SGCR","PVNS","LGWH","NNNY","KNPP","AELW","EKRY","AIVP","NRWL","CFDS","ETDQ","NSIF","KGLR","MSSG","RDFE","FPDS","MLVG","MNGT","NWKK","HGEV","FRVA","MQEQ","GRIE","CKEP","VLFF","YLIY","RPMN","MPSY","RFYG","KEHI","GACS","KDYG","RFGG","GNNK","AGRM","RWAA","FMAQ","DYVV","GEWV","NLTA","ISYK","DMGY","DGLC","NPQW","ALDS","SVLY","GHLR","RKLS","HLVM","QTQS","WEEI","FCTS","HTER","ISMD","TLAV","HEES","LHFG","AVTS","HKPV","STPR","NNLI","IQRK","RADH","FDDK","EGWT","KEDV","TIEG","TCAF","HLGN","ERMP","ENSD","KFID","SPGN","LPKF","MARD","PDNL","IRPG","YQGI","EDVR","QMHL","WNTQ","LKPM","QKRE","TVWY","TNAV","ALFY","LWLK","RLDN","NPVP","EIAP","LHIR","HLYS","TMLK","LRSQ","WGEK","VFPH","ENCP","RAHP","VRPE","WTPE","LSDH","EHSF","DDKK","PITH","PKIG","QTEK","SDPG","HLRL","AEDM","RDSI","YLSQ","HKLE","PVRG","KLGN","PPAH","NDKF","ILTP","SRST","KGHP","VKMH","APVI","SKFK","DLDY","EHAN","VFEQ","DTFI","IPVT","KKRL","STIE","ECSK","PGSN","PTKL","SHQG","SQFE","KLQD","FEEM","VAIL","FLHR","TLNS","ENDG","QPFT","YIKR","EVFV","GSNR","PLQD","YSQC","NFQI","VAVC","GGYK","NYGN","WLSD","FGGR","ESKF","GCKV","QAKD","DQVV","GQGP","VFAH","VQIR","RANE","NRIR","ISYY","AHGD","KHNA","ATHT","SYAV","VKTT","LDEC","CESC","SKEH","IMGG","NTSV","DKKK","AMVD","CRDT","TPYC","KKTF","HRYD","EFTI","TGRI","FVHL","QRTV","IQTS","IRHR","GHTT","RYEL","QVKD","WLVD","RVQH","ELCV","CIFD","DIPL","MTLL","TPGH","SKQN","FTIK","KRYI","KSDW","APNM","KYGK","DPDF","YNKE","EQIY","MVLQ","RICL","EYSG","ISYD","SKGR","YHTP","CPIT","KFQD","TIEQ","WLCA","APGC","FKQE","WPGS","VEST","RFRK","FKQS","RGNY","VNHK","WRDL","IKNT","NVQS","CCVW","NDHL","HLES","VIGQ","RAGM","WLGG","YELQ","YQKM","ELFY","IKNM","QYEK","CTGY","RLVM","KDRT","GKRG","SHFS","GDPY","KYQA","NTYA","ATYH","IYKK","GMPY","INNK","DNCV","VKGE","DFFE","DDRL","TLPG","LGSE","MRFA","CALH","TLDH","VQTK","QEEF","PKPL","RHQP","TRKN","SHID","RIGF","CEIN","TNSL","RNAS","PPPH","TNPK","RTTN","FQGQ","YPLQ","ILKW","IFCT","GPGV","TITK","PQPE","SITT","QKMK","HNAQ","IYAP","SVAE","PGIL","VMLA","ERDE","ATQL","TLLY","RAMQ","NGII","LDMR","RSVG","FLHI","VEKQ","VYRA","GRGL","LKYE","NGRA","FSIN","SSNA","TGHL","TKAP","NYDY","QDIE","FTPT","PSDY","YLQQ","IINP","DNRE","KNEG","RKKV","ISVD","EVRQ","MFAD","EAYD","TDDR","IQDK","IRRI","NSMA","SPET","YGKF","VGDA","VVHG","FGAL","QFEL","STQT","PIVD","TSSE","QFND","VGMG","RFRL","GPLQ","PNSV","ALYA","KRLD","LANR","PRAD","PGKD","QKDR","GIFS","SQLR","GGNK","FSRS","RMSE","KVSK","LEVS","AVRY","CSLA","FLPR","QIDD","QLQT","NFGI","QVEG","GGFK","IDVR","NAGY","IKKT","ISTI","IMSK","PVSV","DEKN","FFAG","TNYK","AYNA","KASP","RFVE","KTRT","AGKR","AFIK","ISRE","GAVT","GSRT","QKRY","ASGY","LRYS","RHLD","SVEG","NRSG","NFGG","QNDI","IKII","PIEE","KPIM","EDYY","CSTG","LTKL","LHPT","LTTY","GIFL","AFGA","LKDM","KTSS","LKML","CLLN","GSWV","LSAE","DTVA","AAWT","GQIF","GKGA","VVAN","HQIT","VQGT","DECK","KVQF","GTQM","PFYL","RVDP","GSIF","QNYQ","SLVH","EVKQ","NARV","ESNH","LIIK","DDSK","NGPK","DLKL","NPLT","QGGE","RPFT","EELM","ELFQ","DEPV","NNRE","WLKT","TVVG","QSEV","IPSR","TRMF","REYR","FADT","SNFG","GSRI","SYIL","DNGL","KTNW","RNGL","IVEF","VICT","FHSL","LPDV","AGED","HTDL","LKMI","QQVI","DKIP","GETR","RLLY","SQYE","AGPK","PKNG","GAWT","RGDF","IKDY","PQGD","IGEM","SVDS","PNVD","GAFK","SQEW","DNNI","NVVK","KVTP","NRNF","IELS","ALKY","GNYK","PVAL","AWNT","EDDE","LKLY","LTHG","VSFP","MSSN","NTTP","SGLP","EEYQ","DSPI","YIFK","ENFR","MVNS","KIRT","LRQI","AVFV","NVLE","ECAK","RWDP","KPDY","LTLE","YKHI","YSLS","NSDL","LRII","TAFH","DMAI","EPAK","LTSA","RQGI","SPTG","DMFK","IEKQ","LQQG","RAYG","WNLE","ERFT","KKKN","RHDL","QFLL","GDFN","PSWR","DIKL","SLGT","VPEN","PTSY","REVY","EQVY","NDII","RRAS","AAFH","GRLC","GADP","VYSA","KIFK","VAYV","PEGE","ISKD","YLTR","PEKS","MLSL","NRML","DWRA","GDDY","WLSL","LPGN","LYHE","TKVI","KILY","PDVY","NKFI","LIHE","KVSV","SCAA","RKPA","CKQG","INLP","PQTV","AEEH","GGVV","VKHK","CLAP","ETEL","YLSG","YYTL","HILH","IVQM","KVTF","ILQT","DEVR","HVIV","GKQV","NGGF","DKKN","MAEK","TPQG","TEVF","LRKT","DISD","NYRG","KQGK","STFN","QGKR","YEDQ","DSLS","RERQ","AQGH","EMKE","EVPK","SQQQ","LLPN","EEKQ","ITGD","VNRL","LDGW","VIIS","LPHR","DKNE","DLMK","AGIS","FHEA","FYGG","CSKY","TSSK","PWTS","FSHE","HLRA","IYER","NVEK","VGQL","STHG","EMMG","RRKG","VKQA","CQLA","AQDN","IGFG","HLKN","EIKG","YGRV","GCTC","KSAR","VIPG","SIDS","IQPE","LNND","NEEV","DKAN","RAVI","GERS","SQIT","YSTN","AHKE","ARKG","NEGS","KLPI","YLTS","TTGL","HGVL","GMES","NRGI","SQRP","NGAE","FKAK","ITEQ","SWRV","DMSL","VSKD","YFLR","EQRP","EADP","KAIQ","FYQV","ACPE","IISG","PSFP","DSED","RIFL","VNYL","TRER","IKND","AQAN","EAFI","DHIA","VQQF","MKLG","PNSP","LGDE","KKIM","QGIG","CPFS","ENAW","RKYL","KTAE","AMAL","ALHE","SEVI","GHGD","KFIN","QEEA","CLYG","FDKR","TKDA","NLPT","AWRN","YNLA","PPRA","TFEI","NDDG","VSST","AYTG","LWRV","FMSK","IYTN","AEYS","AAPM","GMAR","IAYN","RSLR","LSFS","LDQA","GDSF","EYSD","SPTS","VWLH","NVNS","ELHL","QDIK","VIDF","NDVR","WEFE","EGRF","NKYD","HPER","NAIT","KLTA","QLRY","HLLT","RESY","YIST","EPPS","HVYL","EYSA","RTAF","AKRV","QVPV","AIET","IAGI","NIGV","TGLN","CADF","FTNT","VDMS","DYVI","ESTK","RMGD","FRAG","GLGH","GHPR","DFLT","EFEL","QQAS","LKMA","QHLT","EKQG","INLK","LTTN","ADWR","PIEV","IAQV","RSKT","PENE","PGEG","VAID","VETF","FVRI","ALND","LNSK","KPGE","AFMK","MSAK","HDIM","VRYT","SIDE","KNST","AAWG","RSQI","FSVE","RSRR","CGVL","ITQG","LKQM","KVHT","PIIF","IYDD","ESQI","QDKS","NSIG","WVKQ","HTGG","MAQD","QKRF","NAMV","NLPI","EHKN","RQIY","SRFI","NGYD","NYEA","MDGN","HQLE","VMKG","QNFA","RART","TETK","QFVV","KKTE","QSSL","SGFT","RKIK","GPLM","MALE","KAKI","SRER","SSAR","ELMV","YSSM","HGYK","GLPC","MDQA","GFIT","DYER","WLDE","TNEL","SQTE","APLI","QLHG","IAPS","KFTL","RIQR","PPVG","LAWS","DPFA","DHAR","KDDG","TMAM","IKVY","STKA","GFIF","DEGV","EDFM","SAIL","RRGV","HSFL","AMKK","IPRN","SFKP","GYGH","AFKV","NGFM","NGVA","FTNL","AYES","ERVG","GGQK","QASG","GLMV","QVTV","TSSD","VFGQ","DAPI","AKAP","AGSK","GNEY","TLQK","GFNK","DSKI","QRFE","AMSQ","WDSL","MTSG","LESR","LSWT","GFLQ","GHTL","RASL","AFYT","VPRP","RDIM","YTSR","RNLP","GVHE","QESL","ALHG","AHLY","IVYN","FFEE","ENLI","HPEV","GDSY","AEYL","ENCL","FSNV","TDRG","RTFS","GIET","KPVY","ESDD","RRTN","GHNV","VGRT","RGKV","PPPA","MGDA","KSTS","TQNE","GSYY","AMFA","DGYY","LTIL","MSDS","PLQV","NGDR","KFVD","YLVD","KEIN","HGEP","KISP","SHIK","HQPQ","SGEG","ERGA","IDDD","AIMV","CKAC","AFLQ","LYID","QVAR","GLVW","SDQY","EVTY","LTSM","KTSI","DNAV","KEVF","QKND","KQIR","YQPE","KKRF","TGRD","MLGA","CRII","TLAF","ASII","FTDA","VPVK","DVYQ","LLHH","PPIK","VKYY","RMVV","ISRR","KIFL","ERLH","DTIG","CGIT","FNFV","FGQV","EAEI","HNKL","NGQV","NPFY","NRTS","SDRL","PFYH","GFSR","DVYN","GAFA","QIVT","ELCG","GACP","AIEG","RHSI","QALS","IEAD","QLWQ","IGVH","GWVK","FLNG","TIDA","KHLA","GRLY","TMTS","LHTV","LSIN","KADE","YARV","VDVY","TRTA","KPLR","ILNE","YPRS","SGRV","NEVK","PVSD","EGDD","EHSQ","DIEQ","MNAR","EKFL","KFRP","QIYG","ECRA","TETD","EKVY","ADVY","YRTA","ELWE","ALQQ","SRSQ","LGIY","YSGQ","AKFL","EQEY","LPNI","RLCE","NKLN","DYVS","KVVG","RDED","ASEE","DGFR","YNSN","NSVE","RARY","ESSD","LLYA","EWLS","IRSL","ISLR","RHKV","VRVT","TEAP","DIIL","TVML","NQEE","KIEM","QDLF","DRGD","QQAT","NVRG","GYLN","VGTF","KFSL","PSRA","KITF","KNHK","NKDI","FVER","EVER","SRQL","NVSQ","TTAK","TFNW","AGYR","GTEV","ARSM","INPK","AIEK","IVSE","QESV","MDDF","NYKK","HLGV","NPES","VTGQ","EFDA","FEAT","FGDE","FQFD","IGSV","PIAT","TLFL","ESCE","NAIK","GRGE","DPRQ","QRSL","ADAW","GRAP","YTLF","ISGR","DIAK","WISK","DFKK","NNMG","AIPK","KVIF","TPKY","LFKV","PSNG","HDPR","AELF","DDEN","QPLA","NGHA","QVDV","VQGK","PTAG","LSPP","NNVI","QANE","KYRN","DANN","VKID","ASEK","NVIE","LNTT","AVID","TNAA","KIHR","SPKV","EKSD","PEGY","YGND","KTTT","ADDS","ILPI","PTKK","NEKL","AGDG","ISNA","MGIG","GFNE","MKKG","SGWL","TPKK","QTIS","VIDP","VVEY","RVDY","ISLF","GSCL","KPLD","NNIA","YGGG","LHSE","HLIC","SKFF","EAAT","KHKG","EVHN","YKPY","LEFA","WLSG","GWIA","RATV","ARSG","PGGI","FFQL","MGIP","VDKK","DQQL","NGQE","AEGF","AKSW","MTPT","IGSQ","AHLR","YDEN","IRTA","ITRR","FYAD","QLND","VPRN","AWPF","QYFS","WFQN","EGDY","FRYA","NQSA","TFVA","PKGD","ASRY","NLYY","FEGK","LIEY","LSMG","QYSP","RYPA","EKFP","PRDE","EGGV","NDEG","NFLS","VTDI","YINN","VIQR","DMLA","IVKP","DMEG","GDET","AKLC","KLYK","VDTQ","TLML","WREL","RTTR","EGLQ","ESVN","TGEM","FELR","DLKG","DIKR","GRIK","TGIE","FITN","ETKH","PSSI","ALWD","GRES","DRLT","KRVS","DLTN","KMAE","CGST","YYRT","HQRS","NANP","SQEI","ITKR","RFLY","YEIK","DFEL","VQAQ","QRAN","RYVT","DENL","KEAP","EPGT","VTKM","VGEN","QHPS","GGPN","MVRD","SRYK","CRPE","ETDS","RTQG","DSAW","NFNI","PNSQ","ARYN","QIVL","GPRA","CGAS","GQEK","NIAI","TLIK","ARGE","ILTL","LDHH","LPIT","KPPV","NEYE","FVLF","YLEP","DVLA","VQVI","TFND","SVNV","FEQA","AYDP","DTRG","GNHK","SVAK","LGAN","QRTL","TCTA","NCSG","DAKG","RGSD","VITT","ADMR","GGNV","INPS","ELGM","ADEE","RRGR","ITGN","PKSG","APSA","EPAS","KGYQ","QKQE","GKCS","KDVC","EAAS","TPEK","QVFQ","DAFI","IQLG","RDRL","DKKS","VPFS","DFRK","LTET","HLDN","NETK","QAGY","YSEE","LLFL","IPFF","ASEW","TAQN","VANS","AKRR","ELPR","FQLF","EEGM","LYSG","PFAA","DTVT","ANPI","RLIQ","PVPT","PDVS","REAM","NLGF","QMIR","FLVY","KQTI","AILW","IKDE","ITIV","VEVV","LQPL","HLML","AEML","GFID","IFAL","VNAL","ETTY","VDLR","NTTG","TDNF","ARDS","FKRI","FKVK","YDPN","SFDE","GQLL","LSEF","RRIR","NAEE","EDGD","FLLT","NARL","VHGE","EVAF","LPQI","QRNG","IDRD","DGNV","QAFS","KDHP","KIIL","YRGA","MSNL","LSLM","IRNE","GHKL","IRAE","LKNE","LVLR","KERQ","DYVR","HELS","ATDV","QIDL","RESL","GGSA","FHAK","IMEK","ESIT","KFIG","GKLQ","ASRA","IFNF","LSSS","VQMA","PNTL","FNAL","MIVA","KVSP","VVIL","VADT","QSGK","NSTT","LRED","GVRR","KNQI","LIIL","TQIA","LDAS","NVGP","NKAI","FQLA","DDDI","DLFS","ILSQ","DFEN","SGIF","VGPS","GQTA","IPKS","AGDS","ERIY","EDEK","NLRL","APGE","NKII","SNDA","AEKR","FEAL","ATKV","ASVF","QIAE","YFFS","SQAT","ARVI","VTVI","RAED","LIRE","KDFP","TGGL","DDYP","DVLF","SFIR","AGQY","GNRR","QLTL","VAMG","HGVT","NVSD","IKQK","ASVT","DVFD","DKLT","DSPD","EKKI","LSEQ","NRYG","QIIK","PNPV","GSER","DEIY","LKTV","LGQQ","NIDS","AYAL","SLCV","FCGA","FETG","NPGN","GVYP","VPIS","IFKR","DLNG","LHIS","GAQV","SDNR","LYQL","GLPS","GGQP","GSIS","DIIM","KEAY","ERTR","DDPE","GRDH","KNTI","LNVA","YKEI","EAFG","AQNL","GEQI","GQKL","KDAQ","PADW","DNLY","ERID","EVKA","NGKE","RILY","ATSD","KRTV","QLSG","QRGT","RTFN","MVDG","YPDG","SKSE","LLFN","GDQA","VVGF","CVAD","AGEW","YDDI","KQYE","ELPM","TAIS","LTIK","VRRI","PGIV","YPYD","HPGD","DEGE","QRRG","EETA","GYVY","AAAM","SHNP","DGVT","GGLQ","RRDL","NYSD","PVVE","PGGD","IELV","VRFI","KNEP","ADEQ","NNPE","VVTE","QLTN","VSIV","ELMR","REIQ","DEAD","FGFV","RQLG","GALF","CLAE","VGND","LPMV","VVGV","NSSQ","SRSV","SLRP","AEEY","FKEE","DTPT","VNKS","EEYS","SYLS","GYGV","FALP","HAGD","RNLV","DQSG","KDTT","GGIH","HHQL","LCRK","GGKE","LVGT","FTVL","ETLN","NGGY","RNAT","KGGR","TEND","AALN","LDPG","AVKS","NSGS","AGIN","IGKV","VFQN","DRRS","VRVR","GDVN","KSVI","RMRR","TREV","VFRR","QGIV","TADS","NELT","KQLE","IARD","KRAD","PLAR","NELK","ESPE","AQGF","DRLQ","ALTR","ISEF","DQDV","YLLR","GKSP","AEVK","PKVV","TASE","DAGS","PLHL","DKGR","ERRI","MRKE","ADKI","TRYA","RVVN","ASAR","SSHN","ALHP","KSGF","IREF","QHGV","LEKH","PPAA","TEDS","KTQK","IDGI","DVIF","DAVE","LQIS","AIFE","RRFV","EQLS","MICG","LKNF","LGDR","FSGK","SLDM","LDGT","LVNH","DEEF","EEIW","RLIL","MLVQ","DFVV","FRAR","KAAQ","MGTL","KENI","QSLG","FPEP","DRPD","TPVP","RSPL","AYLD","TDIE","DSQR","FKDP","KVDA","GIKD","PFTM","TITR","FPAF","RPRA","GRIT","EGMD","TMLS","PGFR","ILVA","ASTF","RSVA","EKDE","LSRP","GLIF","DRGN","SLSI","DNRP","NLVF","GLIY","LVNQ","YDLV","KEWY","FLEQ","FKNL","RLKR","AKMR","HKLV","FTKR","GAEV","LRLT","APVA","TAKY","TKVG","LGIA","AWSH","NDLV","AYVT","KLRK","NVFK","GIAI","RIAL","LQGA","GDAT","SVVS","DRPF","AVYN","SQSS","YLSV","DQGL","ESFP","PKEP","SVGD","LIPK","TAAN","NVNA","LFAN","ADDL","RVFA","TRVT","INGP","DGVQ","KGIV","KEEQ","TQLV","VTRG","ARTP","RSKE","TKTA","DSKN","ELIR","KINV","KPYA","RLEY","GVQT","QAMK","TLYT","PGLY","LNDP","TRAE","GFVD","YFLG","IRVG","KSEV","FDKL","SAAN","LDIK","ERPQ","DGRR","ELDS","VTLE","HMLQ","ITLE","ATQV","GEYA","GARI","CDSC","HFIG","QISS","EPIP","LPIP","GRKL","ELYL","AAVH","SPVL","TFRS","TKTS","REQQ","APAE","VERE","ELME","LGND","IQFL","NTDG","LQKT","GILR","AISN","KPGV","VIEF","LMPT","DADK","DSRV","DEAK","KYDE","AVER","PVPE","LLDT","LTPD","PDYV","QAFE","NLKK","RTAR","LSAC","TNAP","RLRK","LANM","TITA","LERC","MDDE","RAET","KVIN","KGVD","NVAE","QQSV","EFLQ","LQSN","KRAA","IEED","KDGY","VPAV","QGQI","LEIV","GFAF","VESF","IGLV","LPGA","QRKL","EGKG","CSSS","RNSQ","SDLV","STGV","VPSK","KLAP","ISDY","EAIH","APLF","GMGA","PDAL","SSNP","LQSM","RTNE","DSYQ","VVSA","DLYA","GATS","LQTR","QDLA","IGVP","DAFR","AEII","SYAT","YINA","TLTT","ARHD","QAYA","LIGR","DSVN","VEIK","KQEE","DISL","LLDH","KVHG","QPIP","EGNK","MRDV","MTAA","NSQL","ITPQ","NGTT","EDGK","HASS","DIEA","AFDK","INLN","RSTG","HKGT","KTYP","GGQG","PISG","VNLT","FEAQ","YGQP","RKPT","SVER","LEVT","NNRV","DLQN","PDPK","ASER","VYSF","ERGD","DEAQ","ASQQ","LHLL","NTND","FVFA","LRKM","APTP","LPRS","YLSA","FSTL","NKNE","EVLP","PAFD","SRAL","IYLN","NAIP","NNII","TQGV","MSEN","VNKL","TADM","NAIS","QARL","YLSR","TAID","RYKG","RTLS","GEKG","ENGG","AQTF","RLII","AAYA","GWYA","KRYL","HSQG","LQSY","FEVI","FKDC","KKVR","RRYY","AQDT","TLPM","RVRE","LFEE","TTAG","DLTT","ILQP","SAPK","LSIV","VTVE","RKGK","AIIS","SPDR","QGTP","DSKT","QDVE","VLPL","GLDP","EYIR","GNVK","TTSG","IIND","GSFV","DFIQ","FGVG","NLDI","FLET","FPDY","VNCT","LSGV","KPGD","RAPT","TRAQ","KYKE","EDDF","IHGL","NPQS","SHTA","LPDP","RAQT","SNAL","RVFL","DKKT","PFDV","VIPV","SLRV","YEAI","SRGL","YAAT","GTRG","PDYG","PPSV","VIRS","LAVN","KIRN","IEVA","RSST","LKCA","MNKA","RRTL","ETDI","TRNA","SVEQ","KTTI","SFGD","ATAY","AAKH","LIYS","NPSE","VGAR","LKFE","KGTT","EVKD","ALDN","MFSK","QELR","ISEI","RVLI","YVFD","TEFG","LRRK","LNPE","LEVY","ATEI","IQRT","FVGS","ENDP","GYQP","LAPS","DVTA","HLIR","TPIP","NYDE","RPLK","SVFD","DAFA","LDHV","DDVE","QPAD","LNRG","KEET","LVVG","AEDY","KIND","RDEK","FRNL","FAGS","TFTF","GEEK","LDKP","EENG","EEQV","QRAE","GLNF","EGEG","VSYG","WDTA","KDEL","RDEG","EFGL","ERAS","KGME","MASK","ILPD","PIVE","KRLT","ETAK","KAPT","SHDL","KEPI","NEIF","KISM","EAMK","LPEN","IESD","ADTI","RIIL","YSGL","NSSR","GLEK","IPVL","ELNE","ARRM","TQEE","ADTF","AIQN","QKAI","IAVG","YVRV","SKRY","AQIQ","NDQL","TYEE","TVGT","AGRS","DLRR","EYQK","FRQL","QKSN","KNGL","QSRI","LTPT","IDPD","MALV","TGIN","RVLT","KLRG","RVVS","VAKI","DLCI","NKTG","DNEG","INKR","ARKA","IGKD","FSQE","AGEY","NTDT","TDKI","LAFI","NASG","PLQT","RDSK","LKLP","TANR","CGNS","GGVN","INSR","NENL","ACTG","GLKP","VLEM","QDQP","GQAM","SKLP","NGEQ","GLTI","GLNK","LSPS","GSDG","VSER","GALP","KPVE","AVEV","RRRK","QFDL","ISTK","ASKE","TVRV","SLIR","MVVG","VAKN","GQVK","EIAI","HQLL","SNIL","PGKI","ARDD","AWLL","PRVE","GAYP","DNTP","EVDT","DLFI","NRQE","RINE","GTIG","AIIK","DQIS","FGNI","EDPK","RFVD","KLDR","IGNV","QDER","NSTY","DGLQ","DLPR","LQSS","AEQK","RGAD","KRVG","IIDK","VYGS","SDGE","TRGV","GRLG","ITRV","DFPE","KAYL","RDFG","EIGL","APGR","TDGK","LNNP","YALK","EYVA","LSVD","RGYI","VGFK","STKT","TCAG","NIRT","RVDT","KGID","PKAS","AAMV","QSDI","SSIY","ESDF","EFIL","AMVI","TIAK","MGKG","IGGI","EQQV","TRII","RPST","TVTT","EAYT","GKNQ","KNAS","QNFV","TLSS","RASI","RDLF","LSPK","DFDE","MTDN","QVPT","GAYG","ATNA","VASQ","QLIT","NQEL","LEKD","NLNI","PKLS","NDVY","EGGL","ITLG","GIHI","PITL","EDTF","VPKT","LVLF","KMLK","YALL","DVAQ","IRQG","LALP","ESEG","MPVL","HQLS","DAAG","GLPK","CPDA","KDNS","KNVD","ITVP","FLLV","EENV","NDID","VGKE","TSFK","SNPI","AYFS","LAQS","VMLP","KLDG","TADH","TKGD","DKPQ","RRRI","LHPQ","VLNV","DDSR","ERFE","SKEN","GGTP","AFPL","KYKP","DTTP","HERL","AYDR","PDEY","GVTQ","NASD","MEIL","ELQN","FGRL","VIRL","NARP","VSTS","IPQE","EDRD","AHSL","EGKS","PPAS","LNKI","QVGQ","DVND","DRFA","IFTK","TPTA","LSAI","RLNL","SKPI","LRVF","IKVI","KFEA","AISG","AFGR","VADK","GETT","GETW","GARQ","EGKE","EVLY","PKDP","ALPY","PKKS","LKEN","EFIA","SILR","NADL","SHMV","SGAV","EFVK","TAVF","NLTL","TARF","SRFR","IVGQ","HERV","YEEV","IFQD","LLHL","QHLQ","PVRL","FSLD","AEVR","PSKE","TLSI","IENK","PGSE","TGEP","QIST","LFAH","IVRR","ATTI","EYTS","AYVP","RGVG","NEGR","QKDD","LPHV","AGSQ","LFEL","DRIE","YLDK","GAYL","QIEK","KTNR","NPPA","NTPL","PLME","SRSN","LCVA","PYWE","PATR","CGTT","PLPD","FTLV","PVLM","SSTL","SLPN","TQVA","GKPP","EVLH"]
BEST_FOUR_GRAM_RECALL_FEAT = ["SKIV","VAWL","GTQL","WADL","LAKN","SYET","TSKK","TPVE","GLWE","VKAE","KKDG","SERP","NVDG","RTPD","DSEN","DKAD","GKKP","VSDL","SSIQ","YEFL","ENEG","LVPP","DQDG","PTGV","KEMK","TVNM","DPGV","GAVF","NVLK","SLTL","HLVG","VGFL","TVCL","AVEG","GMAF","RSPV","ADVT","PSSV","SIIA","DKAK","FSGG","GGII","LRFH","TNYL","QSAI","KAKK","PKAF","PETK","GGQV","KLRH","RSSS","APGS","GTYL","LQNS","ELPD","KIGT","IATL","DLEP","KQGL","TPKT","HFDI","AAGD","IDLT","RIVD","IHAI","MATY","LDQN","IQDD","ENVK","NMLL","IKAS","SNLG","VSQS","VNRI","DAKS","YAGI","YKAA","ERKS","VKKV","VVDE","ITAV","IGLM","AGQE","LPDT","ENIY","EGSI","WEDG","PPAD","SDDF","RTVF","IILK","MVIV","TLAN","NLVP","YVDE","AHRA","NLQD","LAWL","LLQQ","RLTR","WQRP","YPVK","YKVI","VSVA","ADKQ","GEVF","LQKY","EEIV","AGDP","EFIQ","RVKG","QIRD","GSIE","ARTG","SEFK","GNRI","MGLI","DQLS","RGKI","IVDE","DDLA","LKYV","IVIP","YRQL","GVSP","SIGR","VVGW","NTLE","VIVK","VLLS","DLFL","PKKE","FGQR","DNLI","GTPF","DVFV","QEDA","LFQF","MLGN","FAKK","IKFL","GRIA","RAKI","ATNL","FSGP","MEKR","QLTF","RERF","GETK","RGVI","GMDL","SSRE","SVQD","GGEQ","IAVD","GIGL","HELV","KLAG","YQNI","ETNE","GLIE","AKRE","TPLT","LTNP","DDFR","EQLH","DYAG","NREK","ETQD","IFKN","TLSY","RQEI","TFER","PQLA","ISQE","ESVM","SRET","LDRD","MAAR","ITNT","YNLL","NSPY","NLIK","SAEV","IFIK","VGIL","TTID","EQVL","ITKI","LVNF","EILN","INTN","GTPK","EPPL","LKYF","SNVE","TLAY","PDDF","DITA","ASVN","AGIY","LRKS","ENLK","VHRL","PGGN","MMEA","LQQM","LPER","SRAV","MVFS","WRAL","VPIE","NIDV","GAPG","RHVL","AQSQ","SNNV","TSGT","SSVD","RVGR","AAHF","LRFE","KERD","NYTV","AADG","VEIS","IRFD","YIIP","SVVD","SLYY","GKFE","LAIF","YLID","SDEY","PDTL","HWLI","DVRV","NYIL","NKTE","DSVD","IFSK","KDAP","PERP","GIKK","GDLN","IKIS","GMNA","EPSA","FTAL","LEKC","VPQL","EVQD","TLQE","LYAV","GTVE","TPEN","ARTR","GRCV","LIQR","EGTQ","PDEK","EGPA","KVIT","TEKT","AVFD","VKAM","FKTT","NSIP","FTNE","GQII","VTGV","FNSD","KDVV","FRSD","RNLI","YAIE","NIIR","IAGK","NGKT","LRYA","VKEE","NHEL","DTSG","EAIK","SGPK","NNVA","ISFA","PLHI","RKGD","VPRE","AMSN","DNTL","LLYK","INLF","YLAL","GVQR","LDIN","NKVA","HPFT","FEGS","AIGG","TDGV","AFEV","LPRP","MKLD","PFDL","PVEL","DLDP","QLFG","RLQR","SFGE","DVSI","ADKP","HRGV","GEVK","KESD","RQLD","YQIE","KGFG","EIYS","RDLQ","NEEG","RKAR","DLPK","NSKE","TVDF","FLSS","LGDY","QDVQ","RSDS","DATT","PNAA","GKTI","AQPL","NRVP","QNRE","NLAV","LSQG","RLDV","ASVE","HLLG","GYVE","LEFI","GQAK","FAKP","IVAN","LSNP","TGTH","VGES","VSNG","ESAV","FNNR","RNEE","IYVN","KTKT","TKRV","TDLG","RHGQ","TAVE","EKAF","FLGF","DKGE","ITKG","TIAS","EILT","GSWT","LAVP","VYLT","PAII","TYKF","FDLT","YKGV","EFML","QLSE","IESK","SATT","VASN","VDRF","LLMS","YSVL","VILA","VAVR","LREA","TRVL","ITSG","AVIH","DENR","SVII","IIKL","HPDA","QSLL","EVFK","TSEE","SASF","ELPA","FAVV","QVDR","PSKL","RLFV","GAKA","RFAS","RDFK","LKIK","SEVE","YGFT","SNVS","AVHA","MLTQ","GETI","IAQT","IVVG","VVYD","MSAS","LRMN","VAIV","AIDN","IYIS","ETFY","YRFK","TIIK","DSEE","NSKL","APGT","AQNI","ELQS","KFVT","VGEI","TVDG","SGSC","SKRP","ITDL","VRTV","PYVL","ATNG","GNKT","GNYY","KIVT","ISYV","ASGI","IDEI","RISD","ADGK","DRGV","RIFR","RTFD","ARIR","RNAF","NFVD","DGPT","FILV","AVSN","LVMR","SVRG","TPLQ","EEYV","ILDG","VGNY","KQGF","YRDG","AMTI","TWYK","DYKL","NKKL","KSPV","IHVG","KGQI","SGFV","SAEK","QYAE","GYFK","TIFS","EPGA","GPHM","LYRF","VTPQ","KFKN","STKK","KCAE","GPEA","TCTG","EGGP","SYSS","ATFE","RAFI","YDGS","NEYS","AGAE","NAVG","GIGF","TYSV","KVVD","VLPT","ETAD","LPTE","YPDL","DLFE","DAIF","LGDS","NYLL","RSAV","QQRG","EIRI","EVEK","PRLF","QGFL","EGKR","LQGI","GQKI","MLKK","VSDY","NFAA","QKDL","LIFL","KGTI","ILTD","GIVA","ERGS","AFVR","DAIE","LSHY","NGIT","TGDT","AAVN","ITLR","IVDN","PAKV","FGTV","GIKN","PILL","KQEL","RERM","VENS","ANQL","ITVR","EKVA","YEVL","IIAG","DLMR","SVDA","LNHL","GIKI","KLNT","LRNE","PMDF","RFGF","AGKI","PNAG","PNLA","VRQK","LFNA","KISR","RIIQ","GKFL","DITV","SYVV","TGVE","TLDR","LVGS","ANDV","GIYG","QEIS","QQIA","ENGL","LAIE","FLCL","SLDA","PVKP","QDPS","RYGG","VDQT","KEER","TTTL","KNVS","TVIY","NSVL","NGTD","AAPG","KVIS","QIKP","RQVV","QLSN","EGKF","EDID","LRSF","DGND","RPGQ","INGN","GEYK","KDVR","EDVN","QAFD","GAGR","PGDV","EINK","DFRA","PFAG","FAAE","RLYA","ASDL","QGGN","MDAG","GAEA","IVLR","YWTD","MVAL","EMLQ","NYDP","GQIR","ATPT","GVEK","SVTC","PQLV","NKAY","EGHR","TKAL","DVLN","KDYP","NGQP","KQYI","HLAL","IADE","NSFA","KLME","LQRI","LFQP","REDG","RELP","LMGA","KGNL","ISKS","LGSK","DCAG","VFTG","VIRD","EPLT","PHAI","EHNL","SGTA","QLIE","GKAA","VAEG","LADK","DAEP","EPSL","GFAL","VRVG","LVKG","QEKA","RRYT","DAFG","SAGE","EYNV","DDGL","KSID","LYRQ","DDAA","PGLA","VIDH","RLQL","IRNR","VDRA","IRQT","VSRY","VETG","AVVR","ENIE","DYFN","GMQL","PGFM","ANEE","ELAC","SFDA","RDTV","VYPL","LRGP","DRET","SFEK","RSEF","QVIF","RFDE","GEYL","ERQV","YVGE","DMMG","SSGD","ITLN","ADNP","DTAK","IGKK","IPIL","YYEK","AVYG","FARF","PSDA","AIII","EDAP","SQLM","SENP","HDAT","SRVY","EADV","SIRK","GIIG","NGLY","AIDG","KKTK","FDRS","LAGI","QVRG","KASR","INRA","RIDF","GDVP","ALMA","QESG","DYKY","PLAK","RVAR","IKDN","TDIR","GDTT","IHVT","AAKE","PATP","GHIT","VGKG","LEHR","AKRG","ISEM","DTKE","GDLR","KLNE","DRGL","ILST","QAER","LRIE","PGTP","EIMA","LRVN","PPIS","TAFD","KVGV","SIED","ADNT","FAFP","SYEP","TPSS","ESLT","DVRP","ATQA"]
BEST_FOUR_GRAM_SPEC_FEAT = ["ADVA","VARR","RFLK","RLEL","EGEA","TVSQ","KDGI","GLNL","SARS","VGAI","IIKP","SPEA","LLGT","GVLN","STIA","QTRV","VAAK","VNAF","AKPE","TFES","KNLF","GYSG","ILTV","ATKG","PETS","EADE","LKAK","IQLI","KYGE","FFLT","VRRY","RVLF","EEIT","SGDV","RGPS","GSAG","IGAM","FDVA","ADGD","TESE","FLER","DSAI","LVGL","KASK","EISA","SSNL","DGDE","TSKL","VSPE","RATA","LYSA","AFGN","LSII","ADSF","LNNA","QQMG","KSGK","GIKG","LQSL","TIFD","AKQG","KTLI","ALLH","QSED","GFVV","GDNV","ATAN","AINE","NVDT","VYRP","DGIV","EPEQ","GEST","SIVR","TKKE","AITI","SKAK","DVKA","GYDG","TYGI","PTGI","PQET","PLVC","KGGV","VKVN","KLPD","AVGK","LTLH","GGLK","GNFL","RRKQ","VIQK","AKYG","AACG","ATCG","KNGT","IVRT","SSTE","TLGA","DGDI","RVIN","AYDL","GGDL","EAGA","VLDP","PSSS","YLNE","GFNI","SCLV","LVFE","PGAL","YSTK","KKLY","SSNN","EAIR","AGTL","SAPQ","ENAA","LGYS","GDFS","QQAA","LLDF","NGVN","FNFS","VILV","RKFL","TIKA","SGRT","LGSS","VIAE","KVDL","GGKD","SVYA","RTIS","TGKK","VENA","AGEE","KAEV","AMGL","LKGH","ENLG","SSEF","SGGR","TLYG","QLNL","AFDF","VMLV","NGIY","DLVI","VFGP","AILS","RLVP","HGIA","TGSN","YFKG","DLIY","NPSA","VESK","VIVD","VRVA","DSIA","PVSL","ATID","ISAN","YLEL","LTLA","LEKR","AVIL","CCGC","ALTT","PAVV","VQKD","LIQD","SHVL","VPNS","LSKD","AFRQ","RQEL","SGSH","REVE","LKVN","NSVN","ELEG","SGNK","GRLL","FSLV","TTVP","NIEI","RLDL","ELRA","VEAN","NRIQ","PEDL","FERG","TLGF","QLDE","ALCS","VFRI","DVIT","LGFT","LAFS","IQDI","TPRI","SPGD","AQAY","EGEY","AGLN","FLNI","GKPI","LQIE","VRSG","KKRE","AKKD","PQIL","HLDL","SDII","QFLR","GDLC","DFEK","PDPT","TALR","ASNL","NLSL","FLKY","TFSV","GMVG","APSQ","AVTE","EFVN","IREQ","KKFK","GYSS","FSLQ","YQAV","EYVG","ERLY","SRGA","REHL","DAKL","VRED","ERVK","VYLD","GEGL","KKQE","IERG","NVEG","PLTT","KLFQ","GVML","TGAD","FSAF","VQTL","QGEG","RPAA","EEGY","KQIS","DAIG","YLVA","NKDL","LIAE","YLSK","DPFT","GVLG","FTFD","IDNA","VEDI","DFSS","APEA","HLQL","VTAN","TILE","GSAS","QVGV","VDVG","AHDR","VAPT","SVPY","RRIK","NVVS","FGLD","ALLV","IVNL","PSAE","KKNA","TTGK","EFTL","QSIG","NRDL","TGPG","SSLV","VIQA","ALVN","FDDA","VKSG","PIET","EFLL","AENK","QPLP","SEEG","HPVT","NVDF","GVGF","VEVV","LQPL","HLML","AEML","GFID","IFAL","VNAL","ETTY","VDLR","NTTG","TDNF","ARDS","FKRI","FKVK","YDPN","SFDE","GQLL","LSEF","RRIR","NAEE","EDGD","FLLT","NARL","VHGE","EVAF","LPQI","QRNG","IDRD","DGNV","QAFS","KDHP","KIIL","YRGA","MSNL","LSLM","IRNE","GHKL","IRAE","LKNE","LVLR","KERQ","DYVR","HELS","ATDV","QIDL","RESL","GGSA","FHAK","IMEK","ESIT","KFIG","GKLQ","ASRA","IFNF","LSSS","VQMA","PNTL","FNAL","MIVA","KVSP","VVIL","VADT","QSGK","NSTT","LRED","GVRR","KNQI","LIIL","TQIA","LDAS","NVGP","NKAI","FQLA","DDDI","DLFS","ILSQ","DFEN","SGIF","VGPS","GQTA","IPKS","AGDS","ERIY","EDEK","NLRL","APGE","NKII","SNDA","AEKR","FEAL","ATKV","ASVF","QIAE","YFFS","SQAT","ARVI","VTVI","RAED","LIRE","KDFP","TGGL","DDYP","DVLF","SFIR","AGQY","GNRR","QLTL","VAMG","HGVT","NVSD","IKQK","ASVT","DVFD","DKLT","DSPD","EKKI","LSEQ","NRYG","QIIK","PNPV","GSER","DEIY","LKTV","LGQQ","NIDS","AYAL","SLCV","FCGA","FETG","NPGN","GVYP","VPIS","IFKR","DLNG","LHIS","GAQV","SDNR","LYQL","GLPS","GGQP","GSIS","DIIM","KEAY","ERTR","DDPE","GRDH","KNTI","LNVA","YKEI","EAFG","AQNL","GEQI","GQKL","KDAQ","PADW","DNLY","ERID","EVKA","NGKE","RILY","ATSD","KRTV","QLSG","QRGT","RTFN","MVDG","YPDG","SKSE","LLFN","GDQA","VVGF","CVAD","AGEW","YDDI","KQYE","ELPM","TAIS","LTIK","VRRI","PGIV","YPYD","HPGD","DEGE","QRRG","EETA","GYVY","AAAM","SHNP","DGVT","GGLQ","RRDL","NYSD","PVVE","PGGD","IELV","VRFI","KNEP","ADEQ","NNPE","VVTE","QLTN","VSIV","ELMR","REIQ","DEAD","FGFV","RQLG","GALF","CLAE","VGND","LPMV","VVGV","NSSQ","SRSV","SLRP","AEEY","FKEE","DTPT","VNKS","EEYS","SYLS","GYGV","FALP","HAGD","RNLV","DQSG","KDTT","GGIH","HHQL","LCRK","GGKE","LVGT","FTVL","ETLN","NGGY","RNAT","KGGR","TEND","AALN","LDPG","AVKS","NSGS","AGIN","IGKV","VFQN","DRRS","VRVR","GDVN","KSVI","RMRR","TREV","VFRR","QGIV","TADS","NELT","KQLE","IARD","KRAD","PLAR","NELK","ESPE","AQGF","DRLQ","ALTR","ISEF","DQDV","YLLR","GKSP","AEVK","PKVV","TASE","DAGS","PLHL","DKGR","ERRI","MRKE","ADKI","TRYA","RVVN","ASAR","SSHN","ALHP","KSGF","IREF","QHGV","LEKH","PPAA","TEDS","KTQK","IDGI","DVIF","DAVE","LQIS","AIFE","RRFV","EQLS","MICG","LKNF","LGDR","FSGK","SLDM","LDGT","LVNH","DEEF","EEIW","RLIL","MLVQ","DFVV","FRAR","KAAQ","MGTL","KENI","QSLG","FPEP","DRPD","TPVP","RSPL","AYLD","TDIE","DSQR","FKDP","KVDA","GIKD","PFTM","TITR","FPAF","RPRA","GRIT","EGMD","TMLS","PGFR","ILVA","ASTF","RSVA","EKDE","LSRP","GLIF","DRGN","SLSI","DNRP","NLVF","GLIY","LVNQ","YDLV","KEWY","FLEQ","FKNL","RLKR","AKMR","HKLV","FTKR","GAEV","LRLT","APVA","TAKY","TKVG","LGIA","AWSH","NDLV","AYVT","KLRK","NVFK","GIAI","RIAL","LQGA","GDAT","SVVS","DRPF","AVYN","SQSS","YLSV","DQGL","ESFP","PKEP","SVGD","LIPK","TAAN","NVNA","LFAN","ADDL","RVFA","TRVT","INGP","DGVQ","KGIV","KEEQ","TQLV","VTRG","ARTP","RSKE","TKTA","DSKN","ELIR","KINV","KPYA","RLEY","GVQT","QAMK","TLYT","PGLY","LNDP","TRAE","GFVD","YFLG","IRVG","KSEV","FDKL","SAAN","LDIK","ERPQ","DGRR","ELDS","VTLE","HMLQ","ITLE","ATQV","GEYA","GARI","CDSC","HFIG","QISS","EPIP","LPIP","GRKL","ELYL","AAVH","SPVL","TFRS","TKTS","REQQ","APAE","VERE","ELME","LGND","IQFL","NTDG","LQKT","GILR","AISN","KPGV","VIEF","LMPT","DADK","DSRV","DEAK","KYDE","AVER","PVPE"]
BEST_FOUR_GRAM_RECALL_FEAT_32kTo33k = ["DARD","ESAE","WVLK","LTKD","QEQV","LGLW","PTTI","NIDT","RPKT","MGKS","TPPT","DPNL","VYIA","DDSS","EHED","NNDP","CVQL","PPEI","KKWL","VDDA","KGDL","LKKF","VFGT","IHTS","KAVM","MFEQ","PPET","AVQR","VEDT","NARS","TYNV","ESIW","GTCP","EENA","SGVQ","AFVQ","DDAE","VVDF","LKCP","TENE","LDEH","PGSL","SCKS","IANQ","SEND","VDPI","TTIT","FMEE","SFAE","IKDS","MGNY","IQEI","YSVI","TDFG","VPNL","AQSA","LVIL","LLIQ","EQNG","EVPG","DPTR","SPNK","DGFE","RIKP","PNTK","YGPV","GKVE","RNRA","IGGS","LQPD","LKQQ","GFYT","EMTR","KTIA","EIFT","IDLY","FHIL","PARA","VEIY","ITAS","ALWA","YSQS","TMAG","IQQN","TPAH","TDSE","MLDP","TRDG","YVNN","PVLH","GLFP","YDSG","VGTW","KGQV","IRAP","KYLQ","TGEF","PEDP","VEGF","VWED","DPQV","KFSE","VDVS","ATRI","GGCA","GTVK","ISYS","KSKI","YPIF","SYSL","MELP","RKRT","KPYV","TFVK","NPVA","VIHK","QNPG","NQAV","VSDG","VAIH","SNIS","FVKA","QDNL","GLAM","IQTG","VKLM","TEEN","VKDS","TRRK","TPRQ","VQCT","YREA","SHIE","TDNN","EPMK","TGTF","TRIL","QQPQ","EKAQ","QNLR","RFKA","QVAK","TFNP","NKKT","VIQT","LVVN","AQQM","SMNK","LIRV","AFFR","TIVV","DSIK","TKQD","DQKL","STQS","IYRG","KQAE","ATHL","AQER","QFAP","NEKN","EYET","VIPT","FLAV","GQGC","KKSM","FNIN","GMTM","YSPV","DGFD","FDVM","TPGS","TIIT","GAAH","PDYK","PEKH","QLPN","GFYP","VMSD","DRIP","DHPF","AVKQ","STDF","NGQD","LRIT","NFEK","WDVV","SEKP","HDAP","VTKG","MMGG","YRQR","VTLT","GEVP","QDIF","HMAK","ESIP","RLHS","LHLK","SRNG","LSHV","TGAI","KTKL","QVQK","QPLD","MVSA","TLNT","DGFS","FTLA","SRGD","ATTW","PQVA","RENA","IKIW","IKCR","VSTF","PDAT","DYCA","FING","RKVI","AGTI","CFSA","RQTV","EEKA","PSGQ","GAKF","AKQR","MHTV","LEDM","TRDD","TTPW","TESQ","LVND","PNYP","AENQ","TPLN","DDVI","FMGL","LVTN","FKKA","AQYL","TTGW","CLVT","RSMS","TNAS","RMQK","ISTG","ITTE","ANSG","AEDD","FVEQ","NGGN","FVRR","SAET","EKDH","SNDS","SNSH","QKYL","LAWH","GAER","PCTR","EDMK","QKRA","AYFA","GGTN","AEIP","AFER","SGFA","TQAT","DVKK","EIDM","VDSQ","PTPA","RCDH","GAES","REYV","LLGM","QAIQ","PPPI","YSGE","VLFY","KRSE","LPDR","NFAK","TTLT","KLEG","ISHV","KTFP","LLRI","KSRK","SNIP","DLVN","QVEF","LPMS","ACNS","VHEE","KTVL","DHPV","DVSK","QVFA","RGGQ","LIFN","ADDR","VGYR","NEGA","FRSV","VRYV","TGTC","ALAC","VIPF","PMEF","TNWT","SLNN","TFNT","STTK","SMAV","SYWL","IEGG","TVFD","VPYN","PRSV","ESGQ","VLHT","IRFR","KSQI","EFQY","IIQQ","VWLA","FHLD","SYDL","PETM","MTGA","HEFL","CLTV","NIQR","VVIN","RGTA","NVQG","LDKM","ESFV","EETK","DRND","AEHE","DVVN","RGGM","QSVA","AQQP","HYTS","VQKH","GKKE","GPLV","FEKD","VAND","VDQS","FIVT","KVNF","SIRF","NARR","AFPE","FDTG","FAGN","FFDN","PLEF","LCGG","YLGD","QGSY","NRLN","TEII","TYAT","IPYA","NPDG","FRGV","SEYL","VFTA","WKKD","NKIQ","HGQL","MDGS","PGFQ","YDGF","SDFV","SKRE","VQRA","GYVR","ELVF","EHMK","KPRV","DSQK","NRHL","KTPK","QEKR","PNIS","VASY","IPRV","SNLA","SAEP","PAVK","KLFD","SEKF","DKIE","GNIS","LHNF","EEMA","KNKV","GEKF","GRGK","FVQT","ILIE","EKLH","RAGW","GKKA","LYHH","LCVI","MGDK","WYRS","SDGA","ASDR","KGHG","VLEY","TSLR","PYGG","LARS","EFKA","SEAK","VHEA","GILG","DTVN","YRSI","NQLD","PVRV","SEKD","RLYN","PTGL","DGGY","CINI","MEEI","YKIY","DTYN","PPRH","QYPL","PLQR","KVMA","AKRY","PYTI","KIYV","PEDM","PSTL","TTHV","GTHT","STEP","ADYF","VDGD","LKNN","EGRI","VEVQ","KPQP","FACV","YDSI","SAIE","FYIE","TQLK","MVEG","SDLQ","FPSK","AIEV","TSLN","RAIG","DIAY","IIEP","PLVS","RSKN","EELP","REVK","AHAS","VIII","SMMG","KLDQ","ALWL","IIQE","FSNE","ANPQ","GFFL","VRNL","NKTF","ENLT","GYPI","FKEF","SIST","QDVY","FPEK","ELIQ","SIDH","PLQA","FFTI","LDPH","EAPV","KHAK","MENL","QAEL","LTKH","GFVT","LSNF","RGII","TYAS","GEWQ","PTEV","RVGL","QNAR","FYHL","SHAE","FTVS","GKAY","HDAS","NLFI","NTSD","KDVA","DVSF","HSIT","VSFL","NTNG","FRDV","LQPA","LFGY","QPVI","PVQS","PLEY","ANDR","RRRF","ARAQ","FGVK","LLPH","ISNG","TVRD","AKKS","IYSN","VGTV","AYQQ","LMNV","SEDK","IQFA","IPYR","FFDD","TITV","NNGV","WIKK","GSPD","NAEN","LPSQ","MAAG","LFAP","FLPE","IAEN","LRAC","DDDF","TNRD","KISE","EGYE","NIVP","PDSP","AFGK","PYAD","FPKT","KRYK","YYDT","ILLH","VQSS","YRDI","KKFQ","ESAS","RTTA","EVNY","VLAC","AKFD","RWRD","KEFI","SRTI","NDGR","PNLY","KRWD","DWIP","NVLT","SQII","DGEG","EVKT","SKYG","PPTD","QITP","VTLH","TYVP","DCLA","SRVK","SVYG","CGCG","PLVG","EGNP","RHGA","TDDQ","VKQE","NRVD","GNPV","DFRE","ERRT","NNKL","NLIT","NVYG","PYLP","VTAS","TAIF","TAFN","NSEL","WAGD","YFVV","PTQA","SFTN","PDGQ","EMFA","TPKP","SDEG","VYPV","IKLR","SKGF","TSRN","STIN","KKVF","FFDK","DSAN","NWEV","KLDY","PVLP","PHLV","SPLY","HGAL","PEDW","FLSR","AYFV","RGPT","TKTL","LRHA","NAKP","IALQ","KHSI","VKAY","NSNN","QAEG","SHML","GYRV","MTRA","LIAF","DYQA","CKGI","VKNC","VVKM","EVCD","PTQK","RSRS","NPQE","TVGR","APLH","GGEC","EFSR","RGTE","DKMV","MGHI","YPLT","DTTS","TFYE","VRDG","KPTA","AAPS","YSML","FPKK","GYAT","ETAV","EGIY","VFLK","EYKI","QGEA","QLQV","TVQS","RFGY","MNYL","RIPQ","FQQP","IFRS","ELPF","GDAI","IKYD","SEYT","IYAK","AGTP","MADT","GFCA","HIHQ","SLAD","ADHV","SDTV","ALYL","DEGS","DTVF","TSDS","VNNG","IHVA","SLMH","GVGR","PAHF","MLFT","REET","YEKV","DEIN","HGNA","GRDQ","FKLI","KPVQ","NVTI","SQRY","FVAK","STEW","KPVM","MQLY","VRKY","SMGR","ASTR","SLNV","AVNH","FQSM","SVTI","SLRT","KLPS","VSQQ","EDVE","VSLT","KKVV","LPGE","ITVG","NGNR","PDND","QAEF","IEQR","TTEK","ASGC","KLKP","QRDI","ADPE","FTLS","ATES","SGFK","RQDP","TEEF","ILLK","TLQR"]
BEST_FOUR_GRAM_SPEC_FEAT_63kTo64k = ["FIAR","IVQV","KKDW","HMSD","NQSF","TVLF","KMKF","CDKL","NCYE","KPDA","NQQM","TEDC","PRTQ","YPFQ","TEWE","HIFY","QADQ","GHKY","CTQY","AQWR","VCVP","FWVR","RQYI","HKTD","HCER","QFFR","STHF","FNQS","VQPP","NHRK","SRTK","WMSR","SFAW","LPSC","NVYR","FPCS","RHIK","RHNA","LRGM","RVAH","FVKS","CKRF","TIYP","IYFR","CRED","QDAH","QITR","WQDN","LNHT","MQCQ","TTES","VCWP","PQAI","RYYE","RREQ","ITCG","LISH","PPWG","ETNV","GAPW","FIKD","LIYV","CIAS","WQAD","DEWY","AYFK","CQND","HDFL","FYQW","ADIQ","SDFM","NEQI","KISF","FVRQ","IGMP","TFSC","FDII","QAAF","KCNA","LPFE","KPWE","LYND","HNKY","EYLF","CDPF","PFES","YKLH","SHGW","KYHG","IYNT","RMTK","CNDA","FLNC","FSPC","CMEL","CGVS","PDGD","ICYD","SHYY","YLDT","FDAT","EQYK","WVHL","QHCS","LEYH","LCQS","QFWW","PRDF","GACN","SCTF","GYTM","RHNH","ATPR","HMKI","HFNV","KFIM","RDFH","TKHA","MKQR","RAHE","MNGV","KAQG","GVHY","VRPG","NQWL","GYFT","HSPP","AGHC","LNEQ","VMQA","HQVT","VRKQ","AENH","IVFY","YVMH","LGCY","LECH","TANF","NPEW","SRPC","CLLS","TNVR","GYPY","PQII","FKFY","WTRE","HFAT","YFLL","SKAF","LIIC","EREW","PFAV","TQYD","CFEL","EPNT","GVGW","SCPA","ERIN","MWRE","EQMV","KWQG","MGEQ","ALYY","RDWA","SYYD","NGPW","IPHE","WIYS","SWWI","PSCS","ICKQ","WGAI","ANES","SYAI","LSIW","CMRA","IGMF","MCLR","RHLH","RIEP","GSDN","ADTT","DKFN","MALR","AHHM","QCLR","AFYA","HVDI","IFAT","NGYC","QWGT","DQSK","AVMI","QRPN","IEWA","QCAN","VYLR","LFIK","TTDF","CERN","CERP","ILAQ","GCNC","EQVQ","HKAA","VEKR","KTWV","FHML","RREF","DDCK","MTVG","FNHR","IGVN","QHFT","KWAN","MYNE","LRIH","GVWG","AFEC","IDHG","ENYT","LITM","DGWW","VDMY","HMNV","LNQP","GVFM","YCVG","PKIK","PMVY","HRYP","VYEE","FQTE","YFKC","EPGN","ITTQ","GQYF","IWRE","GSLH","TGPQ","RFKT","SSHA","NCIR","RNWH","ITCS","YKRH","IIQH","IPAQ","RQSS","QYER","DAEN","QDTQ","IYIV","CDLS","LGWI","CSYT","TYHK","YPIN","MFPD","DWRM","GIQM","HCYS","NAVF","KEGL","IPLM","FHEQ","FAFN","QRYD","QLFL","TMNM","DMAN","NHDH","QHFE","AWHD","SMYV","TPIM","DMFS","MPPA","HFGY","RGVM","TCVV","YPLC","NKYG","LWST","QMCE","PARE","RVVM","IQAI","FHED","GTWK","NLSH","GKPF","HRFK","QVLI","RNML","QNEH","ALLM","RKWT","TFNL","PRFW","DEYP","LNWS","QLYP","GWPK","CLVK","NKVP","EISN","DCIQ","KCMV","EHWV","LHFP","NWYY","EHSN","ECKQ","HNNN","DWLK","CFKA","HGLM","DVCL","GFDY","FKKM","NMSP","EHQH","HLFP","RMQG","GMNV","WFCP","GDIQ","QMEF","QYMG","WPFY","GKET","CFFA","MNAG","KRPG","IMQT","CEQV","LPYI","IQHP","PKMP","QGFI","HAWN","AEKC","YPTN","DWVH","LVIH","CLSH","QPSY","LFTR","NQMA","GNRG","HKGP","TSTY","WVIF","VYHN","QQRA","ADPL","KFVK","RLYY","QESD","AMYM","DHMV","WDRE","IQWC","QSRC","NSQF","LNQS","NPWD","TNLS","NNHF","ADTH","SHKF","FHMR","FFRN","PRTI","TPRA","LMKQ","RPYA","DNDQ","CVFY","NNIN","GGQM","FYYC","YVEQ","IQYS","MHPK","CPDR","IYCA","ELMT","AMQG","FELP","HDFI","NWTQ","IQFH","VCKI","CSML","YFAC","VPGC","FKRG","PKPH","LWIP","LGEW","WYTV","MQKE","WRGR","SNLC","KQDG","QANV","NIFE","GHRK","DKCP","ALFM","HMLT","FKRQ","NILY","FYAN","MEGI","ICED","QEYW","GHEM","MLME","GQYQ","FVNQ","YFGA","FIPE","KWEA","GWWD","TRTQ","AGNL","QNYM","YNMA","RFCK","ILCP","MICE","KNVQ","VICD","PGVY","HPSE","EMKN","RRKF","NKMV","WMIE","WDEM","GLVH","RAKN","HELT","KMSE","HVCF","ARHE","GQRD","VGVC","ECFE","MING","LMTV","RHFL","ITYM","HPPE","MRVS","MDFE","QITH","KCRT","EMTW","RSIT","APCQ","KITP","SPFD","ETIM","VKTN","GTRM","TMAI","YEQN","MVTK","QTRL","VRHD","WFVL","TSNY","FKTE","IFSD","CKAD","SNGM","KHHC","MGTH","HIDS","FRET","VQHK","LIQS","YRWA","YCIR","QVIM","QMDG","MSSK","TDHQ","PLVM","GWQI","VNDW","TYGP","AFRA","SYFS","WLAD","WPKM","CNTM","TCKY","HVEE","LPCE","ETRH","TSYP","CCGL","LDWR","WGAP","YRMK","EKNQ","TRNQ","GIRQ","RIIC","CRDQ","RMDI","CRDY","AFFY","QYPR","PQIS","CEYL","PLPQ","GWLQ","PHCQ","DFWG","NCEL","CEVH","HIQF","GRPW","RMED","RINL","EVCT","DEHE","DPRN","GTHY","KCRI","FSSF","TYIP","RRCL","KDMN","YTAI","ICEV","FYSY","IFNR","MICT","KFSI","CDFH","EEWD","FCTD","LHAS","NCTM","QQRS","DDYT","CERV","PVFQ","GTNI","EKHW","HRKS","ECYD","DMSE","NEFF","VKWS","SACK","GRGQ","IEHD","CNRA","AENN","QRTR","GCGM","FWEI","HKKV","ISFR","YHGD","RDGW","PCRL","HTLF","KVHK","WVKE","QTPN","AHWQ","WAHG","SNTC","CSLQ","QCVL","KHAR","DGHR","HCLV","CLTA","EYRW","QNVD","PYME","QDIS","SDRH","YRDA","QNLM","EQTR","AWHT","LPFR","NTRC","WDFV","KCIL","HWTA","CVDL","EPPR","MSGK","IFKF","YVND","EFKC","FDSK","LHFD","KQIF","SAMS","GVDW","MMEN","DRGG","TFED","MEWQ","FINI","HEKT","VKCI","EQKS","GFPR","EFKI","CALT","NHFG","GHYF","GEIC","DHTY","NKCS","IYWT","MGMT","RMGY","CTMV","HEDK","IQWY","CASA","EYYH","NSVI","WNSL","NEFM","YAYE","EYQY","CALR","FKSS","KGRN","EGNH","KKRI","YCQK","MHFE","DGQG","HKGQ","QIRP","YFHT","FPNS","TAGH","YHNG","LKDH","YDVG","FMEP","QFYH","RRCI","FKLW","PQRT","HKYE","KIFC","SGHQ","CYTC","RLNI","LFVP","TVYE","QLEM","LWPF","TSCY","MIGC","DCID","WRQL","GTMV","IADH","PPRT","KGPK","WEYL","MHPD","RTSA","HSVN","QMDD","EVPH","DGYK","VKWY","NWSS","PEYM","IRSN","RPAH","VKGN","FGWQ","RLFH","MNRA","HNMV","YWNP","DATY","MFSQ","KYST","YPDW","HKQD","IWDY","FDTM","ECDI","EMWE","RKTY","GDQD","DEGT","SDMH","RKIY","EAFS","FWLT","HYEL","INWE","EQTH","MNIS","FNEQ","FTQG","RIHG","MPGI","QFTH","MAHC","DHPM","MRSD","YPKG","FQLH","YGER","VNQW","KAAC","EDHQ","HPDC","GFQN","CSHM","TNIR","EAGW","NSHD","NRMI","ILGC","SATQ","FSPQ","KVNG","KEQQ","PQTC","RSRT","IMKK","EEMC","KKCV","RRMQ"]
SCHNEIDER_WREDE_DISTANCE = {
    'AA': 0.0,
    'AC': 0.112,
    'AD': 0.819,
    'AE': 0.827,
    'AF': 0.54,
    'AG': 0.208,
    'AH': 0.696,
    'AI': 0.407,
    'AK': 0.891,
    'AL': 0.406,
    'AM': 0.379,
    'AN': 0.318,
    'AP': 0.191,
    'AQ': 0.372,
    'AR': 1.0,
    'AS': 0.094,
    'AT': 0.22,
    'AV': 0.273,
    'AW': 0.739,
    'AY': 0.552,
    'CA': 0.114,
    'CC': 0.0,
    'CD': 0.847,
    'CE': 0.838,
    'CF': 0.437,
    'CG': 0.32,
    'CH': 0.66,
    'CI': 0.304,
    'CK': 0.887,
    'CL': 0.301,
    'CM': 0.277,
    'CN': 0.324,
    'CP': 0.157,
    'CQ': 0.341,
    'CR': 1.0,
    'CS': 0.176,
    'CT': 0.233,
    'CV': 0.167,
    'CW': 0.639,
    'CY': 0.457,
    'DA': 0.729,
    'DC': 0.742,
    'DD': 0.0,
    'DE': 0.124,
    'DF': 0.924,
    'DG': 0.697,
    'DH': 0.435,
    'DI': 0.847,
    'DK': 0.249,
    'DL': 0.841,
    'DM': 0.819,
    'DN': 0.56,
    'DP': 0.657,
    'DQ': 0.584,
    'DR': 0.295,
    'DS': 0.667,
    'DT': 0.649,
    'DV': 0.797,
    'DW': 1.0,
    'DY': 0.836,
    'EA': 0.79,
    'EC': 0.788,
    'ED': 0.133,
    'EE': 0.0,
    'EF': 0.932,
    'EG': 0.779,
    'EH': 0.406,
    'EI': 0.86,
    'EK': 0.143,
    'EL': 0.854,
    'EM': 0.83,
    'EN': 0.599,
    'EP': 0.688,
    'EQ': 0.598,
    'ER': 0.234,
    'ES': 0.726,
    'ET': 0.682,
    'EV': 0.824,
    'EW': 1.0,
    'EY': 0.837,
    'FA': 0.508,
    'FC': 0.405,
    'FD': 0.977,
    'FE': 0.918,
    'FF': 0.0,
    'FG': 0.69,
    'FH': 0.663,
    'FI': 0.128,
    'FK': 0.903,
    'FL': 0.131,
    'FM': 0.169,
    'FN': 0.541,
    'FP': 0.42,
    'FQ': 0.459,
    'FR': 1.0,
    'FS': 0.548,
    'FT': 0.499,
    'FV': 0.252,
    'FW': 0.207,
    'FY': 0.179,
    'GA': 0.206,
    'GC': 0.312,
    'GD': 0.776,
    'GE': 0.807,
    'GF': 0.727,
    'GG': 0.0,
    'GH': 0.769,
    'GI': 0.592,
    'GK': 0.894,
    'GL': 0.591,
    'GM': 0.557,
    'GN': 0.381,
    'GP': 0.323,
    'GQ': 0.467,
    'GR': 1.0,
    'GS': 0.158,
    'GT': 0.272,
    'GV': 0.464,
    'GW': 0.923,
    'GY': 0.728,
    'HA': 0.896,
    'HC': 0.836,
    'HD': 0.629,
    'HE': 0.547,
    'HF': 0.907,
    'HG': 1.0,
    'HH': 0.0,
    'HI': 0.848,
    'HK': 0.566,
    'HL': 0.842,
    'HM': 0.825,
    'HN': 0.754,
    'HP': 0.777,
    'HQ': 0.716,
    'HR': 0.697,
    'HS': 0.865,
    'HT': 0.834,
    'HV': 0.831,
    'HW': 0.981,
    'HY': 0.821,
    'IA': 0.403,
    'IC': 0.296,
    'ID': 0.942,
    'IE': 0.891,
    'IF': 0.134,
    'IG': 0.592,
    'IH': 0.652,
    'II': 0.0,
    'IK': 0.892,
    'IL': 0.013,
    'IM': 0.057,
    'IN': 0.457,
    'IP': 0.311,
    'IQ': 0.383,
    'IR': 1.0,
    'IS': 0.443,
    'IT': 0.396,
    'IV': 0.133,
    'IW': 0.339,
    'IY': 0.213,
    'KA': 0.889,
    'KC': 0.871,
    'KD': 0.279,
    'KE': 0.149,
    'KF': 0.957,
    'KG': 0.9,
    'KH': 0.438,
    'KI': 0.899,
    'KK': 0.0,
    'KL': 0.892,
    'KM': 0.871,
    'KN': 0.667,
    'KP': 0.757,
    'KQ': 0.639,
    'KR': 0.154,
    'KS': 0.825,
    'KT': 0.759,
    'KV': 0.882,
    'KW': 1.0,
    'KY': 0.848,
    'LA': 0.405,
    'LC': 0.296,
    'LD': 0.944,
    'LE': 0.892,
    'LF': 0.139,
    'LG': 0.596,
    'LH': 0.653,
    'LI': 0.013,
    'LK': 0.893,
    'LL': 0.0,
    'LM': 0.062,
    'LN': 0.452,
    'LP': 0.309,
    'LQ': 0.376,
    'LR': 1.0,
    'LS': 0.443,
    'LT': 0.397,
    'LV': 0.133,
    'LW': 0.341,
    'LY': 0.205,
    'MA': 0.383,
    'MC': 0.276,
    'MD': 0.932,
    'ME': 0.879,
    'MF': 0.182,
    'MG': 0.569,
    'MH': 0.648,
    'MI': 0.058,
    'MK': 0.884,
    'ML': 0.062,
    'MM': 0.0,
    'MN': 0.447,
    'MP': 0.285,
    'MQ': 0.372,
    'MR': 1.0,
    'MS': 0.417,
    'MT': 0.358,
    'MV': 0.12,
    'MW': 0.391,
    'MY': 0.255,
    'NA': 0.424,
    'NC': 0.425,
    'ND': 0.838,
    'NE': 0.835,
    'NF': 0.766,
    'NG': 0.512,
    'NH': 0.78,
    'NI': 0.615,
    'NK': 0.891,
    'NL': 0.603,
    'NM': 0.588,
    'NN': 0.0,
    'NP': 0.266,
    'NQ': 0.175,
    'NR': 1.0,
    'NS': 0.361,
    'NT': 0.368,
    'NV': 0.503,
    'NW': 0.945,
    'NY': 0.641,
    'PA': 0.22,
    'PC': 0.179,
    'PD': 0.852,
    'PE': 0.831,
    'PF': 0.515,
    'PG': 0.376,
    'PH': 0.696,
    'PI': 0.363,
    'PK': 0.875,
    'PL': 0.357,
    'PM': 0.326,
    'PN': 0.231,
    'PP': 0.0,
    'PQ': 0.228,
    'PR': 1.0,
    'PS': 0.196,
    'PT': 0.161,
    'PV': 0.244,
    'PW': 0.72,
    'PY': 0.481,
    'QA': 0.512,
    'QC': 0.462,
    'QD': 0.903,
    'QE': 0.861,
    'QF': 0.671,
    'QG': 0.648,
    'QH': 0.765,
    'QI': 0.532,
    'QK': 0.881,
    'QL': 0.518,
    'QM': 0.505,
    'QN': 0.181,
    'QP': 0.272,
    'QQ': 0.0,
    'QR': 1.0,
    'QS': 0.461,
    'QT': 0.389,
    'QV': 0.464,
    'QW': 0.831,
    'QY': 0.522,
    'RA': 0.919,
    'RC': 0.905,
    'RD': 0.305,
    'RE': 0.225,
    'RF': 0.977,
    'RG': 0.928,
    'RH': 0.498,
    'RI': 0.929,
    'RK': 0.141,
    'RL': 0.92,
    'RM': 0.908,
    'RN': 0.69,
    'RP': 0.796,
    'RQ': 0.668,
    'RR': 0.0,
    'RS': 0.86,
    'RT': 0.808,
    'RV': 0.914,
    'RW': 1.0,
    'RY': 0.859,
    'SA': 0.1,
    'SC': 0.185,
    'SD': 0.801,
    'SE': 0.812,
    'SF': 0.622,
    'SG': 0.17,
    'SH': 0.718,
    'SI': 0.478,
    'SK': 0.883,
    'SL': 0.474,
    'SM': 0.44,
    'SN': 0.289,
    'SP': 0.181,
    'SQ': 0.358,
    'SR': 1.0,
    'SS': 0.0,
    'ST': 0.174,
    'SV': 0.342,
    'SW': 0.827,
    'SY': 0.615,
    'TA': 0.251,
    'TC': 0.261,
    'TD': 0.83,
    'TE': 0.812,
    'TF': 0.604,
    'TG': 0.312,
    'TH': 0.737,
    'TI': 0.455,
    'TK': 0.866,
    'TL': 0.453,
    'TM': 0.403,
    'TN': 0.315,
    'TP': 0.159,
    'TQ': 0.322,
    'TR': 1.0,
    'TS': 0.185,
    'TT': 0.0,
    'TV': 0.345,
    'TW': 0.816,
    'TY': 0.596,
    'VA': 0.275,
    'VC': 0.165,
    'VD': 0.9,
    'VE': 0.867,
    'VF': 0.269,
    'VG': 0.471,
    'VH': 0.649,
    'VI': 0.135,
    'VK': 0.889,
    'VL': 0.134,
    'VM': 0.12,
    'VN': 0.38,
    'VP': 0.212,
    'VQ': 0.339,
    'VR': 1.0,
    'VS': 0.322,
    'VT': 0.305,
    'VV': 0.0,
    'VW': 0.472,
    'VY': 0.31,
    'WA': 0.658,
    'WC': 0.56,
    'WD': 1.0,
    'WE': 0.931,
    'WF': 0.196,
    'WG': 0.829,
    'WH': 0.678,
    'WI': 0.305,
    'WK': 0.892,
    'WL': 0.304,
    'WM': 0.344,
    'WN': 0.631,
    'WP': 0.555,
    'WQ': 0.538,
    'WR': 0.968,
    'WS': 0.689,
    'WT': 0.638,
    'WV': 0.418,
    'WW': 0.0,
    'WY': 0.204,
    'YA': 0.587,
    'YC': 0.478,
    'YD': 1.0,
    'YE': 0.932,
    'YF': 0.202,
    'YG': 0.782,
    'YH': 0.678,
    'YI': 0.23,
    'YK': 0.904,
    'YL': 0.219,
    'YM': 0.268,
    'YN': 0.512,
    'YP': 0.444,
    'YQ': 0.404,
    'YR': 0.995,
    'YS': 0.612,
    'YT': 0.557,
    'YV': 0.328,
    'YW': 0.244,
    'YY': 0.0,
    }
GRANTHAM_DISTANCE = {
    'AA': 0,
    'AC': 195,
    'AD': 126,
    'AE': 107,
    'AF': 113,
    'AG': 60,
    'AH': 86,
    'AI': 94,
    'AK': 106,
    'AL': 96,
    'AM': 84,
    'AN': 111,
    'AP': 27,
    'AQ': 91,
    'AR': 112,
    'AS': 99,
    'AT': 58,
    'AV': 64,
    'AW': 148,
    'AY': 112,
    'CA': 195,
    'CC': 0,
    'CD': 154,
    'CE': 170,
    'CF': 205,
    'CG': 159,
    'CH': 174,
    'CI': 198,
    'CK': 202,
    'CL': 198,
    'CM': 196,
    'CN': 139,
    'CP': 169,
    'CQ': 154,
    'CR': 180,
    'CS': 112,
    'CT': 149,
    'CV': 192,
    'CW': 215,
    'CY': 194,
    'DA': 126,
    'DC': 154,
    'DD': 0,
    'DE': 45,
    'DF': 177,
    'DG': 94,
    'DH': 81,
    'DI': 168,
    'DK': 101,
    'DL': 172,
    'DM': 160,
    'DN': 23,
    'DP': 108,
    'DQ': 61,
    'DR': 96,
    'DS': 65,
    'DT': 85,
    'DV': 152,
    'DW': 181,
    'DY': 160,
    'EA': 107,
    'EC': 170,
    'ED': 45,
    'EE': 0,
    'EF': 140,
    'EG': 98,
    'EH': 40,
    'EI': 134,
    'EK': 56,
    'EL': 138,
    'EM': 126,
    'EN': 42,
    'EP': 93,
    'EQ': 29,
    'ER': 54,
    'ES': 80,
    'ET': 65,
    'EV': 121,
    'EW': 152,
    'EY': 122,
    'FA': 113,
    'FC': 205,
    'FD': 177,
    'FE': 140,
    'FF': 0,
    'FG': 153,
    'FH': 100,
    'FI': 21,
    'FK': 102,
    'FL': 22,
    'FM': 28,
    'FN': 158,
    'FP': 114,
    'FQ': 116,
    'FR': 97,
    'FS': 155,
    'FT': 103,
    'FV': 50,
    'FW': 40,
    'FY': 22,
    'GA': 60,
    'GC': 159,
    'GD': 94,
    'GE': 98,
    'GF': 153,
    'GG': 0,
    'GH': 98,
    'GI': 135,
    'GK': 127,
    'GL': 138,
    'GM': 127,
    'GN': 80,
    'GP': 42,
    'GQ': 87,
    'GR': 125,
    'GS': 56,
    'GT': 59,
    'GV': 109,
    'GW': 184,
    'GY': 147,
    'HA': 86,
    'HC': 174,
    'HD': 81,
    'HE': 40,
    'HF': 100,
    'HG': 98,
    'HH': 0,
    'HI': 94,
    'HK': 32,
    'HL': 99,
    'HM': 87,
    'HN': 68,
    'HP': 77,
    'HQ': 24,
    'HR': 29,
    'HS': 89,
    'HT': 47,
    'HV': 84,
    'HW': 115,
    'HY': 83,
    'IA': 94,
    'IC': 198,
    'ID': 168,
    'IE': 134,
    'IF': 21,
    'IG': 135,
    'IH': 94,
    'II': 0,
    'IK': 102,
    'IL': 5,
    'IM': 10,
    'IN': 149,
    'IP': 95,
    'IQ': 109,
    'IR': 97,
    'IS': 142,
    'IT': 89,
    'IV': 29,
    'IW': 61,
    'IY': 33,
    'KA': 106,
    'KC': 202,
    'KD': 101,
    'KE': 56,
    'KF': 102,
    'KG': 127,
    'KH': 32,
    'KI': 102,
    'KK': 0,
    'KL': 107,
    'KM': 95,
    'KN': 94,
    'KP': 103,
    'KQ': 53,
    'KR': 26,
    'KS': 121,
    'KT': 78,
    'KV': 97,
    'KW': 110,
    'KY': 85,
    'LA': 96,
    'LC': 198,
    'LD': 172,
    'LE': 138,
    'LF': 22,
    'LG': 138,
    'LH': 99,
    'LI': 5,
    'LK': 107,
    'LL': 0,
    'LM': 15,
    'LN': 153,
    'LP': 98,
    'LQ': 113,
    'LR': 102,
    'LS': 145,
    'LT': 92,
    'LV': 32,
    'LW': 61,
    'LY': 36,
    'MA': 84,
    'MC': 196,
    'MD': 160,
    'ME': 126,
    'MF': 28,
    'MG': 127,
    'MH': 87,
    'MI': 10,
    'MK': 95,
    'ML': 15,
    'MM': 0,
    'MN': 142,
    'MP': 87,
    'MQ': 101,
    'MR': 91,
    'MS': 135,
    'MT': 81,
    'MV': 21,
    'MW': 67,
    'MY': 36,
    'NA': 111,
    'NC': 139,
    'ND': 23,
    'NE': 42,
    'NF': 158,
    'NG': 80,
    'NH': 68,
    'NI': 149,
    'NK': 94,
    'NL': 153,
    'NM': 142,
    'NN': 0,
    'NP': 91,
    'NQ': 46,
    'NR': 86,
    'NS': 46,
    'NT': 65,
    'NV': 133,
    'NW': 174,
    'NY': 143,
    'PA': 27,
    'PC': 169,
    'PD': 108,
    'PE': 93,
    'PF': 114,
    'PG': 42,
    'PH': 77,
    'PI': 95,
    'PK': 103,
    'PL': 98,
    'PM': 87,
    'PN': 91,
    'PP': 0,
    'PQ': 76,
    'PR': 103,
    'PS': 74,
    'PT': 38,
    'PV': 68,
    'PW': 147,
    'PY': 110,
    'QA': 91,
    'QC': 154,
    'QD': 61,
    'QE': 29,
    'QF': 116,
    'QG': 87,
    'QH': 24,
    'QI': 109,
    'QK': 53,
    'QL': 113,
    'QM': 101,
    'QN': 46,
    'QP': 76,
    'QQ': 0,
    'QR': 43,
    'QS': 68,
    'QT': 42,
    'QV': 96,
    'QW': 130,
    'QY': 99,
    'RA': 112,
    'RC': 180,
    'RD': 96,
    'RE': 54,
    'RF': 97,
    'RG': 125,
    'RH': 29,
    'RI': 97,
    'RK': 26,
    'RL': 102,
    'RM': 91,
    'RN': 86,
    'RP': 103,
    'RQ': 43,
    'RR': 0,
    'RS': 110,
    'RT': 71,
    'RV': 96,
    'RW': 101,
    'RY': 77,
    'SA': 99,
    'SC': 112,
    'SD': 65,
    'SE': 80,
    'SF': 155,
    'SG': 56,
    'SH': 89,
    'SI': 142,
    'SK': 121,
    'SL': 145,
    'SM': 135,
    'SN': 46,
    'SP': 74,
    'SQ': 68,
    'SR': 110,
    'SS': 0,
    'ST': 58,
    'SV': 124,
    'SW': 177,
    'SY': 144,
    'TA': 58,
    'TC': 149,
    'TD': 85,
    'TE': 65,
    'TF': 103,
    'TG': 59,
    'TH': 47,
    'TI': 89,
    'TK': 78,
    'TL': 92,
    'TM': 81,
    'TN': 65,
    'TP': 38,
    'TQ': 42,
    'TR': 71,
    'TS': 58,
    'TT': 0,
    'TV': 69,
    'TW': 128,
    'TY': 92,
    'VA': 64,
    'VC': 192,
    'VD': 152,
    'VE': 121,
    'VF': 50,
    'VG': 109,
    'VH': 84,
    'VI': 29,
    'VK': 97,
    'VL': 32,
    'VM': 21,
    'VN': 133,
    'VP': 68,
    'VQ': 96,
    'VR': 96,
    'VS': 124,
    'VT': 69,
    'VV': 0,
    'VW': 88,
    'VY': 55,
    'WA': 148,
    'WC': 215,
    'WD': 181,
    'WE': 152,
    'WF': 40,
    'WG': 184,
    'WH': 115,
    'WI': 61,
    'WK': 110,
    'WL': 61,
    'WM': 67,
    'WN': 174,
    'WP': 147,
    'WQ': 130,
    'WR': 101,
    'WS': 177,
    'WT': 128,
    'WV': 88,
    'WW': 0,
    'WY': 37,
    'YA': 112,
    'YC': 194,
    'YD': 160,
    'YE': 122,
    'YF': 22,
    'YG': 147,
    'YH': 83,
    'YI': 33,
    'YK': 85,
    'YL': 36,
    'YM': 36,
    'YN': 143,
    'YP': 110,
    'YQ': 99,
    'YR': 77,
    'YS': 144,
    'YT': 92,
    'YV': 55,
    'YW': 37,
    'YY': 0,
    }
NORMALIZED_GRANTHAM_DISTANCE = {
    'AA': 0.0,
    'AC': 0.9069767,
    'AD': 0.5860465,
    'AE': 0.4976744,
    'AF': 0.5255814,
    'AG': 0.2790698,
    'AH': 0.4,
    'AI': 0.4372093,
    'AK': 0.4930233,
    'AL': 0.4465116,
    'AM': 0.3906977,
    'AN': 0.5162791,
    'AP': 0.1255814,
    'AQ': 0.4232558,
    'AR': 0.5209302,
    'AS': 0.4604651,
    'AT': 0.2697674,
    'AV': 0.2976744,
    'AW': 0.6883721,
    'AY': 0.5209302,
    'CA': 0.9069767,
    'CC': 0.0,
    'CD': 0.7162791,
    'CE': 0.7906977,
    'CF': 0.9534884,
    'CG': 0.7395349,
    'CH': 0.8093023,
    'CI': 0.9209302,
    'CK': 0.9395349,
    'CL': 0.9209302,
    'CM': 0.9116279,
    'CN': 0.6465116,
    'CP': 0.7860465,
    'CQ': 0.7162791,
    'CR': 0.8372093,
    'CS': 0.5209302,
    'CT': 0.6930233,
    'CV': 0.8930233,
    'CW': 1.0,
    'CY': 0.9023256,
    'DA': 0.5860465,
    'DC': 0.7162791,
    'DD': 0.0,
    'DE': 0.2093023,
    'DF': 0.8232558,
    'DG': 0.4372093,
    'DH': 0.3767442,
    'DI': 0.7813953,
    'DK': 0.4697674,
    'DL': 0.8,
    'DM': 0.744186,
    'DN': 0.1069767,
    'DP': 0.5023256,
    'DQ': 0.2837209,
    'DR': 0.4465116,
    'DS': 0.3023256,
    'DT': 0.3953488,
    'DV': 0.7069767,
    'DW': 0.8418605,
    'DY': 0.744186,
    'EA': 0.4976744,
    'EC': 0.7906977,
    'ED': 0.2093023,
    'EE': 0.0,
    'EF': 0.6511628,
    'EG': 0.455814,
    'EH': 0.1860465,
    'EI': 0.6232558,
    'EK': 0.2604651,
    'EL': 0.6418605,
    'EM': 0.5860465,
    'EN': 0.1953488,
    'EP': 0.4325581,
    'EQ': 0.1348837,
    'ER': 0.2511628,
    'ES': 0.372093,
    'ET': 0.3023256,
    'EV': 0.5627907,
    'EW': 0.7069767,
    'EY': 0.5674419,
    'FA': 0.5255814,
    'FC': 0.9534884,
    'FD': 0.8232558,
    'FE': 0.6511628,
    'FF': 0.0,
    'FG': 0.7116279,
    'FH': 0.4651163,
    'FI': 0.0976744,
    'FK': 0.4744186,
    'FL': 0.1023256,
    'FM': 0.1302326,
    'FN': 0.7348837,
    'FP': 0.5302326,
    'FQ': 0.5395349,
    'FR': 0.4511628,
    'FS': 0.7209302,
    'FT': 0.4790698,
    'FV': 0.2325581,
    'FW': 0.1860465,
    'FY': 0.1023256,
    'GA': 0.2790698,
    'GC': 0.7395349,
    'GD': 0.4372093,
    'GE': 0.455814,
    'GF': 0.7116279,
    'GG': 0.0,
    'GH': 0.455814,
    'GI': 0.627907,
    'GK': 0.5906977,
    'GL': 0.6418605,
    'GM': 0.5906977,
    'GN': 0.372093,
    'GP': 0.1953488,
    'GQ': 0.4046512,
    'GR': 0.5813953,
    'GS': 0.2604651,
    'GT': 0.2744186,
    'GV': 0.5069767,
    'GW': 0.855814,
    'GY': 0.6837209,
    'HA': 0.4,
    'HC': 0.8093023,
    'HD': 0.3767442,
    'HE': 0.1860465,
    'HF': 0.4651163,
    'HG': 0.455814,
    'HH': 0.0,
    'HI': 0.4372093,
    'HK': 0.1488372,
    'HL': 0.4604651,
    'HM': 0.4046512,
    'HN': 0.3162791,
    'HP': 0.3581395,
    'HQ': 0.1116279,
    'HR': 0.1348837,
    'HS': 0.4139535,
    'HT': 0.2186047,
    'HV': 0.3906977,
    'HW': 0.5348837,
    'HY': 0.3860465,
    'IA': 0.4372093,
    'IC': 0.9209302,
    'ID': 0.7813953,
    'IE': 0.6232558,
    'IF': 0.0976744,
    'IG': 0.627907,
    'IH': 0.4372093,
    'II': 0.0,
    'IK': 0.4744186,
    'IL': 0.0232558,
    'IM': 0.0465116,
    'IN': 0.6930233,
    'IP': 0.4418605,
    'IQ': 0.5069767,
    'IR': 0.4511628,
    'IS': 0.6604651,
    'IT': 0.4139535,
    'IV': 0.1348837,
    'IW': 0.2837209,
    'IY': 0.1534884,
    'KA': 0.4930233,
    'KC': 0.9395349,
    'KD': 0.4697674,
    'KE': 0.2604651,
    'KF': 0.4744186,
    'KG': 0.5906977,
    'KH': 0.1488372,
    'KI': 0.4744186,
    'KK': 0.0,
    'KL': 0.4976744,
    'KM': 0.4418605,
    'KN': 0.4372093,
    'KP': 0.4790698,
    'KQ': 0.2465116,
    'KR': 0.1209302,
    'KS': 0.5627907,
    'KT': 0.3627907,
    'KV': 0.4511628,
    'KW': 0.5116279,
    'KY': 0.3953488,
    'LA': 0.4465116,
    'LC': 0.9209302,
    'LD': 0.8,
    'LE': 0.6418605,
    'LF': 0.1023256,
    'LG': 0.6418605,
    'LH': 0.4604651,
    'LI': 0.0232558,
    'LK': 0.4976744,
    'LL': 0.0,
    'LM': 0.0697674,
    'LN': 0.7116279,
    'LP': 0.455814,
    'LQ': 0.5255814,
    'LR': 0.4744186,
    'LS': 0.6744186,
    'LT': 0.427907,
    'LV': 0.1488372,
    'LW': 0.2837209,
    'LY': 0.1674419,
    'MA': 0.3906977,
    'MC': 0.9116279,
    'MD': 0.744186,
    'ME': 0.5860465,
    'MF': 0.1302326,
    'MG': 0.5906977,
    'MH': 0.4046512,
    'MI': 0.0465116,
    'MK': 0.4418605,
    'ML': 0.0697674,
    'MM': 0.0,
    'MN': 0.6604651,
    'MP': 0.4046512,
    'MQ': 0.4697674,
    'MR': 0.4232558,
    'MS': 0.627907,
    'MT': 0.3767442,
    'MV': 0.0976744,
    'MW': 0.3116279,
    'MY': 0.1674419,
    'NA': 0.5162791,
    'NC': 0.6465116,
    'ND': 0.1069767,
    'NE': 0.1953488,
    'NF': 0.7348837,
    'NG': 0.372093,
    'NH': 0.3162791,
    'NI': 0.6930233,
    'NK': 0.4372093,
    'NL': 0.7116279,
    'NM': 0.6604651,
    'NN': 0.0,
    'NP': 0.4232558,
    'NQ': 0.2139535,
    'NR': 0.4,
    'NS': 0.2139535,
    'NT': 0.3023256,
    'NV': 0.6186047,
    'NW': 0.8093023,
    'NY': 0.6651163,
    'PA': 0.1255814,
    'PC': 0.7860465,
    'PD': 0.5023256,
    'PE': 0.4325581,
    'PF': 0.5302326,
    'PG': 0.1953488,
    'PH': 0.3581395,
    'PI': 0.4418605,
    'PK': 0.4790698,
    'PL': 0.455814,
    'PM': 0.4046512,
    'PN': 0.4232558,
    'PP': 0.0,
    'PQ': 0.3534884,
    'PR': 0.4790698,
    'PS': 0.344186,
    'PT': 0.1767442,
    'PV': 0.3162791,
    'PW': 0.6837209,
    'PY': 0.5116279,
    'QA': 0.4232558,
    'QC': 0.7162791,
    'QD': 0.2837209,
    'QE': 0.1348837,
    'QF': 0.5395349,
    'QG': 0.4046512,
    'QH': 0.1116279,
    'QI': 0.5069767,
    'QK': 0.2465116,
    'QL': 0.5255814,
    'QM': 0.4697674,
    'QN': 0.2139535,
    'QP': 0.3534884,
    'QQ': 0.0,
    'QR': 0.2,
    'QS': 0.3162791,
    'QT': 0.1953488,
    'QV': 0.4465116,
    'QW': 0.6046512,
    'QY': 0.4604651,
    'RA': 0.5209302,
    'RC': 0.8372093,
    'RD': 0.4465116,
    'RE': 0.2511628,
    'RF': 0.4511628,
    'RG': 0.5813953,
    'RH': 0.1348837,
    'RI': 0.4511628,
    'RK': 0.1209302,
    'RL': 0.4744186,
    'RM': 0.4232558,
    'RN': 0.4,
    'RP': 0.4790698,
    'RQ': 0.2,
    'RR': 0.0,
    'RS': 0.5116279,
    'RT': 0.3302326,
    'RV': 0.4465116,
    'RW': 0.4697674,
    'RY': 0.3581395,
    'SA': 0.4604651,
    'SC': 0.5209302,
    'SD': 0.3023256,
    'SE': 0.372093,
    'SF': 0.7209302,
    'SG': 0.2604651,
    'SH': 0.4139535,
    'SI': 0.6604651,
    'SK': 0.5627907,
    'SL': 0.6744186,
    'SM': 0.627907,
    'SN': 0.2139535,
    'SP': 0.344186,
    'SQ': 0.3162791,
    'SR': 0.5116279,
    'SS': 0.0,
    'ST': 0.2697674,
    'SV': 0.5767442,
    'SW': 0.8232558,
    'SY': 0.6697674,
    'TA': 0.2697674,
    'TC': 0.6930233,
    'TD': 0.3953488,
    'TE': 0.3023256,
    'TF': 0.4790698,
    'TG': 0.2744186,
    'TH': 0.2186047,
    'TI': 0.4139535,
    'TK': 0.3627907,
    'TL': 0.427907,
    'TM': 0.3767442,
    'TN': 0.3023256,
    'TP': 0.1767442,
    'TQ': 0.1953488,
    'TR': 0.3302326,
    'TS': 0.2697674,
    'TT': 0.0,
    'TV': 0.3209302,
    'TW': 0.5953488,
    'TY': 0.427907,
    'VA': 0.2976744,
    'VC': 0.8930233,
    'VD': 0.7069767,
    'VE': 0.5627907,
    'VF': 0.2325581,
    'VG': 0.5069767,
    'VH': 0.3906977,
    'VI': 0.1348837,
    'VK': 0.4511628,
    'VL': 0.1488372,
    'VM': 0.0976744,
    'VN': 0.6186047,
    'VP': 0.3162791,
    'VQ': 0.4465116,
    'VR': 0.4465116,
    'VS': 0.5767442,
    'VT': 0.3209302,
    'VV': 0.0,
    'VW': 0.4093023,
    'VY': 0.255814,
    'WA': 0.6883721,
    'WC': 1.0,
    'WD': 0.8418605,
    'WE': 0.7069767,
    'WF': 0.1860465,
    'WG': 0.855814,
    'WH': 0.5348837,
    'WI': 0.2837209,
    'WK': 0.5116279,
    'WL': 0.2837209,
    'WM': 0.3116279,
    'WN': 0.8093023,
    'WP': 0.6837209,
    'WQ': 0.6046512,
    'WR': 0.4697674,
    'WS': 0.8232558,
    'WT': 0.5953488,
    'WV': 0.4093023,
    'WW': 0.0,
    'WY': 0.172093,
    'YA': 0.5209302,
    'YC': 0.9023256,
    'YD': 0.744186,
    'YE': 0.5674419,
    'YF': 0.1023256,
    'YG': 0.6837209,
    'YH': 0.3860465,
    'YI': 0.1534884,
    'YK': 0.3953488,
    'YL': 0.1674419,
    'YM': 0.1674419,
    'YN': 0.6651163,
    'YP': 0.5116279,
    'YQ': 0.4604651,
    'YR': 0.3581395,
    'YS': 0.6697674,
    'YT': 0.427907,
    'YV': 0.255814,
    'YW': 0.172093,
    'YY': 0.0,
    }
__AA_PAIRS__ = [A1 + A2 for A1 in __AA_LETTERS__ for A2 in __AA_LETTERS__]
__TRI_GRAMS__ = [ PAIR+AA for PAIR in __AA_PAIRS__ for AA in __AA_LETTERS__ ]
PSFM_NORM_T = pd.read_excel(PSFM_NORM_FILE_PATH,sheet_name='A') #load excel data into DataFrame
CONJOINT_TRIAD_GROUP = {
    '1':'AGV',
    '2':'ILFP',
    '3':'YMTS',
    '4':'HNQW',
    '5':'RK',
    '6':'DE',
    '7':'C'
}

def _mean(listvalue):
    """
    ########################################################################################
    The mean value of the list data.

    Usage:

    result=_mean(listvalue)
    ########################################################################################
    """
    return sum(listvalue) / len(listvalue)


##############################################################################################
def _std(listvalue, ddof=1):
    """
    ########################################################################################
    The standard deviation of the list data.

    Usage:

    result=_std(listvalue)
    ########################################################################################
    """
    mean = _mean(listvalue)
    temp = [math.pow(i - mean, 2) for i in listvalue]
    res = math.sqrt(sum(temp) / (len(listvalue) - ddof))
    return res
STANDARDIZED_GRANTHAM_DISTANCE = {}
STD_GRAN = _std(GRANTHAM_DISTANCE.values())
MEAN_GRAN = _mean(GRANTHAM_DISTANCE.values())
for aap,value in GRANTHAM_DISTANCE.items():
    STANDARDIZED_GRANTHAM_DISTANCE[aap] = (value-MEAN_GRAN)/STD_GRAN
STANDARDIZED_SW_DISTANCE = {}
STD_SW = _std(SCHNEIDER_WREDE_DISTANCE.values())
MEAN_SW = _mean(SCHNEIDER_WREDE_DISTANCE.values())
for aap,value in SCHNEIDER_WREDE_DISTANCE.items():
    STANDARDIZED_SW_DISTANCE[aap] = (value-MEAN_SW)/STD_SW

def GetPDB186Seq():
    TRAIN_FILE_PATH = os.path.join(DB_DIR, 'PDB186.txt')
    with open(TRAIN_FILE_PATH) as f:
        Sequences = []
        seq_id = ''
        label_part = None
        for index, line in enumerate(f):
            line = line.strip()
            if line[0] == '>':
                id_parts = line.split('|')
                seq_id = id_parts[0][1:]
                label_part = int(id_parts[1])
                if label_part == 2:
                    label_part = 0
            else:

                try:
                    MajorityAminoAcid = AALetter[np.random.randint(0,len(AALetter))]
                    MaxCount = 0
                    for aa in AALetter:
                        CCount = line.count(aa)
                        if CCount > MaxCount:
                            MaxCount = CCount
                            MajorityAminoAcid = aa
                    line = ''.join([AA if AA in AALetter else MajorityAminoAcid for AA in line])
                    SeqDict = {'seq': line, 'id': seq_id, 'class': label_part}
                    Sequences.append(SeqDict)

                except Exception as err:
                    print("Error: {0}".format(err))
                    print("SeqID:{0}".format(seq_id))
                    print("Seq:{0}".format(line))
        return Sequences
def GetPDB1075Seq(Refined=False):
    if Refined == True:
        TRAIN_FILE_PATH = os.path.join(DB_DIR,'RemovedPDB1075.txt')
    else:
        TRAIN_FILE_PATH = os.path.join(DB_DIR,'X_REMOVED_PDB1075.txt')
    with open(TRAIN_FILE_PATH) as f:
        Sequences = []
        seq_id = ''
        label_part = None
        for index, line in enumerate(f):
            line = line.strip()
            if line[0] == '>':
                id_parts = line.split('|')
                seq_id = id_parts[0][1:]
                label_part = int(id_parts[1])
                if label_part == 2:
                    label_part = 0
            else:

                try:
                    MajorityAminoAcid = AALetter[np.random.randint(0,len(AALetter))]
                    MaxCount = 0
                    for aa in AALetter:
                        CCount = line.count(aa)
                        if CCount > MaxCount:
                            MaxCount = CCount
                            MajorityAminoAcid = aa
                    line = ''.join([AA if AA in AALetter else MajorityAminoAcid for AA in line])
                    SeqDict = {'seq': line, 'id': seq_id, 'class': label_part}
                    Sequences.append(SeqDict)

                except Exception as err:
                    print("Error: {0}".format(err))
                    print("SeqID:{0}".format(seq_id))
                    print("Seq:{0}".format(line))
        return Sequences

def GetNRPDB1075Seq():

    TRAIN_FILE_PATH = os.path.join(DB_DIR, 'NRPDB1075.txt')

    with open(TRAIN_FILE_PATH) as f:
        Sequences = []
        seq_id = ''
        label_part = None
        for index, line in enumerate(f):
            line = line.strip()
            if line[0] == '>':
                id_parts = line.split('|')
                seq_id = id_parts[0][1:]
                label_part = int(id_parts[1])
                if label_part == 2:
                    label_part = 0
            else:

                try:
                    MajorityAminoAcid = AALetter[np.random.randint(0,len(AALetter))]
                    MaxCount = 0
                    for aa in AALetter:
                        CCount = line.count(aa)
                        if CCount > MaxCount:
                            MaxCount = CCount
                            MajorityAminoAcid = aa
                    line = ''.join([AA if AA in AALetter else MajorityAminoAcid for AA in line])
                    SeqDict = {'seq': line, 'id': seq_id, 'class': label_part}
                    Sequences.append(SeqDict)

                except Exception as err:
                    print("Error: {0}".format(err))
                    print("SeqID:{0}".format(seq_id))
                    print("Seq:{0}".format(line))
        return Sequences
def NGRAM_STAS(ProteinSequence,N=3):
    __results__ ={}
    terms = GenPermutation(N)
    for term in terms:
        __results__[term] = ProteinSequence.count(term)
    return __results__
def NGRAM_STAS_FROM_SEQ(N=3):
    SeqDictRaw = GetPDB1075Seq(Refined=True)
    STATS = {}
    for index, SeqDict in enumerate(SeqDictRaw):
        Seq = SeqDict['seq']
        SeqID = SeqDict['id']
        SeqClass = SeqDict['class']
        SeqStas = NGRAM_STAS(Seq,N)
        CKeys = STATS.keys()
        for key,value in SeqStas.items():
            if key in CKeys:
                STATS[key] += value
            else:
                STATS[key] = value
    return STATS
def GetTrigram(ProteinSequence,residues=25,terms=[],Reverse=False):
    ProteinSequence = ''.join([AA for AA in ProteinSequence if AA in __AA_LETTERS__])
    if Reverse:
        ProteinSequence = ProteinSequence[::-1]
        ProteinSequence = ProteinSequence[:residues] if residues < len(ProteinSequence) else ProteinSequence
        ProteinSequence = ProteinSequence[::-1]
    else:
        ProteinSequence = ProteinSequence[:residues] if residues < len(ProteinSequence) else ProteinSequence
    Result = {}
    for AAP in terms:
        Result[AAP] = 0
    for aap in terms:
        Count = ProteinSequence.count(aap)
        Result[aap] = 1 if Count > 0 else 0
    return Result
def GetBestRecallTrigramFeature(ProteinSequence):
    ProteinSequence = ''.join([AA for AA in ProteinSequence if AA in __AA_LETTERS__])
    residues = 275
    ProteinSequence = ProteinSequence[:residues] if residues < len(ProteinSequence) else ProteinSequence
    Result = {}
    for term in BEST_RECALL_ONOFF_TRIGRAM:
        Count = ProteinSequence.count(term)
        Result['rec_'+term] = 1 if Count > 0 else 0
    return Result
def GetBestSPECTrigramFeature(ProteinSequence):
    ProteinSequence = ''.join([AA for AA in ProteinSequence if AA in __AA_LETTERS__])
    residues = 50
    ProteinSequence = ProteinSequence[:residues] if residues < len(ProteinSequence) else ProteinSequence
    Result = {}
    # for term in BEST_SPECIFICITY_ONOFF_TRIGRAM:
    #     Result[term] = 0
    for term in BEST_SPECIFICITY_ONOFF_TRIGRAM:
        Count = ProteinSequence.count(term)
        Result['spec_'+term] = 1 if Count > 0 else 0
    return Result

def GetKNNExist(ProteinSequence,residues=25):
    ProteinSequence = ''.join([AA for AA in ProteinSequence if AA in __AA_LETTERS__])
    ProteinSequence = ProteinSequence[:residues] if residues < len(ProteinSequence) else ProteinSequence

    Result = {}
    for AAP in __AA_PAIRS__:
        Result['k'.join(AAP)] = 0
    for AA_1st in __AA_LETTERS__:

        try:
            __fst_index__ = ProteinSequence.index(AA_1st)
            for AA_2nd in __AA_LETTERS__:

                try:
                        try:
                            __second_index__ = ProteinSequence.index(AA_2nd, __fst_index__ + 1)
                            Result[AA_1st + 'k' + AA_2nd] = 1
                            __temp_index__ = __second_index__
                        except Exception as Err:
                            pass
                            # print('Inner Except:',Err)
                except Exception as Err:
                    pass
                    # print('Outer Exception:',Err)
        except Exception as Err:
            pass
    return Result
def GenPermutation(N):
    if N == 1 or N == 0 or N < 0:
        return __AA_LETTERS__
    else:
        return [aa+term for aa in __AA_LETTERS__ for term in GenPermutation(N-1)]
def GetNGram(ProteinSequence,N=3):
    Result = {}
    ProteinSequence = ''.join([AA for AA in ProteinSequence if AA in __AA_LETTERS__])
    for ng in range(1,N+1):
        terms = GenPermutation(ng)
        TRS = {term:0 for term in terms}
        L = len(ProteinSequence)
        TI = L-ng+1
        for i in range(TI):
            term = ProteinSequence[i:i+ng]
            TRS[term] += 1
        for term in terms:
            Result['NG_'+term] = round(TRS[term]/TI,5)
    return Result
def GetPercentileNGram(ProteinSequence, Percents= [10,20,30,40,50,60,70,80,90,100] ):
    TL = len(ProteinSequence)
    Result = {}
    for P in Percents:
        PL = ( TL * P )//100
        TempSeq = ProteinSequence[:PL]
        rs = GetNGram(ProteinSequence=TempSeq, N=2)
        for key in rs.keys():
          Result['P'+str(P)+'_'+key] = rs[key]
    return Result
def GetPSNGram(ProteinSequence,first_n_pos=10):
    Result = {}
    ProteinSequence = ''.join([AA for AA in ProteinSequence if AA in __AA_LETTERS__])
    TGS = BEST_SPECIFICITY_ONOFF_TRIGRAM[:100]
    # TGR = BEST_RECALL_ONOFF_TRIGRAM[::-1]
    Result = {'PS_'+str(pos+1)+'_'+AC:0 for pos in range(first_n_pos) for AC in __AA_LETTERS__}
    Result.update({'PS_'+str(pos+1)+'_'+AC:0 for pos in range(first_n_pos) for AC in __AA_PAIRS__})
    Result.update({'PS_'+str(pos+1)+'_'+AC:0 for pos in range(first_n_pos) for AC in TGS})
    # Result.update({'PS_'+str(pos+1)+'_'+AC:0 for pos in range(first_n_pos) for AC in TGR})
    # for pos in range(first_n_pos):
    #     Result['PSM_'+str(pos+1)] = 0
    # for pos in range(first_n_pos):
    #     Result['PSB_' + str(pos + 1)] = 0
    L = len(ProteinSequence)
    MinPos = min([first_n_pos,L])

    for i in range(MinPos):
        term = ProteinSequence[i]
        Result['PS_'+str(i+1)+'_'+term] = 1
    for i in range(MinPos-1):
        term = ProteinSequence[i:i + 2]
        Result['PS_' + str(i + 1)+'_'+term] = 1
    for i in range(MinPos-2):
        term = ProteinSequence[i:i+3]
        if term in TGS:
            Result['PS_'+str(i+1)+'_'+term] = 1
        # if term in TGR:
        #     Result['PS_' + str(i + 1) + '_' + term] = 1
    return Result
def GetNGramOnOFFRange(ProteinSequence,Terms,F_N_R=50):
    Result = {}
    ProteinSequence = ''.join([AA for AA in ProteinSequence if AA in __AA_LETTERS__])
    ProteinSequence = ProteinSequence[:F_N_R] if F_N_R < len(ProteinSequence) else ProteinSequence
    for term in Terms:
        Result[term] = 0
    for term in Terms:
        Count = ProteinSequence.count(term)
        Result[term] = 1 if Count > 0 else 0
    return Result
def GetConJointTriad(ProteinSequence):

    TProteinSequence = ''.join([AA for AA in ProteinSequence if AA in __AA_LETTERS__])

    for k,item in CONJOINT_TRIAD_GROUP.items():
        for AA in item:
            TProteinSequence = TProteinSequence.replace(AA,k)
    groups = CONJOINT_TRIAD_GROUP.keys()
    Result = {'CT_'+(f+s+t): 0 for f in groups for s in groups for t in groups}
    L = len(TProteinSequence)
    N = 3
    for i in range(L-N+1):
        triad = TProteinSequence[i:i+N]
        Result['CT_' +triad] += 1
    V = Result.values()
    Min = min(V)
    Max = max(V)
    if Max == 0:
        Max = 1
    for key,value in Result.items():
        Result[key] = round(float((value - Min)/Max),5)
    return Result
def GetNGramOnOFF(ProteinSequence):
    Result = {}
    ProteinSequence = ''.join([AA for AA in ProteinSequence if AA in __AA_LETTERS__])
    #residues = 275
    # residues = 512
    # #ProteinSequence = ProteinSequence[:residues] if residues < len(ProteinSequence) else ProteinSequence
    # ProteinSequenceLow = ProteinSequence[:residues] if residues < len(ProteinSequence) else ProteinSequence
    # #terms = GenPermutation(N)
    # LOW_FREQ_TERMS = FOUR_GRAM_LFEAT
    # LOW_FREQ_TERM_NUM = 256
    # for term in LOW_FREQ_TERMS[:LOW_FREQ_TERM_NUM]:
    #     Result[term] = 0
    # L = len(ProteinSequenceLow)
    # N = 4
    # for i in range(L-N+1):
    #     if ProteinSequenceLow[i:i+N] in LOW_FREQ_TERMS[:LOW_FREQ_TERM_NUM]:
    #         Result[ProteinSequenceLow[i:i+N]] = 1


    # HIGH_FREQ_TERM_NUM = 2048
    # residues = 2048
    # ProteinSequenceHigh = ProteinSequence[:residues] if residues < len(ProteinSequence) else ProteinSequence
    # L = len(ProteinSequenceHigh)
    # N = 4
    # for term in FOUR_GRAM_FEAT[:HIGH_FREQ_TERM_NUM]:
    #     Result[term] = 0
    # for i in range(L - N + 1):
    #     if ProteinSequenceHigh[i:i + N] in FOUR_GRAM_FEAT[:HIGH_FREQ_TERM_NUM]:
    #         Result[ProteinSequenceHigh[i:i + N]] = 1

    residues = 275
    ProteinSequence = ProteinSequence[:residues] if residues < len(ProteinSequence) else ProteinSequence
    L = len(ProteinSequence)
    N = 4
    for term in BEST_FOUR_GRAM_RECALL_FEAT_32kTo33k:
        Result[term] = 0
    for i in range(L-N+1):
        term = ProteinSequence[i:i + N]
        if term in BEST_FOUR_GRAM_RECALL_FEAT_32kTo33k:
            Result[term] = 1

    for term in BEST_FOUR_GRAM_SPEC_FEAT_63kTo64k:
        Result[term] = 0
    for i in range(L-N+1):
        term = ProteinSequence[i:i + N]
        if term in BEST_FOUR_GRAM_SPEC_FEAT_63kTo64k:
            Result[term] = 1

    # for term in BEST_FOUR_GRAM_RECALL_FEAT:
    #     Count = ProteinSequence.count(term)
    #     if Count > 0:
    #         Result[term] = 1
    #     else:
    #         Result[term] = 0
    return Result
def GetNGramFromSplit(ProteinSequence,split=3):
    L = len(ProteinSequence)
    EPL = math.floor(L / split) #even part length
    Result = {}
    start_index = 0
    for s in range(split - 1):
        temp_seq = ProteinSequence[start_index:start_index + EPL]
        start_index += EPL
        for n in range(2):
            Result.update(GetNGram(temp_seq, N=n+1, split=s + 1))
    temp_seq = ProteinSequence[start_index:L]
    for n in range(2):
        Result.update(GetNGram(temp_seq, N=n+1, split=split))
    return Result
def GetGappedBigram(ProteinSequence, gap=5):
    ProteinSequence = ''.join([AA if AA in __AA_LETTERS__ else __AA_LETTERS__[0] for AA in ProteinSequence])
    ProteinSequence = ProteinSequence.strip()
    if gap < 1:
        print('Gap parameter must be at least one.')
        return {}
    Result = {}
    L = len(ProteinSequence)
    for g in range(1, gap + 1):
        OccurenceDict = {}
        for pair in __AA_PAIRS__:
            OccurenceDict[pair] = 0
        #sum = 0
        TI = L - g - 1 # Total Iteration
        for i in range(0,TI):
            # start to stop-1, stop is non-inclusive
            j = i + g + 1
            if i < L and j < L:
                aap = ProteinSequence[i] + ProteinSequence[j]
                OccurenceDict[aap] = OccurenceDict[aap] + 1
                #sum = sum + 1
        for pair in __AA_PAIRS__:
            Result['g_' + str(g)+'_'+pair] = round(OccurenceDict[pair] / TI,5)

    return Result
def GetAAC(ProteinSequence):
    ProteinSequence = ''.join([AA for AA in ProteinSequence if AA in __AA_LETTERS__])
    LengthSequence = len(ProteinSequence)
    Result = {}
    for i in __AA_LETTERS__:
        Result[i] = round(ProteinSequence.count(i)/LengthSequence,5)

    # Result = sorted(Result.items(),key=lambda x: x[0])
    return Result
def GetKNN(ProteinSequence,k=18):
    ProteinSequence = ''.join([AA for AA in ProteinSequence if AA in __AA_LETTERS__])
    __NORMALIZED_TERM__ = len(ProteinSequence)
    #__NORMALIZED_TERM__ = math.sqrt(__NORMALIZED_TERM__)
    Result = {}
    for nn in range(1, k + 1):
        for AAP in __AA_PAIRS__:
            Result[('d'+str(nn)).join(AAP)] = 0.0
    for AA_1st in __AA_LETTERS__:

        try:
            __fst_index__ = ProteinSequence.index(AA_1st)
            for AA_2nd in __AA_LETTERS__:

                try:
                    __temp_index__ = __fst_index__
                    for nn in range(1, k + 1):
                        try:
                            __second_index__ = ProteinSequence.index(AA_2nd, __temp_index__ + 1)
                            __distance__ = __second_index__ - __fst_index__
                            # Result[AA_1st + '-k' + str(nn) + 'n-' + AA_2nd] = round(((__distance__/__NORMALIZED_TERM__)*100),2) if __NORMALIZED_TERM__ != 0 else 0
                            #Result[AA_1st + 'd' + str(nn) + AA_2nd] = round(__distance__/__NORMALIZED_TERM__,15)
                            Result[AA_1st + 'd' + str(nn) + AA_2nd] = round(__distance__/__NORMALIZED_TERM__,15)
                            __temp_index__ = __second_index__
                        except Exception as Err:
                            pass
                            # print('Inner Except:',Err)
                except Exception as Err:
                    pass
                    # print('Outer Exception:',Err)
        except Exception as Err:
            pass
    return Result
def GetPSW(ProteinSequence):
    #Number of descriptor is equal to number of position in the PSFM
    ProteinSequence = ''.join([AA for AA in ProteinSequence if AA in __AA_LETTERS__])
    LengthSequence = len(ProteinSequence)
    Result = {}
    Result = {'Pos'+str(pos): 0.0 for pos in range(len(PSFM_NORM_T.index))}
    for pos,Residue in enumerate(ProteinSequence):
        Result['Pos'+str(pos)] = PSFM_NORM_T.at[pos,Residue]

    #Result = sorted(Result.items(),key=lambda x: x[0])
    return Result
def GetQSOCouplingNumber(ProteinSequence, d=1, DistanceMatrix={}):
    L = len(ProteinSequence)
    tau = 0.0
    for i in range(L - d):
        temp1 = ProteinSequence[i]
        temp2 = ProteinSequence[i + d]
        tau = tau + math.pow(DistanceMatrix[temp1 + temp2], 2)
    return round(tau, 7)

def GetQSOGran(ProteinSequence,maxlag=30,weight=0.1):
    ProteinSequence = ''.join([AA for AA in ProteinSequence if AA in __AA_LETTERS__])
    rightpart = []
    for i in range(maxlag):
        rightpart.append(GetQSOCouplingNumber(ProteinSequence, d=i + 1, DistanceMatrix=STANDARDIZED_GRANTHAM_DISTANCE))
    #AAC = GetPSMonogram(ProteinSequence)
    AAC = GetAAC(ProteinSequence)
    result = {}
    SUM_OF_AAC = sum(AAC.values())
    #temp = SUM_OF_AAC + weight * sum(rightpart)
    temp = 1 + weight * sum(rightpart)
    for index, i in enumerate(__AA_LETTERS__):
        result['QSOGran' + str(index + 1)] = round(AAC[i] / temp, 10)

    for index in range(20,20+maxlag):
        result['QSOGran' + str(index + 1)] = round((weight*rightpart[index-20])/temp,10)
    return result
    pass
def GetQSOGranPercentile(ProteinSequence,maxlag=30,weight=0.1,percent=100):
    ProteinSequence = ''.join([AA for AA in ProteinSequence if AA in __AA_LETTERS__])
    LengthSequence = len(ProteinSequence)
    RefinedLength = math.floor(LengthSequence * (percent / 100))
    ProteinSequence = ProteinSequence[0:RefinedLength]
    rightpart = []
    for i in range(maxlag):
        rightpart.append(GetQSOCouplingNumber(ProteinSequence, d=i + 1, DistanceMatrix=STANDARDIZED_GRANTHAM_DISTANCE))
    # AAC = GetPSMonogram(ProteinSequence)
    AAC = GetAAC(ProteinSequence)
    result = {}
    SUM_OF_AAC = sum(AAC.values())
    # temp = SUM_OF_AAC + weight * sum(rightpart)
    temp = 1 + weight * sum(rightpart)
    for index, i in enumerate(__AA_LETTERS__):
        result['P'+str(percent)+'QSOGran' + str(index + 1)] = round(AAC[i] / temp, 10)

    for index in range(20, 20 + maxlag):
        result['P'+str(percent)+'QSOGran' + str(index + 1)] = round((weight * rightpart[index - 20]) / temp, 10)
    return result
def GetQSOSW(ProteinSequence,maxlag=30,weight=0.1):
    ProteinSequence = ''.join([AA for AA in ProteinSequence if AA in __AA_LETTERS__])
    rightpart = []
    for i in range(maxlag):
        rightpart.append(GetQSOCouplingNumber(ProteinSequence, d=i + 1, DistanceMatrix=STANDARDIZED_SW_DISTANCE))
    #AAC = GetPSMonogram(ProteinSequence)
    AAC = GetAAC(ProteinSequence)
    result = {}
    SUM_OF_AAC = sum(AAC.values())
    #temp = SUM_OF_AAC + weight * sum(rightpart)
    temp = 1 + weight * sum(rightpart)
    for index, i in enumerate(__AA_LETTERS__):
        result['QSOSW' + str(index + 1)] = round(AAC[i] / temp, 10)

    for index in range(20,20+maxlag):
        result['QSOSW' + str(index + 1)] = round((weight*rightpart[index-20])/temp,10)
    return result
    pass
def GetQSOSWFromSplit(ProteinSequence,maxlag=30,weight=0.1,split=4):
    ProteinSequence = ''.join([AA for AA in ProteinSequence if AA in __AA_LETTERS__])
    rightpart = []
    for i in range(maxlag):
        rightpart.append(GetQSOCouplingNumber(ProteinSequence, d=i + 1, DistanceMatrix=STANDARDIZED_SW_DISTANCE))
    #AAC = GetPSMonogram(ProteinSequence)
    AAC = GetAAC(ProteinSequence)
    result = {}
    SUM_OF_AAC = sum(AAC.values())
    #temp = SUM_OF_AAC + weight * sum(rightpart)
    temp = 1 + weight * sum(rightpart)
    for index, i in enumerate(__AA_LETTERS__):
        result['S'+str(split)+'QSOSW' + str(index + 1)] = round(AAC[i] / temp, 10)

    for index in range(20,20+maxlag):
        result['S'+str(split)+'SQSOSW' + str(index + 1)] = round((weight*rightpart[index-20])/temp,10)
    return result
def GetQSOGranFromSplit(ProteinSequence,maxlag=30,weight=0.1,split=4):
    ProteinSequence = ''.join([AA for AA in ProteinSequence if AA in __AA_LETTERS__])
    rightpart = []
    for i in range(maxlag):
        rightpart.append(GetQSOCouplingNumber(ProteinSequence, d=i + 1, DistanceMatrix=STANDARDIZED_GRANTHAM_DISTANCE))
    #AAC = GetPSMonogram(ProteinSequence)
    AAC = GetAAC(ProteinSequence)
    result = {}
    SUM_OF_AAC = sum(AAC.values())
    #temp = SUM_OF_AAC + weight * sum(rightpart)
    temp = 1 + weight * sum(rightpart)
    for index, i in enumerate(__AA_LETTERS__):
        result['S'+str(split)+'QSOGran' + str(index + 1)] = round(AAC[i] / temp, 10)

    for index in range(20,20+maxlag):
        result['S'+str(split)+'QSOGran' + str(index + 1)] = round((weight*rightpart[index-20])/temp,10)
    return result
    pass
def GetQSOSWPercentile(ProteinSequence,maxlag=30,weight=0.1,percent=100):
    ProteinSequence = ''.join([AA for AA in ProteinSequence if AA in __AA_LETTERS__])

    #AAC = GetPSMonogram(ProteinSequence)
    LengthSequence = len(ProteinSequence)
    RefinedLength = math.floor(LengthSequence * (percent / 100))
    ProteinSequence = ProteinSequence[0:RefinedLength]
    rightpart = []
    for i in range(maxlag):
        rightpart.append(GetQSOCouplingNumber(ProteinSequence, d=i + 1, DistanceMatrix=STANDARDIZED_SW_DISTANCE))
    AAC = GetAAC(ProteinSequence)
    result = {}
    SUM_OF_AAC = sum(AAC.values())
    #temp = SUM_OF_AAC + weight * sum(rightpart)
    temp = 1 + weight * sum(rightpart)
    for index, i in enumerate(__AA_LETTERS__):
        result['P'+str(percent)+'QSOSW' + str(index + 1)] = round(AAC[i] / temp, 10)

    for index in range(20,20+maxlag):
        result['P'+str(percent)+'QSOSW' + str(index + 1)] = round((weight*rightpart[index-20])/temp,10)
    return result
def GetQSOFromPercentiles(ProteinSequence):

    #Separation = [15,30,45,60,75,90,100]
    Separation = np.linspace(10,100,num=10)
    fixed_weight = 0.89474
    Result = {}
    for percent in Separation:
        Result.update(GetQSOSWPercentile(ProteinSequence, maxlag=23, weight=fixed_weight, percent=percent))
        Result.update(GetQSOGranPercentile(ProteinSequence, maxlag=23, weight=fixed_weight, percent=percent))
    return Result
def GetQSOFromSplit(ProteinSequence,lag=20,split=4):
    L = len(ProteinSequence)
    EPL = math.floor(L/split)
    fixed_weight = 0.89474
    Result = {}
    start_index = 0
    # lag = 20
    for s in range(split-1):
        temp_seq = ProteinSequence[start_index:start_index+EPL]
        start_index += EPL
        Result.update(GetQSOSWFromSplit(temp_seq, maxlag=lag, weight=fixed_weight, split=s+1))
        Result.update(GetQSOGranFromSplit(temp_seq, maxlag=lag, weight=fixed_weight, split=s+1))

    temp_seq = ProteinSequence[start_index:L]
    Result.update(GetQSOSWFromSplit(temp_seq, maxlag=lag, weight=fixed_weight, split=split))
    Result.update(GetQSOGranFromSplit(temp_seq, maxlag=lag, weight=fixed_weight, split=split))
    return Result
def GetQSOTotal(ProteinSequence,maxlag=30,weight=0.1):

    result = {}
    result.update(GetQSOSW(ProteinSequence=ProteinSequence,maxlag=maxlag,weight=weight))
    result.update(GetQSOGran(ProteinSequence=ProteinSequence,maxlag=maxlag,weight=weight))
    return result
def GetPSMonogram(ProteinSequence):
    # Number of descriptor is equal to number of position in the PSFM
    ProteinSequence = ''.join([AA for AA in ProteinSequence if AA in __AA_LETTERS__])
    Result = {AA:0.0 for AA in __AA_LETTERS__}
    for pos, Residue in enumerate(ProteinSequence):
        Result[Residue] = Result[Residue] + PSFM_NORM_T.at[pos, Residue]
    return Result
def GetPSBigram(ProteinSequence):
    #Number of descriptor is equal to number of position in the PSFM
    ProteinSequence = ''.join([AA for AA in ProteinSequence if AA in __AA_LETTERS__])
    LengthSequence = len(ProteinSequence)
    Result = {AAP: 0.0 for AAP in __AA_PAIRS__}
    for pos, Residue in enumerate(ProteinSequence[:LengthSequence-1]):
        Result[Residue+ProteinSequence[pos+1]] = Result[Residue+ProteinSequence[pos+1]] + PSFM_NORM_T.at[pos, Residue] + PSFM_NORM_T.at[pos+1, ProteinSequence[pos+1]]
    return Result
def GetPSTrigram(ProteinSequence):
    #Number of descriptor is equal to number of position in the PSFM
    ProteinSequence = ''.join([AA for AA in ProteinSequence if AA in __AA_LETTERS__])
    LengthSequence = len(ProteinSequence)
    Result = {AA: 0.0 for AA in __TRI_GRAMS__}
    for pos, Residue in enumerate(ProteinSequence[:LengthSequence-2]):
        R_i = Residue
        R_j = ProteinSequence[pos+1]
        R_k = ProteinSequence[pos+2]
        Result[R_i+R_j+R_k] = Result[R_i+R_j+R_k] + \
                            PSFM_NORM_T.at[pos, R_i] + \
                            PSFM_NORM_T.at[pos+1,R_j]+ \
                            PSFM_NORM_T.at[pos+2,R_k]


    # Result = sorted(Result.items(),key=lambda x: x[0])
    return Result
def GetPSMonogramPercentile(ProteinSequence,percent=100):
    # Number of descriptor is equal to number of position in the PSFM
    ProteinSequence = ''.join([AA for AA in ProteinSequence if AA in __AA_LETTERS__])
    LengthSequence = len(ProteinSequence)
    RefinedLength = math.floor(LengthSequence * (percent / 100))
    Result = {AA+str(percent): 0.0 for AA in __AA_LETTERS__}
    for pos, Residue in enumerate(ProteinSequence[0:RefinedLength]):
        Result[Residue+str(percent)] = Result[Residue+str(percent)] + PSFM_NORM_T.at[pos, Residue]
    return Result
def GetPSMonogramPercentiles(ProteinSequence):
    Separation = [15,30,45,60,75,90]
    Result = {}
    for percent in Separation:
        Result.update(GetPSMonogramPercentile(ProteinSequence,percent=percent))
    return Result

def GetPSBigramPercentile(ProteinSequence,percent=100):
    # Number of descriptor is equal to number of position in the PSFM
    ProteinSequence = ''.join([AA for AA in ProteinSequence if AA in __AA_LETTERS__])
    LengthSequence = len(ProteinSequence)
    RefinedLength = math.floor(LengthSequence * (percent / 100))
    Result = {AAP+str(percent): 0.0 for AAP in __AA_PAIRS__}
    for pos, Residue in enumerate(ProteinSequence[:RefinedLength - 1]):
        R_i = Residue
        R_j = ProteinSequence[pos+1]
        Result[R_i + R_j + str(percent)] = Result[R_i + R_j + str(percent)] + \
                                               PSFM_NORM_T.at[pos, R_i] + \
                                               PSFM_NORM_T.at[pos + 1, R_j]

    return Result
def GetPSBigramPercentiles(ProteinSequence):
    Separation = [15,30,45,60,75,90]
    Result = {}
    for percent in Separation:
        Result.update(GetPSBigramPercentile(ProteinSequence,percent=percent))
    return Result

def GetPSGappedBigram(ProteinSequence,gap=5):
    ProteinSequence = ''.join([AA for AA in ProteinSequence if AA in __AA_LETTERS__])
    if gap < 1:
        print('Gap parameter must be at least one.')
        return
    result = {}
    ProteinSequence = ProteinSequence.strip()
    L = len(ProteinSequence)
    for g in range(1, gap + 1):
        OccurenceDict = {}
        for pair in __AA_PAIRS__:
            OccurenceDict[pair] = 0.0
        # sum = 0
        TI = L - g - 1  # Total Iteration
        for i in range(0,TI):
            # start to stop-1, stop is non-inclusive
            j = i + g + 1
            if i < L and j < L and ProteinSequence[i] in __AA_LETTERS__ and ProteinSequence[j] in __AA_LETTERS__:
                R_i = ProteinSequence[i]
                R_j = ProteinSequence[j]
                OccurenceDict[R_i + R_j] = OccurenceDict[R_i + R_j] +\
                                            PSFM_NORM_T.at[i,R_i]+\
                                            PSFM_NORM_T.at[j,R_j]
                #sum = sum + 1
        for pair in __AA_PAIRS__:
            result[str(g).join(pair)] = OccurenceDict[pair]

    return result
def GetPSKNN(ProteinSequence,k=30):
    ProteinSequence = ''.join([AA for AA in ProteinSequence if AA in __AA_LETTERS__])
    Result = {}
    for nn in range(1,k+1):
        for AAP in __AA_PAIRS__:
            Result[AAP+'kn'+str(nn)] = 0.0
    for AA_1st in __AA_LETTERS__:

        try:
            __fst_index__ = ProteinSequence.index(AA_1st)
            for AA_2nd in __AA_LETTERS__:

                try:
                    __temp_index__ = __fst_index__
                    for nn in range(1,k+1):
                        try:
                            __second_index__ = ProteinSequence.index(AA_2nd,__temp_index__+1)
                            __distance__ = __second_index__ - __fst_index__
                            #Result[AA_1st + '-k' + str(nn) + 'n-' + AA_2nd] = round(((__distance__/__NORMALIZED_TERM__)*100),2) if __NORMALIZED_TERM__ != 0 else 0
                            Result[AA_1st + AA_2nd + 'kn' + str(nn)] = (PSFM_NORM_T.at[__fst_index__,AA_1st] + PSFM_NORM_T.at[__second_index__,AA_2nd])*(__distance__)
                            __temp_index__ = __second_index__
                        except Exception as Err:
                            pass
                            #print('Inner Except:',Err)
                except Exception as Err:
                    pass
                    #print('Outer Exception:',Err)
        except Exception as Err:
            pass
    return Result
#############################################################################################
def CalculateAAComposition(ProteinSequence):
    """
    ########################################################################
    Calculate the composition of Amino acids

    for a given protein sequence.

    Usage:

    result=CalculateAAComposition(protein)

    Input: protein is a pure protein sequence.

    Output: result is a dict form containing the composition of

    20 amino acids.
    ########################################################################
    """
    ProteinSequence = ''.join([AA for AA in ProteinSequence if AA in __AA_LETTERS__])
    LengthSequence = len(ProteinSequence)
    Result = {}
    for i in AALetter:
        Result[i] = round(float(ProteinSequence.count(i)) / LengthSequence * 100, 3)
    return Result


#############################################################################################
def CalculateDipeptideComposition(ProteinSequence):
    """
    ########################################################################
    Calculate the composition of dipeptidefor a given protein sequence.

    Usage:

    result=CalculateDipeptideComposition(protein)

    Input: protein is a pure protein sequence.

    Output: result is a dict form containing the composition of

    400 dipeptides.
    ########################################################################
    """
    ProteinSequence = ''.join([AA for AA in ProteinSequence if AA in __AA_LETTERS__])
    LengthSequence = len(ProteinSequence)
    Result = {}
    for i in AALetter:
        for j in AALetter:
            Dipeptide = i + j
            Result[Dipeptide] = round(float(ProteinSequence.count(Dipeptide)) / (LengthSequence - 1) * 100, 2)
    return Result


#############################################################################################

def Getkmers():
    """
    ########################################################################
    Get the amino acid list of 3-mers.

    Usage:

    result=Getkmers()

    Output: result is a list form containing 8000 tri-peptides.

    ########################################################################
    """
    kmers = list()
    for i in AALetter:
        for j in AALetter:
            for k in AALetter:
                kmers.append(i + j + k)
    return kmers


#############################################################################################
def GetSpectrumDict(proteinsequence):
    """
    ########################################################################
    Calcualte the spectrum descriptors of 3-mers for a given protein.

    Usage:

    result=GetSpectrumDict(protein)

    Input: protein is a pure protein sequence.

    Output: result is a dict form containing the composition values of 8000

    3-mers.
    ########################################################################
    """
    proteinsequence = ''.join([AA for AA in proteinsequence if AA in __AA_LETTERS__])
    result = {}
    kmers = Getkmers()
    for i in kmers:
        result[i] = len(re.findall(i, proteinsequence))
    return result


#############################################################################################
def CalculateAADipeptideComposition(ProteinSequence):
    """
    ########################################################################
    Calculate the composition of AADs, dipeptide and 3-mers for a

    given protein sequence.

    Usage:

    result=CalculateAADipeptideComposition(protein)

    Input: protein is a pure protein sequence.

    Output: result is a dict form containing all composition values of

    AADs, dipeptide and 3-mers (8420).
    ########################################################################
    """
    ProteinSequence = ''.join([AA for AA in ProteinSequence if AA in __AA_LETTERS__])
    result = {}
    result.update(CalculateAAComposition(ProteinSequence))
    result.update(CalculateDipeptideComposition(ProteinSequence))
    result.update(GetSpectrumDict(ProteinSequence))

    return result

"""
PSSM feature extraction methods
"""
def NormalizedPSSM(PSSM):
    if not isinstance(PSSM,np.ndarray):
        PSSM = np.asarray(PSSM,dtype=np.float64)
    xu = PSSM.mean(axis=1)
    stds = PSSM.std(axis=1,ddof=0)
    PSSM = (PSSM - xu[:,np.newaxis])/(stds[:,np.newaxis])
    PSSM = np.nan_to_num(PSSM)
    PSSM = np.round(PSSM,5)
    return PSSM
def ScalePSSM(PSSM,range=(0,1)):
    PSSM = np.asarray(PSSM, dtype=np.float64)
    min = PSSM.min()
    oldrange = PSSM.ptp(PSSM)
    PSSM = range[0] + ((PSSM - min)/oldrange)*(range[1] - range[0])
def NormalizedUpto(PSSM,range=(0,1)):
    PSSM = np.asarray(PSSM, dtype=np.float64)
    Max = range[1]
    Min = range[0]
    R = Max - Min
    if R == 0:
        R = 1
    return (PSSM - Min)/(Max-Min)
def GetPSSMAAC(PSSM,Normalized=True):
    if Normalized:
        PSSM = NormalizedPSSM(PSSM)
    else:
        PSSM = 1 / (1 + np.exp(-PSSM))
    L = int(PSSM.shape[0])
    C = int(PSSM.shape[1])
    COLs = range(C)
    rs = {'PSSM_AAC_'+ str(cidx):0 for cidx in COLs }
    for i in range(L):
         max_index = np.argmax(PSSM[i,COLs])
         rs['PSSM_AAC_'+ str(max_index)] += 1
    for k,v in rs.items():
        rs[k] = round(v/L,5)
    return rs
def GetPSSMBigram(PSSM,Normalized=True):
    import string
    if Normalized:
        PSSM = NormalizedPSSM(PSSM)
    else:
        PSSM = 1 / (1 + np.exp(-PSSM))
    L = int(PSSM.shape[0])
    C = int(PSSM.shape[1])
    COLs = range(C)
    StrMaps = string.ascii_uppercase[:C]
    ConsensusStr = ''.join([StrMaps[np.argmax(PSSM[i, COLs])] for i in range(L)])
    #print(ConsensusStr)
    Len = len(ConsensusStr)
    ACPairs = [ s_indx+f_indx for s_indx in StrMaps for f_indx in StrMaps ]
    rs = {'PSSM_SB_'+P: 0 for P in ACPairs}
    for i in range(Len-1):
        p = ConsensusStr[i:i+2]
        rs['PSSM_SB_'+p] += 1
    for k,v in rs.items():
        rs[k] = round(v/(L-1),5)
    return rs
def GetPSSMTrigram(PSSM):
    import string

    PSSM = NormalizedPSSM(PSSM)
    L = int(PSSM.shape[0])
    C = int(PSSM.shape[1])
    COLs = range(C)
    StrMaps = string.ascii_uppercase[:C]
    ConsensusStr = ''.join([StrMaps[np.argmax(PSSM[i, COLs])] for i in range(L)])
    # print(ConsensusStr)
    Len = len(ConsensusStr)
    ACPairs = [ s_indx+f_indx for s_indx in StrMaps for f_indx in StrMaps ]
    ACPairs = [ s_indx+f_indx for s_indx in StrMaps for f_indx in ACPairs ]
    rs = {'PSSM_ST_'+P: 0 for P in ACPairs}
    for i in range(Len-2):
        p = ConsensusStr[i:i+3]
        rs['PSSM_ST_'+p] += 1
    for k,v in rs.items():
        rs[k] = round(v/(L-2),5)
    return rs
def GetPSSMSAAC(PSSM):
    #Semi amino acid composition
    PSSM = NormalizedPSSM(PSSM)
    L = int(PSSM.shape[0])
    C = int(PSSM.shape[1])
    COLs = range(C)
    rs = {}
    for c in COLs:
        rs['PSSM_SC_'+str(c)] = round(sum(np.ravel(PSSM[:,c]))/L,5)
    return rs
def GetPSSMAC(PSSM, DF=7, Normalized=True):
    #PSSM auto covariance
    if Normalized:
        PSSM = NormalizedPSSM(PSSM)
    else:
        PSSM = 1 / (1 + np.exp(-PSSM))
    L = int(PSSM.shape[0])
    C = int(PSSM.shape[1])
    COLs = range(C)
    rs = {}
    for df in range(1, DF+1):
        for c in COLs:
            xu = np.asarray(PSSM[:,c]).mean()
            sum = 0
            TL = L - df
            for i in range(L-df):
                sum += (PSSM[i,c] - xu)*(PSSM[i+df,c]-xu)
            rs['PSSMAC_d'+str(df)+'_'+str(c)] = round(sum/TL,5)
    return rs
def GetPSSMSegmentedAutoCovar(PSSM, Segment=18, DF=7, Normalized=True):
    #PSSM auto covariance
    if Normalized:
        PSSM = NormalizedPSSM(PSSM)
    else:
        PSSM = 1 / (1 + np.exp(-PSSM))
    L = int(PSSM.shape[0])
    C = int(PSSM.shape[1])
    elems = L//Segment
    COLs = range(C)
    rs = {'PSSMAC_Seg'+str(seg) +'_'+'d'+ str(df) + '_' + str(c):0 for seg in range(0, Segment) for df in range(1,DF+1) for c in COLs }
    for seg in range(0,Segment):
        rows = []
        if seg == (Segment - 1):
            rows = range(seg * elems, L)
        else:
            rows = range(seg * elems, (seg + 1) * elems)
        total_rows = len(rows)
        if total_rows <= 0:
            continue
        TPSSM = PSSM[rows,:]
        CL = TPSSM.shape[0]
        for df in range(1, DF + 1):
            for c in COLs:
                xu = np.asarray(TPSSM[:, c]).mean()
                sum = 0
                TL = CL - df
                for i in range(CL - df):
                    sum += (TPSSM[i, c] - xu) * (TPSSM[i + df, c] - xu)
                #rs['PSSMAC_Seg'+str(seg) +'_'+'d'+ str(df) + '_' + str(c)] = round(sum / TL, 5)
                rs['PSSMAC_Seg'+str(seg) +'_'+'d'+ str(df) + '_' + str(c)] = round(sum, 5)
    return rs
def GetPSSMACFromPercentile(PSSM,DF=5,percents=[10,20,30,40,50,60,70,80,90],Normalized=True):
    #PSSM auto covariance from percentiles
    if Normalized:
        PSSM = NormalizedPSSM(PSSM)
    else:
        PSSM = 1 / (1 + np.exp(-PSSM))
    L = int(PSSM.shape[0])
    C = int(PSSM.shape[1])
    COLs = range(C)
    rs = {'PSSMPAC_P' + str(percent) + 'D' + str(df) + 'C' + str(c):0 for percent in percents for df in range(1,DF+1) for       c in COLs}
    for percent in percents:
        NewLen = math.floor((percent/100)*L)
        for df in range(1, DF + 1):
            TL = NewLen - df
            if TL > 0:
                for c in COLs:
                    xu = np.asarray(PSSM[:NewLen, c]).mean()
                    sum = 0
                    for i in range(TL):
                        sum += (PSSM[i, c] - xu) * (PSSM[i + df, c] - xu)
                    rs['PSSMPAC_P'+str(percent)+'D' + str(df) + 'C' + str(c)] = round(sum / TL, 5)
    return rs
def GetPSSMMainBiGram(PSSM,Normalized=True):
    if Normalized:
        PSSM = NormalizedPSSM(PSSM)
    else:
        PSSM = 1 / (1 + np.exp(-PSSM))
    L = int(PSSM.shape[0])
    C = int(PSSM.shape[1])
    COLs = range(C)
    TL = L - 1  #
    rs = {'PSSM_MB_'+str(c1)+'_'+str(c2):0 for c1 in COLs for c2 in COLs}
    for c1 in COLs:
        for c2 in COLs:
            sum = 0
            for i in range(TL):
                sum += PSSM[i,c1]*PSSM[i+1,c2]
            rs['PSSM_MB_'+str(c1)+'_'+str(c2)] = round(sum/TL,5)
    return rs
def GetPSSMMainGappedBigram(PSSM,G=5,Normalized=True):
    if Normalized:
        PSSM = NormalizedPSSM(PSSM)
    else:
        PSSM = 1/(1+np.exp(-PSSM))
    L = int(PSSM.shape[0])
    C = int(PSSM.shape[1])
    COLs = range(C)
    rs = {'PSSM_G'+str(g)+'_'+ str(c1) + '_' + str(c2): 0 for g in range(1,G+1) for c1 in COLs for c2 in COLs}
    for c1 in COLs:
        for c2 in COLs:
            for g in range(1,G+1):
                TL = L - g
                if TL > 0:
                    sum = 0
                    for i in range(TL):
                        sum += PSSM[i, c1] * PSSM[i + g, c2]
                    rs['PSSM_G'+str(g)+'_'+ str(c1) + '_' + str(c2)] = round(sum / TL, 5)
    return rs

def GetLocalPSSM(PSSM,n=3,gap=2, Normalized=True, Reverse=False):
    if Normalized:
        PSSM = NormalizedPSSM(PSSM)

    if Reverse:
        PSSM = PSSM[::-1]
    L = int(PSSM.shape[0])
    C = int(PSSM.shape[1])
    elems = L // n
    rs_kth = {}
    if Reverse:
        rs_kth = {'rlpssm_' + str(k) + '_' + str(j): 0 for k in range(0,n) for j in range(0, C)}
    else:
        rs_kth = {'lpssm_' + str(k) + '_' + str(j): 0 for k in range(0, n) for j in range(0, C)}

    if Reverse:
        rs_kth.update({'rlpssm_g' + str(g)+'_'+ str(k) + '_' + str(j): 0
                   for k in range(0,n) for g in range(1,gap+1) for j in range(0,C)})
    else:
        rs_kth.update({'lpssm_g' + str(g) + '_' + str(k) + '_' + str(j): 0
                       for k in range(0, n) for g in range(1, gap + 1) for j in range(0, C)})

    for k in range(0,n-1):
        rows = range(k*elems,(k+1)*elems)
        total_rows = len(rows)
        if total_rows <= 0:
            continue
        for j in range(0,C):
            val = round(sum(np.ravel(PSSM[rows, j])) / total_rows, 5)
            if Reverse:
                rs_kth['rlpssm_' + str(k) + '_' + str(j)] = val
            else:
                rs_kth['lpssm_' + str(k) + '_' + str(j)] = val
    for k in range(0, n-1):
        start_indx = k * elems
        end_indx = (k + 1) * elems
        for g in range(1,gap+1):
            last_indx = end_indx - g
            total_rows = last_indx - start_indx + 1
            if total_rows <= 0:
                continue
            for j in range(0,C):
                sq_values = [math.pow(PSSM[indx, j] - PSSM[indx + g, j], 2)
                             for indx in range(start_indx, last_indx)]
                val = round(sum(sq_values) / total_rows, 5)
                if Reverse:
                    rs_kth['rlpssm_g' + str(g) + '_' + str(k) + '_' + str(j)] = val
                else:
                    rs_kth['lpssm_g' + str(g) + '_' + str(k) + '_' + str(j)] = val

    for k in range(n-1, n):
        rows = range(k * elems, L)
        total_rows = len(rows)
        if total_rows <= 0:
            continue
        for j in range(0,C):
            val = round(sum(np.ravel(PSSM[rows,j]))/total_rows,5)
            if Reverse:
                rs_kth['rlpssm_'+str(k)+'_'+str(j)] = val
            else:
                rs_kth['lpssm_'+str(k)+'_'+str(j)] = val
    for k in range(n-1, n):
        start_indx = k * elems
        end_indx = (k + 1) * elems
        for g in range(1,gap+1):
            last_indx = end_indx - g
            total_rows = last_indx - start_indx + 1
            if total_rows <= 0:
                continue
            for j in range(0,C):
                sq_values = [math.pow(PSSM[indx, j] - PSSM[indx + g, j], 2)
                             for indx in range(start_indx, last_indx)]
                val = round(sum(sq_values) / total_rows, 5)
                if Reverse:
                    rs_kth['rlpssm_g' + str(g) + '_' + str(k) + '_' + str(j)] = val
                else:
                    rs_kth['lpssm_g' + str(g) + '_' + str(k) + '_' + str(j)] = val
    return rs_kth
def GetLocalPSSMComposition(df, n=3, Normalized=True, Reverse=False, Scale=1):
    if not isinstance(df,pd.DataFrame):
        print('df param must be pandas dataframe')
        return {}
    KEYS = df.keys()
    COLUMNS = list(set(KEYS) - set(['Seq']))
    Seq = list(df['Seq'].values)
    PSSM = np.asarray(df[COLUMNS].values, dtype=np.float64)
    if Normalized:
        PSSM = NormalizedPSSM(PSSM)
    else:
        PSSM = 1 / (1 + np.exp(-Scale*PSSM))
    L,C = PSSM.shape
    elems = L // n
    rs_kth = {'BG_' + str(i) + '_' + str(j)+ '_' +str(k): 0 for i in range(0, n) for j in range(0, C) for k in range(0,C)}
    if Reverse:
        rs_kth.update({'RBG_' + str(i) + '_' + str(j)+ '_' +str(k): 0 for i in range(0, n) for j in range(0, C) for k in range(0,C)})
    for k in range(0,n):
        rows = []
        if k == (n-1):
            rows = range(k*elems,L)
        else:
            rows = range(k*elems,(k+1)*elems)
        total_rows = len(rows)
        if total_rows <= 0:
            continue
        RowDict = {AC: [] for AC in AALetter}
        for index in rows:
            if Seq[index] in AALetter:
                RowDict[Seq[index]].append(index)

        for idx, AC in enumerate(AALetter):
            indices = RowDict[AC]
            for cindex in range(0,C):
                rs_kth['BG_' + str(k) + '_' + str(idx)+ '_' +str(cindex)] = np.sum(np.ravel(PSSM[indices,cindex]))
        if Reverse:
            RowDict = {AC: [] for AC in AALetter}
            TempSeq = Seq[::-1]
            TempPSSM = PSSM[::-1]
            for index in rows:
                if TempSeq[index] in AALetter:
                    RowDict[TempSeq[index]].append(index)

            for idx, AC in enumerate(AALetter):
                indices = RowDict[AC]
                for cindex in range(0, C):
                    rs_kth['RBG_' + str(k) + '_' + str(idx) + '_' + str(cindex)] = np.sum(
                        np.ravel(TempPSSM[indices, cindex]))
    return rs_kth


def GetLocalPSSMCompositionalVariance(df, n=3, Normalized=True):
    if not isinstance(df, pd.DataFrame):
        print('df param must be pandas dataframe')
        return {}
    KEYS = df.keys()
    COLUMNS = list(set(KEYS) - set(['Seq']))
    Seq = list(df['Seq'].values)
    PSSM = np.asarray(df[COLUMNS].values, dtype=np.float64)
    if Normalized:
        PSSM = NormalizedPSSM(PSSM)
    else:
        PSSM = 1 / (1 + np.exp(-PSSM))
    L, C = PSSM.shape
    elems = L // n
    rs_kth = {}

    rs_kth = {'VBG_' + str(i) + '_' + str(j) + '_' + str(k): 0 for i in range(0, n) for j in range(0, C) for k in range(0, C)}

    for k in range(0, n):
        rows = []
        if k == (n-1):
            rows = range(k * elems, L)
        else:
            rows = range(k * elems, (k + 1) * elems)
        total_rows = len(rows)
        if total_rows <= 0:
            continue
        RowDict = {AC: [] for AC in AALetter}
        for index in rows:
            if Seq[index] in AALetter:
                RowDict[Seq[index]].append(index)

        for idx, AC in enumerate(AALetter):
            for cindex in range(0, C):
                indices = RowDict[AC]
                xu = np.mean(np.ravel(PSSM[indices,cindex]))
                sq_variance_sum = np.sum(np.power(PSSM[indices,cindex] - xu,2))
                rs_kth['VBG_' + str(k) + '_' + str(idx) + '_' + str(cindex)] = sq_variance_sum
    return rs_kth
def GetLocalPSSM_ACComp(df, n=3, Normalized=True):
    if not isinstance(df,pd.DataFrame):
        print('df param must be pandas dataframe')
        return {}
    KEYS = df.keys()
    COLUMNS = list(set(KEYS) - set(['Seq']))
    Seq = list(df['Seq'].values)
    PSSM = np.asarray(df[COLUMNS].values, dtype=np.float64)
    if Normalized:
        PSSM = NormalizedPSSM(PSSM)
    else:
        PSSM = 1 / (1 + np.exp(-PSSM))
    L,C = PSSM.shape
    elems = L // n
    rs_kth = {}

    rs_kth = {'MG_' + str(i) + '_' + str(j): 0 for i in range(0, n) for j in range(0, C)}

    for k in range(0,n-1):
        rows = range(k*elems,(k+1)*elems)
        total_rows = len(rows)
        if total_rows <= 0:
            continue
        RowDict = {AC: [] for AC in AALetter}
        for index in rows:
            if Seq[index] in AALetter:
                RowDict[Seq[index]].append(index)
        Keys = list(RowDict.keys())
        for idx, AC in enumerate(Keys):
            indices = RowDict[AC]
            rs_kth['MG_' + str(k) + '_' + str(idx)] = np.sum(PSSM[indices, idx])

    for k in range(n-1, n):
        rows = range(k * elems, L)
        total_rows = len(rows)
        if total_rows <= 0:
            continue
        RowDict = {AC: [] for AC in AALetter}
        for index in rows:
            if Seq[index] in AALetter:
                RowDict[Seq[index]].append(index)

        Keys = list(RowDict.keys())
        for idx, AC in enumerate(Keys):
            indices = RowDict[AC]
            rs_kth['MG_' + str(k) + '_' + str(idx)] = np.sum(PSSM[indices, idx])

    return rs_kth
def GetLocalPSSMCompositionFromPercentiles(df, percents=[25,50,75], Normalized=True, Reverse=False,Scale=1):
    if not isinstance(df,pd.DataFrame):
        print('df param must be pandas dataframe')
        return {}
    KEYS = df.keys()
    COLUMNS = list(set(KEYS) - set(['Seq']))
    Seq = list(df['Seq'].values)
    PSSM = np.asarray(df[COLUMNS].values, dtype=np.float64)
    if Normalized:
        PSSM = NormalizedPSSM(PSSM)
    else:
        PSSM = 1 / (1 + np.exp(-Scale*PSSM))
    L,C = PSSM.shape

    rs_kth = {'PBG_' + str(i) + '_' + str(j) + '_' + str(k): 0 for i in percents for j in range(0, C) for k in
              range(0, C)}
    if Reverse:
        rs_kth.update({'RPBG_' + str(i) + '_' + str(j)+ '_' + str(k): 0 for i in percents for j in range(0, C) for k in range(0,C)})

    for p in percents:
        TotalRows = math.floor((L*p)/100)
        RowDict = {AC: [] for AC in AALetter}

        for index in range(0, TotalRows):
            if Seq[index] in AALetter:
                RowDict[Seq[index]].append(index)

        for idx, AC in enumerate(AALetter):
            indices = RowDict[AC]
            for cindex in range(0, C):
                rs_kth['PBG_' + str(p) + '_' + str(idx) + '_' + str(cindex)] = np.sum(PSSM[indices, cindex])

        if Reverse:
            RowDict = {AC: [] for AC in AALetter}
            TempSeq = Seq[::-1]
            TempPSSM = PSSM[::-1]
            for index in range(0, TotalRows):
                if TempSeq[index] in AALetter:
                    RowDict[TempSeq[index]].append(index)

            for idx, AC in enumerate(AALetter):
                indices = RowDict[AC]
                for cindex in range(0, C):
                    rs_kth['RPBG_' + str(p) + '_' + str(idx) + '_' + str(cindex)] = np.sum(TempPSSM[indices, cindex])

    return rs_kth
def GetLocalPSSMFromPercent(PSSM,percents=[25,50,75],Reverse=False, Normalized=True):
    L = int(PSSM.shape[0])
    rs = {}
    for percent in percents:
        n_rows = int((percent*L)/100)
        TempPSSM = PSSM[:n_rows,:]
        r = GetLocalPSSM(TempPSSM,n=1,gap=1)
        if Reverse:
            TempPSSM = PSSM[::-1]
            TempPSSM = TempPSSM[:n_rows,:]
            r.update(GetLocalPSSM(TempPSSM, n=1, gap=1, Reverse=True, Normalized=Normalized))
        for k,v in r.items():
            rs['P'+str(percent)+'_'+k] = v
    return rs
def GetPseudoPSSM(PSSM,n = 3,gap=2,Normalized=True,Reverse=False):
    if Normalized:
        PSSM = NormalizedPSSM(PSSM)
    if Reverse:
        PSSM = PSSM[::-1]# Reverse the order of the rows
    L = int(PSSM.shape[0])
    C = int(PSSM.shape[1])
    elems = L//n

    rs_kth = {}
    for k in range(n-1):
        for j in range(C):
            rows = range(k*elems,(k+1)*elems)
            total_rows = len(rows)
            if total_rows == 0:
                total_rows = 1
            val = round(sum(np.ravel(PSSM[rows,j]))/total_rows,5)
            if Reverse:
                rs_kth['rpssm_'+str(k)+'_'+str(j)] = val
            else:
                rs_kth['pssm_'+str(k)+'_'+str(j)] = val
    for g in range(1, gap + 1):
        for k in range(n-1):
            start_indx = k * elems
            end_indx = (k + 1) * elems - g
            total_rows = elems - g
            if total_rows == 0:
                total_rows = 1
            for j in range(C):
                sq_values = [math.pow(PSSM[indx,j] - PSSM[indx+g,j],2) for indx in range(start_indx,end_indx)]
                val = round(sum(sq_values)/total_rows,5)
                if Reverse:
                    rs_kth['rpssm_g'+str(g)+'_'+ str(k)+'_'+ str(j)] = val
                else:
                    rs_kth['pssm_g'+str(g)+'_'+ str(k)+'_'+ str(j)] = val
    for k in range(n-1,n):
        for j in range(C):
            rows = range(k*elems,L)
            total_rows = len(rows)
            if total_rows == 0:
                total_rows = 1
            val = round(sum(np.ravel(PSSM[rows,j]))/total_rows,5)
            if Reverse:
                rs_kth['rpssm_'+str(k)+'_'+str(j)] = val
            else:
                rs_kth['pssm_'+str(k)+'_'+str(j)] = val
    for g in range(1, gap + 1):
        for k in range(n-1,n):
            start_indx = k * elems
            end_indx = L - g
            total_rows = end_indx - start_indx + 1
            if total_rows == 0:
                total_rows = 1
            for j in range(C):
                sq_values = [math.pow(PSSM[indx,j] - PSSM[indx+g,j],2) for indx in range(start_indx,end_indx)]
                val = round(sum(sq_values)/total_rows,5)
                if Reverse:
                    rs_kth['rpssm_g'+str(g)+'_'+str(k)+'_'+ str(j)] = val
                else:
                    rs_kth['pssm_g'+str(g)+'_'+str(k)+'_'+ str(j)] = val
    return rs_kth

def GetSPDSSO(SSSequence):
    SS = ('H','C','E')
    RS = {'SSO_'+str(SS):0 for SS in SS}
    for SS in SS:
        RS['SSO_'+str(SS)] = SSSequence.count(SS)
    return RS
    pass
def GetSPDSSC(SSSequence):
    SS = ('H','C','E')
    RS = {'SSC_'+str(SS):0 for SS in SS}
    L = len(SSSequence)
    for SS in SS:
        RS['SSC_'+str(SS)] = round(SSSequence.count(SS)/L,7)
    return RS
    pass
def GetSPDASAC(ASA):
    #One descriptor
    RS = {'ASAC':0}
    L = len(ASA)
    RS['ASAC'] = sum(ASA)/L
    return RS
    pass
def GetSPDTAC(Angles):
    #Torsional Angle Composition With Key SIN and COS
    Angles = np.asarray(Angles,dtype=np.float64)
    C = int(Angles.shape[1])
    L = int(Angles.shape[0])
    radians = np.radians(Angles)
    sines = np.sin(radians)
    cosines = np.cos(radians)
    RS = {}
    for col in range(C):
        RS['TACSIN_'+str(col)] = round(sum(sines[:,col])/L,7)
    for col in range(C):
        RS['TACCOS_'+str(col)] = round(sum(cosines[:,col])/L,7)
    return RS
    pass
def GetSPDSPC(Probabilities):
    Probabilities = np.asarray(Probabilities, dtype=np.float64)
    C = int(Probabilities.shape[1])
    L = int(Probabilities.shape[0])
    RS = {}
    for col in range(C):
        RS['SP_' + str(col)] = round(sum(Probabilities[:, col]) / L, 7)
    return RS
def GetTABigram(Angles):
    Angles = np.asarray(Angles, dtype=np.float64)
    radians = np.radians(Angles)
    sines = np.sin(radians)
    cosines = np.cos(radians)
    SIN_COS_VALUES = np.hstack((sines,cosines))
    C = int(SIN_COS_VALUES.shape[1])
    L = int(SIN_COS_VALUES.shape[0])
    RS = {'TAB_'+str(k)+'_'+str(l):0 for k in range(C) for l in range(C)}
    #print(SIN_COS_VALUES)
    for k in range(C):
        for l in range(C):
            sum = 0
            TL = L - 1
            for i in range(0,TL):
                sum += (SIN_COS_VALUES[i,k]*SIN_COS_VALUES[i+1,l])
            RS['TAB_'+str(k)+'_'+str(l)] = round(sum/TL,7)
    return RS
    pass
def GetSPBigram(Probabilities):
    Probabilities = np.asarray(Probabilities, dtype=np.float64)
    C = int(Probabilities.shape[1])
    L = int(Probabilities.shape[0])
    RS = {'SPB_' + str(k) + '_' + str(l): 0 for k in range(C) for l in range(C)}
    for k in range(C):
        for l in range(C):
            sum = 0
            TL = L - 1
            if TL <= 0:
                continue
            for i in range(TL):
                sum += (Probabilities[i,k] * Probabilities[i+1,l])

            RS['SPB_' + str(k) + '_' + str(l)] = round(sum / TL, 7)
    return RS
def GetTAC(Angles):
    #Torsional Angle Composition
    Angles = np.asarray(Angles, dtype=np.float64)
    radians = np.radians(Angles)
    sines = np.sin(radians)
    cosines = np.cos(radians)
    SIN_COS_VALUES = np.hstack((sines, cosines))
    C = int(SIN_COS_VALUES.shape[1])
    L = int(SIN_COS_VALUES.shape[0])
    RS = {'TAC_' + str(l): 0 for l in range(C)}
    for col in range(C):
        RS['TAC_'+str(col)] = round(sum(SIN_COS_VALUES[:,col])/L,7)
    return RS
def GetLocalTAC(Angles,n=4,gap=5,Reverse=False,Normalized=False):
    # Segmented Torsional Angle Composition
    Angles = np.asarray(Angles, dtype=np.float64)
    radians = np.radians(Angles)
    sines = np.sin(radians)
    cosines = np.cos(radians)
    SIN_COS_VALUES = np.hstack((sines, cosines))
    if Normalized:
        SIN_COS_VALUES = NormalizedPSSM(SIN_COS_VALUES)
    C = int(SIN_COS_VALUES.shape[1])
    L = int(SIN_COS_VALUES.shape[0])
    elems = L//n
    RS = {}

    if Reverse:
        RS = {'RLTAC_' + str(k) + '_' + str(j): 0 for k in range(0,n) for j in range(0, C)}
    else:
        RS = {'LTAC_' + str(k) + '_' + str(j): 0 for k in range(0, n) for j in range(0, C)}

    if Reverse:
        RS.update({'RLTAC_g' + str(g)+'_'+ str(k) + '_' + str(j): 0
                   for k in range(0,n) for g in range(1,gap+1) for j in range(0,C)})
    else:
        RS.update({'LTAC_g' + str(g) + '_' + str(k) + '_' + str(j): 0
                       for k in range(0, n) for g in range(1, gap + 1) for j in range(0, C)})

    for k in range(0,n-1):
        rows = range(k*elems,(k+1)*elems)
        total_rows = len(rows)
        if total_rows <= 0:
            continue
        for j in range(0,C):
            val = round(sum(np.ravel(SIN_COS_VALUES[rows, j])) / total_rows, 5)
            if Reverse:
                RS['RLTAC_' + str(k) + '_' + str(j)] = val
            else:
                RS['LTAC_' + str(k) + '_' + str(j)] = val
    for k in range(0,n-1):
        start_indx = k * elems
        end_indx = (k + 1) * elems
        for g in range(1,gap+1):
            last_indx = end_indx - g
            total_rows = last_indx - start_indx + 1
            if total_rows <= 0:
                continue
            for j in range(0,C):
                sq_values = [math.pow(SIN_COS_VALUES[indx, j] - SIN_COS_VALUES[indx + g, j], 2)
                             for indx in range(start_indx, last_indx)]
                val = round(sum(sq_values) / total_rows, 5)
                if Reverse:
                    RS['RLTAC_g' + str(g) + '_' + str(k) + '_' + str(j)] = val
                else:
                    RS['LTAC_g' + str(g) + '_' + str(k) + '_' + str(j)] = val

    for k in range(n-1,n):
        rows = range(k * elems, L)
        total_rows = len(rows)
        if total_rows <= 0:
            continue
        for j in range(0,C):
            val = round(sum(np.ravel(SIN_COS_VALUES[rows,j]))/total_rows,5)
            if Reverse:
                RS['RLTAC_'+str(k)+'_'+str(j)] = val
            else:
                RS['LTAC_'+str(k)+'_'+str(j)] = val
    for k in range(n-1,n):
        start_indx = k * elems
        end_indx = (k + 1) * elems
        for g in range(1,gap+1):
            last_indx = end_indx - g
            total_rows = last_indx - start_indx + 1
            if total_rows <= 0:
                continue
            for j in range(0,C):
                sq_values = [math.pow(SIN_COS_VALUES[indx, j] - SIN_COS_VALUES[indx + g, j], 2)
                             for indx in range(start_indx, last_indx)]
                val = round(sum(sq_values) / total_rows, 5)
                if Reverse:
                    RS['RLTAC_g' + str(g) + '_' + str(k) + '_' + str(j)] = val
                else:
                    RS['LTAC_g' + str(g) + '_' + str(k) + '_' + str(j)] = val
    return RS
def GetLocalTACFromPercentile(Angles,Percents=[5,15,25,35,45],Reverse=False,Normalized=False):
    Angles = np.asarray(Angles, dtype=np.float64)
    L = int(Angles.shape[0])
    RS = {}
    for percent in Percents:
        rows = int(math.floor((percent/100)*L))
        TempAngles = Angles[:rows, :]
        tac = GetLocalTAC(TempAngles, n=1, gap=1,Normalized=Normalized)
        if Reverse:
            #TempAngles = Angles[:rows,:]
            TempAngles = Angles[::-1][:rows,:]
            tac.update(GetLocalTAC(TempAngles,n=1,gap=1,Reverse=True,Normalized=Normalized))
        for k,v in tac.items():
            RS['P'+str(percent)+'_'+k] = v
    return RS
def GetTAAC(Angles,DF=7):
    #Torsional Angle auto-covariance
    Angles = np.asarray(Angles, dtype=np.float64)
    radians = np.radians(Angles)
    sines = np.sin(radians)
    cosines = np.cos(radians)
    SIN_COS_VALUES = np.hstack((sines, cosines))
    C = int(SIN_COS_VALUES.shape[1])
    L = int(SIN_COS_VALUES.shape[0])
    RS = {'TAAC_' + str(df) + '_' + str(l): 0 for df in range(1,DF+1) for l in range(C)}
    # print(SIN_COS_VALUES)
    for df in range(1,DF+1):
        for l in range(C):
            sum = 0
            TL = L - df
            if TL <= 0:
                continue
            for i in range(0, TL):
                sum += (SIN_COS_VALUES[i, l] * SIN_COS_VALUES[i + df, l])
            RS['TAAC_' + str(df) + '_' + str(l)] = round(sum / TL, 7)
    return RS
def GetSPAC(Probabilities,DF=7):
    Probabilities = np.asarray(Probabilities, dtype=np.float64)
    C = int(Probabilities.shape[1])
    L = int(Probabilities.shape[0])
    RS = {'SPAC_' + str(df) + '_' + str(l): 0 for df in range(1,DF+1) for l in range(C)}
    for df in range(1,DF+1):
        for l in range(C):
            sum = 0
            TL = L - df
            if TL <= 0:
                continue
            for i in range(TL):
                sum += (Probabilities[i, l] * Probabilities[i + df, l])

            RS['SPAC_' + str(df) + '_' + str(l)] = round(sum / TL, 7)
    return RS
def GetLocalSP(Probabilities,n=9,gap=2,Reverse=False,Normalized=False):
    Probabilities = np.asarray(Probabilities, dtype=np.float64)
    if Normalized:
        Probabilities = NormalizedPSSM(Probabilities)
    C = int(Probabilities.shape[1])
    L = int(Probabilities.shape[0])
    elems = L // n
    RS = {}
    if Reverse:
        RS = {'RLSP_' + str(k) + '_' + str(j): 0 for k in range(0, n) for j in range(0, C)}
    else:
        RS = {'LSP_' + str(k) + '_' + str(j): 0 for k in range(0, n) for j in range(0, C)}

    if Reverse:
        RS.update({'RLSP_g' + str(g) + '_' + str(k) + '_' + str(j): 0
                   for k in range(0, n) for g in range(1, gap + 1) for j in range(0, C)})
    else:
        RS.update({'LSP_g' + str(g) + '_' + str(k) + '_' + str(j): 0
                   for k in range(0, n) for g in range(1, gap + 1) for j in range(0, C)})

    for k in range(0, n - 1):
        rows = range(k * elems, (k + 1) * elems)
        total_rows = len(rows)
        if total_rows <= 0:
            continue
        for j in range(0, C):
            val = round(sum(np.ravel(Probabilities[rows, j])) / total_rows, 5)
            if Reverse:
                RS['RLSP_' + str(k) + '_' + str(j)] = val
            else:
                RS['LSP_' + str(k) + '_' + str(j)] = val
    for k in range(0, n - 1):
        start_indx = k * elems
        end_indx = (k + 1) * elems
        for g in range(1, gap + 1):
            last_indx = end_indx - g
            total_rows = last_indx - start_indx + 1
            if total_rows <= 0:
                continue
            for j in range(0, C):
                sq_values = [math.pow(Probabilities[indx, j] - Probabilities[indx + g, j], 2)
                             for indx in range(start_indx, last_indx)]
                val = round(sum(sq_values) / total_rows, 5)
                if Reverse:
                    RS['RLSP_g' + str(g) + '_' + str(k) + '_' + str(j)] = val
                else:
                    RS['LSP_g' + str(g) + '_' + str(k) + '_' + str(j)] = val

    for k in range(n - 1, n):
        rows = range(k * elems, L)
        total_rows = len(rows)
        if total_rows <= 0:
            continue
        for j in range(0, C):
            val = round(sum(np.ravel(Probabilities[rows, j])) / total_rows, 5)
            if Reverse:
                RS['RLSP_' + str(k) + '_' + str(j)] = val
            else:
                RS['LSP_' + str(k) + '_' + str(j)] = val
    for k in range(n - 1, n):
        start_indx = k * elems
        end_indx = (k + 1) * elems
        for g in range(1, gap + 1):
            last_indx = end_indx - g
            total_rows = last_indx - start_indx + 1
            if total_rows <= 0:
                continue
            for j in range(0, C):
                sq_values = [math.pow(Probabilities[indx, j] - Probabilities[indx + g, j], 2)
                             for indx in range(start_indx, last_indx)]
                val = round(sum(sq_values) / total_rows, 5)
                if Reverse:
                    RS['RLSP_g' + str(g) + '_' + str(k) + '_' + str(j)] = val
                else:
                    RS['LSP_g' + str(g) + '_' + str(k) + '_' + str(j)] = val
    return RS
def GetLocalSPFromPercentile(Probabilities,Percents=[10,25,50,75],Reverse=False,Normalized=False):
    Probabilities = np.asarray(Probabilities, dtype=np.float64)
    L = int(Probabilities.shape[0])
    RS = {}
    for percent in Percents:
        rows = int(math.floor((percent/100)*L))
        TempProb = Probabilities[:rows, :]
        tac = GetLocalSP(TempProb, n=1, gap=1, Normalized=Normalized)
        if Reverse:
            TempProb = Probabilities[::-1][:rows,:]
            tac.update(GetLocalSP(TempProb,n=1,gap=1,Reverse=True, Normalized=Normalized))
        for k,v in tac.items():
            RS['P'+str(percent)+'_'+k] = v
    return RS
def GetSegmentedTAC(SSDF,Segment=18,Reverse=False,Sigmoid=False):
    # Input SS Dataframe, formed from spd3 files
    if not isinstance(SSDF, pd.DataFrame):
        print('SSDF parameter must be pandas datadrame.')
        return {}
    AngleColms = ['Phi', 'Psi', 'Theta(i-1=>i+1)', 'Tau(i-2=>i+1)']
    ProteinSeq = ''.join([ac if ac in AALetter else AALetter[0] for ac in list(SSDF['Seq'].values)])
    Angles = np.asarray(SSDF[AngleColms].values, dtype=np.float64)
    radians = np.radians(Angles)
    sines = np.sin(radians)
    cosines = np.cos(radians)
    SIN_COS_VALUES = np.hstack((sines, cosines))
    if Sigmoid:
        #SIN_COS_VALUES = 1/(1+np.exp(-5*SIN_COS_VALUES))
        SIN_COS_VALUES = 1/(1+np.exp(-6*SIN_COS_VALUES))
    L,C = SIN_COS_VALUES.shape
    assert L == len(ProteinSeq)
    elems = L//Segment

    rs = {'STAB_'+str(n)+'_'+ AC +'_' + str(c): 0 for n in range(0,Segment) for AC in AALetter for c in range(0,C)}
    if Reverse:
        rs.update({'SRTAB_' + str(n) + '_' + AC + '_' + str(c): 0 for n in range(0, Segment) for AC in AALetter for c in
              range(0, C)})

    for n in range(0,Segment):
        rows = []
        if n == (Segment - 1):
            rows = range(n * elems, (n + 1) * elems)
        else:
            rows = range(n * elems, L)

        total_rows = len(rows)
        if total_rows <= 0:
            continue

        ACCompIndices = {AC: [] for AC in AALetter}
        for index in rows:
            ACCompIndices[ProteinSeq[index]].append(index)
        for AC in AALetter:
            indices = ACCompIndices[AC]
            for cindex in range(0,C):
                rs['STAB_' + str(n)+'_' +AC+'_' + str(cindex)] = np.sum(np.ravel(SIN_COS_VALUES[indices,cindex]))

        if Reverse:
            ACCompIndices = {AC: [] for AC in AALetter}
            TempSeq = ProteinSeq[::-1]
            TempValues = SIN_COS_VALUES[::-1]
            for index in rows:
                ACCompIndices[TempSeq[index]].append(index)
            for AC in AALetter:
                indices = ACCompIndices[AC]
                for cindex in range(0, C):
                    rs['SRTAB_' + str(n) + '_' + AC + '_' + str(cindex)] = np.sum(
                        np.ravel(TempValues[indices, cindex]))
    return rs


def GetTACFromPercentile(SSDF, Percents=[10,20,30,60], Reverse=False,Sigmoid=False):
    # Input SS Dataframe, formed from spd3 files
    if not isinstance(SSDF, pd.DataFrame):
        print('SSDF parameter must be pandas datadrame.')
        return {}
    AngleColms = ['Phi', 'Psi', 'Theta(i-1=>i+1)', 'Tau(i-2=>i+1)']
    ProteinSeq = ''.join([ac if ac in AALetter else AALetter[0] for ac in list(SSDF['Seq'].values)])
    Angles = np.asarray(SSDF[AngleColms].values, dtype=np.float64)
    radians = np.radians(Angles)
    sines = np.sin(radians)
    cosines = np.cos(radians)
    SIN_COS_VALUES = np.hstack((sines, cosines))
    if Sigmoid:
        #SIN_COS_VALUES = 1 / (1 + np.exp(-5 * SIN_COS_VALUES))
        SIN_COS_VALUES = 1 / (1 + np.exp(-6 * SIN_COS_VALUES))

    L, C = SIN_COS_VALUES.shape
    assert L == len(ProteinSeq)

    rs = {'PTAB_' + str(n) + '_' + AC + '_' + str(c): 0 for n in Percents for AC in AALetter for c in
          range(0, C)}
    if Reverse:
        rs.update({'PRTAB_' + str(n) + '_' + AC + '_' + str(c): 0 for n in Percents for AC in AALetter for c in
                   range(0, C)})

    for n in Percents:
        PercentRows = int((n/100)*L)
        if PercentRows <= 0:
            continue

        ACCompIndices = {AC: [] for AC in AALetter}
        for index in range(0,PercentRows):
            ACCompIndices[ProteinSeq[index]].append(index)
        for AC in AALetter:
            indices = ACCompIndices[AC]
            for cindex in range(0, C):
                rs['PTAB_' + str(n) + '_' + AC + '_' + str(cindex)] = np.sum(np.ravel(SIN_COS_VALUES[indices, cindex]))

        if Reverse:
            ACCompIndices = {AC: [] for AC in AALetter}
            TempSeq = ProteinSeq[::-1]
            TempValues = SIN_COS_VALUES[::-1]
            for index in range(0,PercentRows):
                ACCompIndices[TempSeq[index]].append(index)
            for AC in AALetter:
                indices = ACCompIndices[AC]
                for cindex in range(0, C):
                    rs['PRTAB_' + str(n) + '_' + AC + '_' + str(cindex)] = np.sum(
                        np.ravel(TempValues[indices, cindex]))
    return rs

def GetAllStructuralFeatures(SSDF):
    #Input SS Dataframe, formed from spd3 files
    if not isinstance(SSDF,pd.DataFrame):
        print('SSDF parameter must be pandas datadrame.')
        return {}
    AngleColms = ['Phi', 'Psi', 'Theta(i-1=>i+1)', 'Tau(i-2=>i+1)']
    ProbColms = ['P(C)', 'P(E)', 'P(H)']
    COLUMNS = SSDF.keys()
    for ac in AngleColms+ProbColms+['SS','ASA']:
        if ac not in COLUMNS:
            print('Column:{} not found in Data Frame'.format(ac))
            return {}
    SSSeq = list(SSDF['SS'].values)
    Angles = np.asarray(SSDF[AngleColms].values, dtype=np.float64)
    Probabilities = np.asarray(SSDF[ProbColms].values, dtype=np.float32)
    ASA = np.asarray(SSDF['ASA'].values, dtype=np.float64)

    rs = GetSPDSSO(SSSequence=SSSeq)
    rs.update(GetSPDSSC(SSSequence=SSSeq))
    rs.update(GetSPDASAC(ASA=ASA))

    rs.update(GetSPDSPC(Probabilities=Probabilities)) #Structural Probability Composition
    rs.update(GetSPBigram(Probabilities=Probabilities)) # Structural Probability Bigram
    rs.update(GetSPAC(Probabilities=Probabilities, DF=10)) # Structural Probability Auto-covariance

    rs.update(GetLocalSPFromPercentile(Probabilities=Probabilities,Percents=[10,25,50,75],Reverse=True,Normalized=True))
    rs.update(GetLocalSPFromPercentile(Probabilities=Probabilities,Percents=[100],Normalized=True))
    rs.update(GetLocalSP(Probabilities=Probabilities,n=9,gap=2,Reverse=True,Normalized=True))

    #rs.update(GetSPDTAC(Angles=Angles)) #Torsional Angle Composition
    rs.update(GetTAC(Angles=Angles)) # Torsional Angle Composition
    rs.update(GetTABigram(Angles=Angles)) #Torsional Angle Bigram
    rs.update(GetTAAC(Angles=Angles,DF=10)) #Torsional Angle Auto-covariance

    rs.update(GetLocalTACFromPercentile(Angles=Angles,Percents=[10,25,50,75],Reverse=True,Normalized=True))
    rs.update(GetLocalTACFromPercentile(Angles=Angles,Percents=[100], Normalized=True))
    rs.update(GetLocalTAC(Angles=Angles, n=4, gap=5, Reverse=True,Normalized=True))

    return rs

def __AC_STAS__(ProteinSequence):
    __results__ ={}
    for AC in __AA_LETTERS__:
        __results__[AC] = ProteinSequence.count(AC)
    return __results__
if __name__ == "__main__":
    protein = "ADGCGVGEGTGQGPMCNCMCMKWVYADEDAADLESDSFADEDASLESDSFPWSNQRVFCSFADEDAS"
    protein = "KKEKSX12PKGKSSISPQARAFLEEVFRRKQSLNSKEKEEVAKKCGITPLQVRVWFINKRMRSK"
    # res = MonoGram(protein)
    # print('Mongram:',res)
    # res = BiGram(protein)
    # print('Bigram:',res)
    # res = TriGram(protein)
    # print('Trigram:',res)
    # res = nGappedDip(protein, gap=20)
    # print('nGap', res)
    # res = GetMonoGramPercentiles(protein)
    # print('MonogramPercentiles:', res)
    # res = GetMonoGramPercentiles(protein)
    # print('BigramPercentiles:', res)
    #
    # res = K_NN(protein,k=5)
    # print('KNN ',res)

    # Res = GetPSW(protein)
    # Keys = Res.keys()
    # Res = sorted(Res.items(),key=lambda x:int(x[0][1:]))
    # #Keys = sorted(Keys,key=lambda x:int(x[1:]))
    # for key,value in Res:
    #     #print("{}:{}".format(key,value))
    #     pass
    # for key,value in Res.items():
    #     print("{}:{}".format(key,value))
    # for (key,value) in sorted(Res.items(),key=lambda x:x[0]):
    #    print(key + ":" + str(value))
    #print(Res)
    #Res = GetPSBigram(protein)
    #Res = GetPSTrigram(protein)
    #Res = GetPSMonogramPercentiles(protein)
    #Res = GetPSBigramPercentiles(protein)
    #Res = GetPSBigramPercentiles(protein)
    # Res = GetPSKNN(protein,k=15)
    # Keys = sorted(Res.keys())
    # for key in Keys:
    #     print("{}:{}".format(key,Res[key]))
    #print(Res)
    #
    # Grantham = os.path.join(DB_DIR,'Grantham.csv')
    # df = pd.read_csv(Grantham)
    # keys = df.keys()
    # Rows = df['Name'].values
    # DATA = df[list(Rows)].values
    # DATA = (DATA - np.min(DATA))/(np.max(DATA) - np.min(DATA))
    # grantham_dict = {}
    # python_grantham_str = ""
    # for row_index,AA_r in enumerate(Rows):
    #     for col_index,AA_c in enumerate(Rows):
    #         grantham_dict[AA_r+AA_c] = round(DATA[row_index,col_index],7)
    # python_grantham_str = '{'
    # for indx,(k,v) in enumerate(sorted(grantham_dict.items())):
    #     if indx != 0:
    #         python_grantham_str += ', "'+k+'":'+str(v)
    #     else:
    #         python_grantham_str += '"' + k + '":' + str(v)
    #     #print(k,v)
    # python_grantham_str += '}'
    # print(python_grantham_str)

    # for ap in __AA_PAIRS__:
    #     print(GRANTHAM_DISTANCE[ap])

    # print(DATA)
    # print(Rows)
    # print(keys)
    # print(df.head(6))

    #rs = GetQSOSW(protein,maxlag=15,weight=0.1)
    # rs = GetQSOGran(protein,maxlag=15,weight=0.1)
    # print(rs)
    #
    # seqs = GetPDB1075Seq()
    # print(seqs)

    print(len(GenPermutation(3)))
    print(len(FOUR_GRAM_FEAT))

    # for key,W in GetPSNGram(protein,first_n_pos=10).items():
    #     print('{}:{}'.format(key,W))

    # for key,value in GetConJointTriad(protein).items():
    #     print('{}:{}'.format(key,value))
    #print(GetConJointTriad(protein))

    data = np.random.randint(1,7,size=(30,20))
    # print(data[1,:20])
    # val = np.argmax(data[1,:20])
    # print(val)
    # xu = data.mean(axis=1)
    # stds = data.std(axis=1)
    # #print('Data Matix:',data)
    # # print('Xu:',xu)
    # # print('STD:',stds)
    # data = (data - xu[:,np.newaxis])/(stds[:,np.newaxis])
    # #print('New Data Matrix:',data)
    #
    # rs = GetPseudoPSSM(PSSM=data,n=5,gap=3)
    # for k,v in rs.items():
    #     print('{}:{}'.format(k,v))
    # print('Original Data:')
    # print(data)
    # oldrange = data.ptp()
    # new_range = (0,1)
    # data = new_range[0] + ((data - data.min())/(oldrange))*(new_range[1]-new_range[0])
    # print('Converted Data:')
    # print(data)
    # print(oldrange)
    # for k,v in GetPSSMMainGappedBigram(data,G=7).items():
    #     print('{}:{}'.format(k,v))

    L = int(data.shape[0])
    gap = 1
    for n in range(1,L//2):
        rs = GetLocalPSSM(data, n=n, gap=gap, Reverse=True)
        print('n={},g={},Dim:{}'.format(n,gap,len(rs.keys())))

    # rs = GetLocalPSSMFromPercent(data,percents = np.arange(15,90+1,15))
    # print(rs)
    data = np.random.randint(0, 91, size=(12, 2))
    rs = GetSPDTAC(data)
    for k,v in rs.items():
        print('{}:{}'.format(k,v))

    for k,v in GetTABigram(data).items():
        print('{}:{}'.format(k, v))

    #data = np.random.random_sample(size=(12,3))
    for k,v in GetTAAC(data,DF=5).items():
        print('{}:{}'.format(k, v))

    for k,v in GetLocalTAC(data,n=3,gap=2).items():
        print('{}:{}'.format(k, v))
    print("===============================================")
    for k, v in GetLocalTACFromPercentile(data,Percents=[10,15,25],Reverse=True).items():
        print('{}:{}'.format(k, v))
